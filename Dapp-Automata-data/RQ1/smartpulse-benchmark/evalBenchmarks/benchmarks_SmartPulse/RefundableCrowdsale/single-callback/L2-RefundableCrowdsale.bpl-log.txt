This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:38:38,710 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:38:38,711 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:38:38,722 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:38:38,722 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:38:38,723 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:38:38,725 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:38:38,726 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:38:38,728 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:38:38,730 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:38:38,731 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:38:38,731 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:38:38,732 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:38:38,733 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:38:38,734 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:38:38,735 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:38:38,736 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:38:38,737 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:38:38,739 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:38:38,740 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:38:38,741 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:38:38,742 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:38:38,744 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:38:38,744 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:38:38,744 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:38:38,745 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:38:38,746 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:38:38,747 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:38:38,747 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:38:38,747 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:38:38,747 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:38:38,748 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:38:38,749 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:38:38,750 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:38:38,751 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:38:38,786 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:38:38,786 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:38:38,787 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:38:38,787 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:38:38,787 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:38:38,789 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:38:38,790 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:38:38,790 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:38:38,799 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:38:38,799 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:38:38,799 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:38:38,800 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:38:38,800 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:38:38,800 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:38:38,801 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:38:38,801 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:38:38,802 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:38:38,802 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:38:38,802 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:38:38,821 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:38:38,831 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:38:38,833 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:38:38,833 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:38:38,834 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:38:38,835 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl
[2020-05-31 02:38:38,835 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl'
[2020-05-31 02:38:38,931 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:38:38,933 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:38:38,933 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:38:38,933 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:38:38,933 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:38:38,945 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:38,946 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:38,980 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:38,980 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:39,006 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:39,023 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:39,034 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:39,050 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:38:39,050 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:38:39,051 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:38:39,052 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:38:39,056 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/1) ...
[2020-05-31 02:38:39,081 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 02:38:39,086 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 02:38:39,093 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 02:38:39,100 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_buyTokens_Crowdsale_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_buyTokens_Crowdsale_2_0,GLOBAL]]]
[2020-05-31 02:38:39,102 INFO  L677   opiaSpecLangObserver]: Parsed call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msg.sender, msg.value); call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msg.sender, msg.value); call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],finalized_FinalizableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],goalReached_RefundableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],hasClosed_TimedCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]
[2020-05-31 02:38:39,103 INFO  L658   opiaSpecLangObserver]: Parsed var __finalized_FinalizableCrowdsale0: bool; var __goalReached_RefundableCrowdsale0: bool; var __hasClosed_TimedCrowdsale0: bool;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__finalized_FinalizableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__goalReached_RefundableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__hasClosed_TimedCrowdsale0],PrimitiveType[bool],null]]]
[2020-05-31 02:38:39,103 INFO  L599   opiaSpecLangObserver]: Parsed ( ( __hasClosed_TimedCrowdsale==true && __goalReached_RefundableCrowdsale==true ) && __finalized_FinalizableCrowdsale==false ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]]],BinaryExpression[COMPEQ,IdentifierExpression[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[false]]]
[2020-05-31 02:38:39,104 INFO  L968   opiaSpecLangObserver]: Compiling: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 02:38:39,104 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(inv_CorralChoice_RefundableCrowdsale0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:38:39,104 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 02:38:39,104 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 02:38:39,104 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 02:38:39,106 INFO  L677   opiaSpecLangObserver]: Parsed call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]],wallet_Crowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>]]]
[2020-05-31 02:38:39,106 INFO  L658   opiaSpecLangObserver]: Parsed var __wallet_Crowdsale1: int;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/single-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__wallet_Crowdsale1],PrimitiveType[int],null]]]
[2020-05-31 02:38:39,107 INFO  L599   opiaSpecLangObserver]: Parsed ben==__wallet_Crowdsale to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],IdentifierExpression[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]]
[2020-05-31 02:38:39,107 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 02:38:39,108 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_buyTokens_Crowdsale0) ) && ( <>AP(success_finalize_FinalizableCrowdsale0) ) )
Executed UtopiaSpecLang
[2020-05-31 02:38:39,126 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:39 PropertyContainer
[2020-05-31 02:38:39,126 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:38:39,127 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:38:39,127 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:38:39,127 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:38:39,128 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/2) ...
[2020-05-31 02:38:39,128 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:38:39,129 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:38:39,148 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:39" (2/2) ...
[2020-05-31 02:38:39,149 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:38:39,149 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:38:39,149 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:38:39,149 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:38:39,150 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/2) ...
[2020-05-31 02:38:39,199 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:38:39,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-05-31 02:38:39,199 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-05-31 02:38:39,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-05-31 02:38:39,200 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-05-31 02:38:39,200 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 02:38:39,200 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-31 02:38:39,200 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-31 02:38:39,200 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary
[2020-05-31 02:38:39,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary
[2020-05-31 02:38:39,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary
[2020-05-31 02:38:39,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 02:38:39,201 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow
[2020-05-31 02:38:39,201 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow
[2020-05-31 02:38:39,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow
[2020-05-31 02:38:39,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__success
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow
[2020-05-31 02:38:39,202 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__success
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 02:38:39,202 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 02:38:39,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 02:38:39,203 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_ConditionalEscrow
[2020-05-31 02:38:39,203 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow
[2020-05-31 02:38:39,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow
[2020-05-31 02:38:39,203 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 02:38:39,203 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow
[2020-05-31 02:38:39,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow
[2020-05-31 02:38:39,203 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow
[2020-05-31 02:38:39,203 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 02:38:39,204 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 02:38:39,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-05-31 02:38:39,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_IERC20
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_IERC20
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance_IERC20
[2020-05-31 02:38:39,205 INFO  L130     BoogieDeclarations]: Found specification of procedure approve_IERC20
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom_IERC20
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20
[2020-05-31 02:38:39,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__success
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__success
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 02:38:39,206 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 02:38:39,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale
[2020-05-31 02:38:39,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__success
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale
[2020-05-31 02:38:39,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale
[2020-05-31 02:38:39,207 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale
[2020-05-31 02:38:39,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale
[2020-05-31 02:38:39,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale
[2020-05-31 02:38:39,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale
[2020-05-31 02:38:39,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 02:38:39,208 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 02:38:39,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale
[2020-05-31 02:38:39,209 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale
[2020-05-31 02:38:39,209 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale
[2020-05-31 02:38:39,210 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 02:38:39,210 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 02:38:39,211 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,211 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 02:38:39,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 02:38:39,211 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale
[2020-05-31 02:38:39,211 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale
[2020-05-31 02:38:39,211 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale
[2020-05-31 02:38:39,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale
[2020-05-31 02:38:39,212 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 02:38:39,212 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 02:38:39,212 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,212 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 02:38:39,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:38:39,213 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__success
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-31 02:38:39,214 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Secondary
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Secondary
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Escrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Escrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ConditionalEscrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ConditionalEscrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundEscrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_RefundEscrow
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-05-31 02:38:39,215 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeERC20
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeERC20
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ReentrancyGuard
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ReentrancyGuard
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Crowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Crowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TimedCrowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TimedCrowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 02:38:39,216 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-31 02:38:39,217 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__success
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__success
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__success
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__success
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__success
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__fail
[2020-05-31 02:38:39,218 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__success
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__success
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__success
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 02:38:39,219 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__success
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__fail
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__success
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__fail
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__success
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__fail
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__success
[2020-05-31 02:38:39,220 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__success
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 02:38:39,221 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__success
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__success
[2020-05-31 02:38:39,222 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__success
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__success
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__success
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__success
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__fail
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__success
[2020-05-31 02:38:39,223 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 02:38:39,224 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__success
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__success
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__success
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 02:38:39,225 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 02:38:39,226 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 02:38:39,227 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__success
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__fail
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 02:38:39,228 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__fail
[2020-05-31 02:38:39,229 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__fail
[2020-05-31 02:38:39,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:38:39,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:38:39,229 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-31 02:38:39,230 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__success
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__success
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__success
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 02:38:39,231 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__success
[2020-05-31 02:38:39,232 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__success
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 02:38:39,233 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 02:38:39,234 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 02:38:39,235 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__fail
[2020-05-31 02:38:39,236 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__success
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 02:38:39,237 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 02:38:39,238 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 02:38:39,239 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,240 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 02:38:39,241 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__fail
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__success
[2020-05-31 02:38:39,242 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__fail
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__success
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Secondary
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Secondary
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Escrow
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Escrow
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ConditionalEscrow
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ConditionalEscrow
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundEscrow
[2020-05-31 02:38:39,243 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_RefundEscrow
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeERC20
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeERC20
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ReentrancyGuard
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ReentrancyGuard
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Crowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Crowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TimedCrowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TimedCrowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:38:39,244 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:38:39,244 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:38:39,364 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:39,547 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:39,790 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:39,896 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:40,062 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:38:40,062 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-05-31 02:38:40,065 INFO  L202        PluginConnector]: Adding new model L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:40 BoogieIcfgContainer
[2020-05-31 02:38:40,065 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:39" (2/2) ...
[2020-05-31 02:38:40,065 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:38:40,065 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3a42563e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:40, skipping insertion in model container
[2020-05-31 02:38:40,065 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:38:40,065 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:38:40,065 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:38:40,067 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:38:40,067 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/3) ...
[2020-05-31 02:38:40,067 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2ac763f7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:40, skipping insertion in model container
[2020-05-31 02:38:40,067 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:39" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:38:40,110 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:40 NWAContainer
[2020-05-31 02:38:40,110 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:38:40,111 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:38:40,111 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:38:40,112 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:38:40,112 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:40" (3/4) ...
[2020-05-31 02:38:40,113 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@53729c50 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:40, skipping insertion in model container
[2020-05-31 02:38:40,113 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:40" (4/4) ...
[2020-05-31 02:38:40,117 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-31 02:38:40,123 INFO  L110   BuchiProductObserver]: Initial RCFG 4653 locations, 6687 edges
[2020-05-31 02:38:40,123 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:38:40,137 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:38:56,052 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:38:56,103 INFO  L110   BuchiProductObserver]: BuchiProgram size 46375 locations, 196946 edges
[2020-05-31 02:38:56,103 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:56 BoogieIcfgContainer
[2020-05-31 02:38:56,103 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:38:56,103 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:38:56,104 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:38:56,105 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:38:56,105 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:56" (1/1) ...
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,855 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,859 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,862 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,862 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,862 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,862 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,863 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,864 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,866 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,868 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,873 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,874 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,875 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,876 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,877 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,878 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,881 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,882 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,883 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,888 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,889 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,891 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,892 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,893 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,893 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,894 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,894 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,894 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,894 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,896 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,896 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,896 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,897 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,897 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,897 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,898 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,898 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,898 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,898 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,899 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,899 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,901 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,902 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,902 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,902 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,902 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,903 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,904 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,904 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,904 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,904 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,904 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,920 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,921 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,921 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,921 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,921 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,921 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,934 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,970 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,971 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,971 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,971 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,971 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,971 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,974 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,974 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,974 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,974 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,975 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,975 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:56,984 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:38:57,117 INFO  L313           BlockEncoder]: Initial Icfg 46375 locations, 196946 edges
[2020-05-31 02:38:57,117 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:38:57,118 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:38:57,118 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:38:57,119 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:38:57,212 INFO  L70    emoveInfeasibleEdges]: Removed 2573 edges and 116 locations because of local infeasibility
[2020-05-31 02:38:57,281 INFO  L70        RemoveSinkStates]: Removed 1584 edges and 468 locations by removing sink states
[2020-05-31 02:38:57,430 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:38:57,484 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:38:57,550 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:38:57,550 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:38:57,598 INFO  L313           BlockEncoder]: Encoded RCFG 45615 locations, 192214 edges
[2020-05-31 02:38:57,598 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:38:57 BasicIcfg
[2020-05-31 02:38:57,598 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:38:57,599 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:38:57,599 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:38:57,601 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:38:57,601 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,601 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:38" (1/6) ...
[2020-05-31 02:38:57,603 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@573c5512 and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:57, skipping insertion in model container
[2020-05-31 02:38:57,603 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,603 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:39" (2/6) ...
[2020-05-31 02:38:57,603 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@573c5512 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:57, skipping insertion in model container
[2020-05-31 02:38:57,603 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,603 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:40" (3/6) ...
[2020-05-31 02:38:57,604 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@573c5512 and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:38:57, skipping insertion in model container
[2020-05-31 02:38:57,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:40" (4/6) ...
[2020-05-31 02:38:57,604 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@573c5512 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:57, skipping insertion in model container
[2020-05-31 02:38:57,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:56" (5/6) ...
[2020-05-31 02:38:57,604 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@573c5512 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:38:57, skipping insertion in model container
[2020-05-31 02:38:57,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:57,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:38:57" (6/6) ...
[2020-05-31 02:38:57,605 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-RefundableCrowdsale.bpl_BEv2
[2020-05-31 02:38:57,639 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:38:57,639 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:38:57,639 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:38:57,639 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:38:57,639 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:38:57,639 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:38:57,639 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:38:57,639 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:38:57,639 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:38:58,033 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45615 states.
[2020-05-31 02:38:58,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:38:58,400 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:58,400 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:58,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:58,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:58,410 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:38:58,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45615 states.
[2020-05-31 02:38:58,634 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:38:58,634 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:58,634 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:58,637 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:58,637 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:38:58,654 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:58,654 INFO  L82        PathProgramCache]: Analyzing trace with hash 546296182, now seen corresponding path program 1 times
[2020-05-31 02:38:58,657 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:58,675 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:58,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:38:58,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:58,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:38:58,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:58,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:38:58,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:38:58,732 INFO  L87              Difference]: Start difference. First operand 45615 states. Second operand 3 states.
[2020-05-31 02:39:01,365 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:01,365 INFO  L93              Difference]: Finished difference Result 29403 states and 78004 transitions.
[2020-05-31 02:39:01,365 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:01,367 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29403 states and 78004 transitions.
[2020-05-31 02:39:01,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:01,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29403 states to 29403 states and 78004 transitions.
[2020-05-31 02:39:01,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-31 02:39:01,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 346
[2020-05-31 02:39:01,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29403 states and 78004 transitions.
[2020-05-31 02:39:01,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:01,972 INFO  L728         BuchiCegarLoop]: Abstraction has 29403 states and 78004 transitions.
[2020-05-31 02:39:02,019 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29403 states and 78004 transitions.
[2020-05-31 02:39:02,478 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29403 to 29403.
[2020-05-31 02:39:02,479 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29403 states.
[2020-05-31 02:39:02,574 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29403 states to 29403 states and 78004 transitions.
[2020-05-31 02:39:02,575 INFO  L751         BuchiCegarLoop]: Abstraction has 29403 states and 78004 transitions.
[2020-05-31 02:39:02,575 INFO  L631         BuchiCegarLoop]: Abstraction has 29403 states and 78004 transitions.
[2020-05-31 02:39:02,575 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:39:02,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29403 states and 78004 transitions.
[2020-05-31 02:39:02,632 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:02,632 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:02,632 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:02,635 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:02,635 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND TRUE   revert
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:02,638 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:02,639 INFO  L82        PathProgramCache]: Analyzing trace with hash 270864796, now seen corresponding path program 1 times
[2020-05-31 02:39:02,639 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:02,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:02,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:39:02,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:02,671 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:02,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:02,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:02,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:02,673 INFO  L87              Difference]: Start difference. First operand 29403 states and 78004 transitions. cyclomatic complexity: 48625 Second operand 3 states.
[2020-05-31 02:39:03,731 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:03,731 INFO  L93              Difference]: Finished difference Result 28473 states and 52594 transitions.
[2020-05-31 02:39:03,731 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:03,732 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 28473 states and 52594 transitions.
[2020-05-31 02:39:03,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:03,980 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 28473 states to 28473 states and 52594 transitions.
[2020-05-31 02:39:03,981 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 346
[2020-05-31 02:39:03,982 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 346
[2020-05-31 02:39:03,982 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 28473 states and 52594 transitions.
[2020-05-31 02:39:04,015 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:04,015 INFO  L728         BuchiCegarLoop]: Abstraction has 28473 states and 52594 transitions.
[2020-05-31 02:39:04,044 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 28473 states and 52594 transitions.
[2020-05-31 02:39:04,293 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 28473 to 28473.
[2020-05-31 02:39:04,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28473 states.
[2020-05-31 02:39:04,361 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28473 states to 28473 states and 52594 transitions.
[2020-05-31 02:39:04,361 INFO  L751         BuchiCegarLoop]: Abstraction has 28473 states and 52594 transitions.
[2020-05-31 02:39:04,361 INFO  L631         BuchiCegarLoop]: Abstraction has 28473 states and 52594 transitions.
[2020-05-31 02:39:04,361 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:39:04,361 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28473 states and 52594 transitions.
[2020-05-31 02:39:04,404 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:04,404 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:04,404 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:04,406 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:04,406 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:04,409 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:04,409 INFO  L82        PathProgramCache]: Analyzing trace with hash 1832261344, now seen corresponding path program 1 times
[2020-05-31 02:39:04,409 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:04,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:04,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:39:04,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:04,434 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:04,434 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:04,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:04,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:04,434 INFO  L87              Difference]: Start difference. First operand 28473 states and 52594 transitions. cyclomatic complexity: 24145 Second operand 3 states.
[2020-05-31 02:39:06,345 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:06,346 INFO  L93              Difference]: Finished difference Result 28008 states and 36568 transitions.
[2020-05-31 02:39:06,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:06,346 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 28008 states and 36568 transitions.
[2020-05-31 02:39:06,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:06,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 28008 states to 28008 states and 36568 transitions.
[2020-05-31 02:39:06,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 346
[2020-05-31 02:39:06,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 346
[2020-05-31 02:39:06,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 28008 states and 36568 transitions.
[2020-05-31 02:39:06,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:06,517 INFO  L728         BuchiCegarLoop]: Abstraction has 28008 states and 36568 transitions.
[2020-05-31 02:39:06,544 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 28008 states and 36568 transitions.
[2020-05-31 02:39:06,723 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 28008 to 28008.
[2020-05-31 02:39:06,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28008 states.
[2020-05-31 02:39:06,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28008 states to 28008 states and 36568 transitions.
[2020-05-31 02:39:06,766 INFO  L751         BuchiCegarLoop]: Abstraction has 28008 states and 36568 transitions.
[2020-05-31 02:39:06,766 INFO  L631         BuchiCegarLoop]: Abstraction has 28008 states and 36568 transitions.
[2020-05-31 02:39:06,767 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:39:06,767 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28008 states and 36568 transitions.
[2020-05-31 02:39:06,799 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:06,799 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:06,799 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:06,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:06,801 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9206]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9206]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:06,805 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:06,805 INFO  L82        PathProgramCache]: Analyzing trace with hash -1367784824, now seen corresponding path program 1 times
[2020-05-31 02:39:06,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:06,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:06,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:39:06,851 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:06,851 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:06,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:06,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:06,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:06,851 INFO  L87              Difference]: Start difference. First operand 28008 states and 36568 transitions. cyclomatic complexity: 8584 Second operand 3 states.
[2020-05-31 02:39:07,289 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:07,289 INFO  L93              Difference]: Finished difference Result 31895 states and 40011 transitions.
[2020-05-31 02:39:07,289 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:07,289 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31895 states and 40011 transitions.
[2020-05-31 02:39:07,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:07,469 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31895 states to 31895 states and 40011 transitions.
[2020-05-31 02:39:07,469 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 443
[2020-05-31 02:39:07,469 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 443
[2020-05-31 02:39:07,469 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31895 states and 40011 transitions.
[2020-05-31 02:39:07,496 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:07,496 INFO  L728         BuchiCegarLoop]: Abstraction has 31895 states and 40011 transitions.
[2020-05-31 02:39:07,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31895 states and 40011 transitions.
[2020-05-31 02:39:07,815 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31895 to 31254.
[2020-05-31 02:39:07,815 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31254 states.
[2020-05-31 02:39:07,868 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31254 states to 31254 states and 39301 transitions.
[2020-05-31 02:39:07,868 INFO  L751         BuchiCegarLoop]: Abstraction has 31254 states and 39301 transitions.
[2020-05-31 02:39:07,868 INFO  L631         BuchiCegarLoop]: Abstraction has 31254 states and 39301 transitions.
[2020-05-31 02:39:07,868 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:39:07,869 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31254 states and 39301 transitions.
[2020-05-31 02:39:07,909 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:07,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:07,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:07,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:07,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND TRUE   !(goal_s1187 > 0)
[L7308]               revert := true;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9206]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9206]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:07,915 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:07,915 INFO  L82        PathProgramCache]: Analyzing trace with hash 669350859, now seen corresponding path program 1 times
[2020-05-31 02:39:07,915 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:07,928 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:07,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 22 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-31 02:39:07,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:07,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:07,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:07,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:07,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:07,971 INFO  L87              Difference]: Start difference. First operand 31254 states and 39301 transitions. cyclomatic complexity: 8071 Second operand 3 states.
[2020-05-31 02:39:08,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:08,324 INFO  L93              Difference]: Finished difference Result 31962 states and 38865 transitions.
[2020-05-31 02:39:08,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:08,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31962 states and 38865 transitions.
[2020-05-31 02:39:08,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:08,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31962 states to 29946 states and 36207 transitions.
[2020-05-31 02:39:08,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 346
[2020-05-31 02:39:08,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 346
[2020-05-31 02:39:08,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29946 states and 36207 transitions.
[2020-05-31 02:39:08,534 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:08,534 INFO  L728         BuchiCegarLoop]: Abstraction has 29946 states and 36207 transitions.
[2020-05-31 02:39:08,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29946 states and 36207 transitions.
[2020-05-31 02:39:08,749 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29946 to 29570.
[2020-05-31 02:39:08,749 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29570 states.
[2020-05-31 02:39:08,794 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29570 states to 29570 states and 35831 transitions.
[2020-05-31 02:39:08,794 INFO  L751         BuchiCegarLoop]: Abstraction has 29570 states and 35831 transitions.
[2020-05-31 02:39:08,794 INFO  L631         BuchiCegarLoop]: Abstraction has 29570 states and 35831 transitions.
[2020-05-31 02:39:08,794 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:39:08,794 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29570 states and 35831 transitions.
[2020-05-31 02:39:08,825 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:08,825 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:08,825 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:08,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:08,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:08,838 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:08,838 INFO  L82        PathProgramCache]: Analyzing trace with hash 1749334264, now seen corresponding path program 1 times
[2020-05-31 02:39:08,839 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:08,856 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:09,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 702 backedges. 0 proven. 39 refuted. 0 times theorem prover too weak. 663 trivial. 0 not checked.
[2020-05-31 02:39:09,162 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:39:09,162 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:39:09,163 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:09,163 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:39:09,163 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:39:09,163 INFO  L87              Difference]: Start difference. First operand 29570 states and 35831 transitions. cyclomatic complexity: 6285 Second operand 6 states.
[2020-05-31 02:39:09,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:09,695 INFO  L93              Difference]: Finished difference Result 29592 states and 35857 transitions.
[2020-05-31 02:39:09,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 02:39:09,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29592 states and 35857 transitions.
[2020-05-31 02:39:09,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:09,862 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29592 states to 29579 states and 35841 transitions.
[2020-05-31 02:39:09,862 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 342
[2020-05-31 02:39:09,862 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 342
[2020-05-31 02:39:09,863 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29579 states and 35841 transitions.
[2020-05-31 02:39:09,888 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:09,888 INFO  L728         BuchiCegarLoop]: Abstraction has 29579 states and 35841 transitions.
[2020-05-31 02:39:09,920 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29579 states and 35841 transitions.
[2020-05-31 02:39:10,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29579 to 29579.
[2020-05-31 02:39:10,108 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29579 states.
[2020-05-31 02:39:10,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29579 states to 29579 states and 35841 transitions.
[2020-05-31 02:39:10,148 INFO  L751         BuchiCegarLoop]: Abstraction has 29579 states and 35841 transitions.
[2020-05-31 02:39:10,148 INFO  L631         BuchiCegarLoop]: Abstraction has 29579 states and 35841 transitions.
[2020-05-31 02:39:10,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:39:10,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29579 states and 35841 transitions.
[2020-05-31 02:39:10,180 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:10,180 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:10,180 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:10,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:10,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:10,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:10,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 560577662, now seen corresponding path program 1 times
[2020-05-31 02:39:10,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:10,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:10,407 INFO  L134       CoverageAnalysis]: Checked inductivity of 687 backedges. 9 proven. 33 refuted. 0 times theorem prover too weak. 645 trivial. 0 not checked.
[2020-05-31 02:39:10,407 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:39:10,407 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 02:39:10,408 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:10,408 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 02:39:10,408 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 02:39:10,408 INFO  L87              Difference]: Start difference. First operand 29579 states and 35841 transitions. cyclomatic complexity: 6286 Second operand 7 states.
[2020-05-31 02:39:10,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:10,848 INFO  L93              Difference]: Finished difference Result 29596 states and 35861 transitions.
[2020-05-31 02:39:10,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 02:39:10,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29596 states and 35861 transitions.
[2020-05-31 02:39:10,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:11,008 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29596 states to 29586 states and 35849 transitions.
[2020-05-31 02:39:11,008 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 342
[2020-05-31 02:39:11,008 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 342
[2020-05-31 02:39:11,008 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29586 states and 35849 transitions.
[2020-05-31 02:39:11,034 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:11,034 INFO  L728         BuchiCegarLoop]: Abstraction has 29586 states and 35849 transitions.
[2020-05-31 02:39:11,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29586 states and 35849 transitions.
[2020-05-31 02:39:11,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29586 to 29586.
[2020-05-31 02:39:11,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29586 states.
[2020-05-31 02:39:11,297 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29586 states to 29586 states and 35849 transitions.
[2020-05-31 02:39:11,297 INFO  L751         BuchiCegarLoop]: Abstraction has 29586 states and 35849 transitions.
[2020-05-31 02:39:11,297 INFO  L631         BuchiCegarLoop]: Abstraction has 29586 states and 35849 transitions.
[2020-05-31 02:39:11,297 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:39:11,297 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29586 states and 35849 transitions.
[2020-05-31 02:39:11,330 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:11,331 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:11,331 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:11,335 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:11,335 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND TRUE   DType[this] == TimedCrowdsale
[L6506]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6506]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6507]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:11,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:11,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 532901983, now seen corresponding path program 1 times
[2020-05-31 02:39:11,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:11,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:11,586 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:11,586 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:11,586 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:11,587 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:11,587 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:11,587 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:11,587 INFO  L87              Difference]: Start difference. First operand 29586 states and 35849 transitions. cyclomatic complexity: 6287 Second operand 3 states.
[2020-05-31 02:39:11,876 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:11,876 INFO  L93              Difference]: Finished difference Result 29834 states and 36177 transitions.
[2020-05-31 02:39:11,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:11,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29834 states and 36177 transitions.
[2020-05-31 02:39:11,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:12,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29834 states to 29834 states and 36177 transitions.
[2020-05-31 02:39:12,034 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 350
[2020-05-31 02:39:12,035 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 350
[2020-05-31 02:39:12,035 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29834 states and 36177 transitions.
[2020-05-31 02:39:12,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:12,060 INFO  L728         BuchiCegarLoop]: Abstraction has 29834 states and 36177 transitions.
[2020-05-31 02:39:12,091 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29834 states and 36177 transitions.
[2020-05-31 02:39:12,270 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29834 to 29794.
[2020-05-31 02:39:12,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29794 states.
[2020-05-31 02:39:12,316 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29794 states to 29794 states and 36065 transitions.
[2020-05-31 02:39:12,317 INFO  L751         BuchiCegarLoop]: Abstraction has 29794 states and 36065 transitions.
[2020-05-31 02:39:12,317 INFO  L631         BuchiCegarLoop]: Abstraction has 29794 states and 36065 transitions.
[2020-05-31 02:39:12,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:39:12,317 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29794 states and 36065 transitions.
[2020-05-31 02:39:12,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:12,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:12,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:12,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:12,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND TRUE   DType[this] == TimedCrowdsale
[L6456]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6456]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6457]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7239]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7240]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7241]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:12,362 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:12,363 INFO  L82        PathProgramCache]: Analyzing trace with hash 1109268585, now seen corresponding path program 1 times
[2020-05-31 02:39:12,363 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:12,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:12,562 INFO  L134       CoverageAnalysis]: Checked inductivity of 684 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 650 trivial. 0 not checked.
[2020-05-31 02:39:12,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:12,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:39:12,563 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:12,563 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:39:12,563 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:39:12,563 INFO  L87              Difference]: Start difference. First operand 29794 states and 36065 transitions. cyclomatic complexity: 6295 Second operand 8 states.
[2020-05-31 02:39:13,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:13,069 INFO  L93              Difference]: Finished difference Result 29826 states and 36103 transitions.
[2020-05-31 02:39:13,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 02:39:13,069 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29826 states and 36103 transitions.
[2020-05-31 02:39:13,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:13,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29826 states to 29763 states and 36026 transitions.
[2020-05-31 02:39:13,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 345
[2020-05-31 02:39:13,224 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 345
[2020-05-31 02:39:13,224 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29763 states and 36026 transitions.
[2020-05-31 02:39:13,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:13,249 INFO  L728         BuchiCegarLoop]: Abstraction has 29763 states and 36026 transitions.
[2020-05-31 02:39:13,280 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29763 states and 36026 transitions.
[2020-05-31 02:39:13,476 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29763 to 29763.
[2020-05-31 02:39:13,477 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29763 states.
[2020-05-31 02:39:13,525 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29763 states to 29763 states and 36026 transitions.
[2020-05-31 02:39:13,525 INFO  L751         BuchiCegarLoop]: Abstraction has 29763 states and 36026 transitions.
[2020-05-31 02:39:13,525 INFO  L631         BuchiCegarLoop]: Abstraction has 29763 states and 36026 transitions.
[2020-05-31 02:39:13,525 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:39:13,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29763 states and 36026 transitions.
[2020-05-31 02:39:13,560 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:13,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:13,561 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:13,564 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:13,564 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7239]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7240]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7241]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND TRUE   DType[this] == TimedCrowdsale
[L6456]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6456]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6457]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND TRUE   DType[this] == TimedCrowdsale
[L6482]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6482]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6483]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:13,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:13,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -1150389732, now seen corresponding path program 1 times
[2020-05-31 02:39:13,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:13,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:13,888 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:13,888 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:13,889 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:13,889 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:13,889 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:13,889 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:13,889 INFO  L87              Difference]: Start difference. First operand 29763 states and 36026 transitions. cyclomatic complexity: 6287 Second operand 3 states.
[2020-05-31 02:39:14,181 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:14,182 INFO  L93              Difference]: Finished difference Result 30051 states and 36394 transitions.
[2020-05-31 02:39:14,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:14,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30051 states and 36394 transitions.
[2020-05-31 02:39:14,241 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:14,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30051 states to 30051 states and 36394 transitions.
[2020-05-31 02:39:14,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 354
[2020-05-31 02:39:14,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 354
[2020-05-31 02:39:14,336 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30051 states and 36394 transitions.
[2020-05-31 02:39:14,361 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:14,362 INFO  L728         BuchiCegarLoop]: Abstraction has 30051 states and 36394 transitions.
[2020-05-31 02:39:14,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30051 states and 36394 transitions.
[2020-05-31 02:39:14,575 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30051 to 30011.
[2020-05-31 02:39:14,575 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30011 states.
[2020-05-31 02:39:14,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30011 states to 30011 states and 36282 transitions.
[2020-05-31 02:39:14,623 INFO  L751         BuchiCegarLoop]: Abstraction has 30011 states and 36282 transitions.
[2020-05-31 02:39:14,623 INFO  L631         BuchiCegarLoop]: Abstraction has 30011 states and 36282 transitions.
[2020-05-31 02:39:14,623 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:39:14,623 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30011 states and 36282 transitions.
[2020-05-31 02:39:14,658 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:14,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:14,658 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:14,661 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:14,661 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND TRUE   DType[this] == TimedCrowdsale
[L6420]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6420]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6421]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND TRUE   DType[this] == TimedCrowdsale
[L6456]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6456]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6457]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND TRUE   DType[this] == TimedCrowdsale
[L6531]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6531]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6532]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND TRUE   DType[this] == TimedCrowdsale
[L6420]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6420]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6421]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND TRUE   DType[this] == TimedCrowdsale
[L6456]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6456]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6457]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND TRUE   DType[this] == TimedCrowdsale
[L6482]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6482]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6483]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND TRUE   DType[this] == TimedCrowdsale
[L6506]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6506]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6507]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:14,668 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:14,669 INFO  L82        PathProgramCache]: Analyzing trace with hash -194939857, now seen corresponding path program 1 times
[2020-05-31 02:39:14,669 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:14,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:14,862 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:14,862 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:14,862 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:14,863 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:14,863 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:14,863 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:14,863 INFO  L87              Difference]: Start difference. First operand 30011 states and 36282 transitions. cyclomatic complexity: 6295 Second operand 3 states.
[2020-05-31 02:39:15,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:15,179 INFO  L93              Difference]: Finished difference Result 30339 states and 36690 transitions.
[2020-05-31 02:39:15,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:15,179 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30339 states and 36690 transitions.
[2020-05-31 02:39:15,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:15,332 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30339 states to 30339 states and 36690 transitions.
[2020-05-31 02:39:15,333 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 359
[2020-05-31 02:39:15,333 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 359
[2020-05-31 02:39:15,333 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30339 states and 36690 transitions.
[2020-05-31 02:39:15,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:15,359 INFO  L728         BuchiCegarLoop]: Abstraction has 30339 states and 36690 transitions.
[2020-05-31 02:39:15,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30339 states and 36690 transitions.
[2020-05-31 02:39:15,580 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30339 to 30299.
[2020-05-31 02:39:15,580 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30299 states.
[2020-05-31 02:39:15,627 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30299 states to 30299 states and 36578 transitions.
[2020-05-31 02:39:15,627 INFO  L751         BuchiCegarLoop]: Abstraction has 30299 states and 36578 transitions.
[2020-05-31 02:39:15,627 INFO  L631         BuchiCegarLoop]: Abstraction has 30299 states and 36578 transitions.
[2020-05-31 02:39:15,627 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:39:15,628 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30299 states and 36578 transitions.
[2020-05-31 02:39:15,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:15,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:15,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:15,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:15,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7239]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7240]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7241]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:15,672 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:15,672 INFO  L82        PathProgramCache]: Analyzing trace with hash -1252710293, now seen corresponding path program 1 times
[2020-05-31 02:39:15,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:15,696 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:15,923 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:15,923 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:15,923 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:39:15,924 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:15,924 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:39:15,924 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:39:15,924 INFO  L87              Difference]: Start difference. First operand 30299 states and 36578 transitions. cyclomatic complexity: 6303 Second operand 4 states.
[2020-05-31 02:39:16,075 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:16,075 INFO  L93              Difference]: Finished difference Result 30379 states and 36670 transitions.
[2020-05-31 02:39:16,076 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:39:16,076 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30379 states and 36670 transitions.
[2020-05-31 02:39:16,141 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:16,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30379 states to 30363 states and 36654 transitions.
[2020-05-31 02:39:16,236 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 359
[2020-05-31 02:39:16,237 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 359
[2020-05-31 02:39:16,237 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30363 states and 36654 transitions.
[2020-05-31 02:39:16,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:16,262 INFO  L728         BuchiCegarLoop]: Abstraction has 30363 states and 36654 transitions.
[2020-05-31 02:39:16,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30363 states and 36654 transitions.
[2020-05-31 02:39:16,484 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30363 to 30363.
[2020-05-31 02:39:16,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30363 states.
[2020-05-31 02:39:16,531 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30363 states to 30363 states and 36654 transitions.
[2020-05-31 02:39:16,531 INFO  L751         BuchiCegarLoop]: Abstraction has 30363 states and 36654 transitions.
[2020-05-31 02:39:16,531 INFO  L631         BuchiCegarLoop]: Abstraction has 30363 states and 36654 transitions.
[2020-05-31 02:39:16,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:39:16,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30363 states and 36654 transitions.
[2020-05-31 02:39:16,566 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:16,566 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:16,566 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:16,569 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:16,569 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:16,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:16,576 INFO  L82        PathProgramCache]: Analyzing trace with hash 961484510, now seen corresponding path program 1 times
[2020-05-31 02:39:16,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:16,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:16,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:16,773 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:16,773 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:39:16,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:16,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:39:16,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:39:16,774 INFO  L87              Difference]: Start difference. First operand 30363 states and 36654 transitions. cyclomatic complexity: 6315 Second operand 3 states.
[2020-05-31 02:39:17,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:17,017 INFO  L93              Difference]: Finished difference Result 30411 states and 36718 transitions.
[2020-05-31 02:39:17,017 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:39:17,017 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30411 states and 36718 transitions.
[2020-05-31 02:39:17,080 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:17,176 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30411 states to 30411 states and 36718 transitions.
[2020-05-31 02:39:17,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 359
[2020-05-31 02:39:17,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 359
[2020-05-31 02:39:17,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30411 states and 36718 transitions.
[2020-05-31 02:39:17,202 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:17,202 INFO  L728         BuchiCegarLoop]: Abstraction has 30411 states and 36718 transitions.
[2020-05-31 02:39:17,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30411 states and 36718 transitions.
[2020-05-31 02:39:17,423 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30411 to 30387.
[2020-05-31 02:39:17,424 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30387 states.
[2020-05-31 02:39:17,472 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30387 states to 30387 states and 36678 transitions.
[2020-05-31 02:39:17,472 INFO  L751         BuchiCegarLoop]: Abstraction has 30387 states and 36678 transitions.
[2020-05-31 02:39:17,472 INFO  L631         BuchiCegarLoop]: Abstraction has 30387 states and 36678 transitions.
[2020-05-31 02:39:17,472 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 02:39:17,473 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30387 states and 36678 transitions.
[2020-05-31 02:39:17,507 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:17,507 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:17,507 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:17,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:17,510 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:17,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:17,517 INFO  L82        PathProgramCache]: Analyzing trace with hash -1447928360, now seen corresponding path program 1 times
[2020-05-31 02:39:17,518 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:17,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:17,757 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 02:39:17,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:17,758 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 02:39:17,758 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:17,758 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:39:17,758 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:39:17,758 INFO  L87              Difference]: Start difference. First operand 30387 states and 36678 transitions. cyclomatic complexity: 6315 Second operand 6 states.
[2020-05-31 02:39:18,621 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:18,621 INFO  L93              Difference]: Finished difference Result 30627 states and 37026 transitions.
[2020-05-31 02:39:18,621 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 02:39:18,621 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30627 states and 37026 transitions.
[2020-05-31 02:39:18,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:18,758 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30627 states to 30427 states and 36782 transitions.
[2020-05-31 02:39:18,758 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 364
[2020-05-31 02:39:18,758 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 364
[2020-05-31 02:39:18,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30427 states and 36782 transitions.
[2020-05-31 02:39:18,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:18,783 INFO  L728         BuchiCegarLoop]: Abstraction has 30427 states and 36782 transitions.
[2020-05-31 02:39:18,810 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30427 states and 36782 transitions.
[2020-05-31 02:39:18,993 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30427 to 30427.
[2020-05-31 02:39:18,994 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30427 states.
[2020-05-31 02:39:19,041 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30427 states to 30427 states and 36782 transitions.
[2020-05-31 02:39:19,041 INFO  L751         BuchiCegarLoop]: Abstraction has 30427 states and 36782 transitions.
[2020-05-31 02:39:19,041 INFO  L631         BuchiCegarLoop]: Abstraction has 30427 states and 36782 transitions.
[2020-05-31 02:39:19,041 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 02:39:19,041 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30427 states and 36782 transitions.
[2020-05-31 02:39:19,076 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:19,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:19,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:19,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:19,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9248]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L9253]   COND TRUE   DType[this] == TimedCrowdsale
[L9254]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9254]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9255]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6983]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6983]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6984]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:19,084 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:19,084 INFO  L82        PathProgramCache]: Analyzing trace with hash 1158083831, now seen corresponding path program 1 times
[2020-05-31 02:39:19,085 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:19,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:19,326 INFO  L134       CoverageAnalysis]: Checked inductivity of 717 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 717 trivial. 0 not checked.
[2020-05-31 02:39:19,327 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:19,327 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 02:39:19,327 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:19,327 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:39:19,327 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:39:19,328 INFO  L87              Difference]: Start difference. First operand 30427 states and 36782 transitions. cyclomatic complexity: 6379 Second operand 6 states.
[2020-05-31 02:39:19,904 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:19,904 INFO  L93              Difference]: Finished difference Result 30667 states and 37082 transitions.
[2020-05-31 02:39:19,904 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 02:39:19,904 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30667 states and 37082 transitions.
[2020-05-31 02:39:19,967 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:20,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30667 states to 30451 states and 36806 transitions.
[2020-05-31 02:39:20,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 364
[2020-05-31 02:39:20,064 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 375
[2020-05-31 02:39:20,064 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30451 states and 36806 transitions.
[2020-05-31 02:39:20,091 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:20,091 INFO  L728         BuchiCegarLoop]: Abstraction has 30451 states and 36806 transitions.
[2020-05-31 02:39:20,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30451 states and 36806 transitions.
[2020-05-31 02:39:20,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30451 to 30451.
[2020-05-31 02:39:20,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30451 states.
[2020-05-31 02:39:20,363 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30451 states to 30451 states and 36806 transitions.
[2020-05-31 02:39:20,363 INFO  L751         BuchiCegarLoop]: Abstraction has 30451 states and 36806 transitions.
[2020-05-31 02:39:20,364 INFO  L631         BuchiCegarLoop]: Abstraction has 30451 states and 36806 transitions.
[2020-05-31 02:39:20,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 02:39:20,364 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30451 states and 36806 transitions.
[2020-05-31 02:39:20,399 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:20,399 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:20,399 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:20,401 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:20,401 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND FALSE  !(DType[this] == Escrow)
[L9177]   COND TRUE   DType[this] == Secondary
[L9178]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9178]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9248]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L9253]   COND TRUE   DType[this] == TimedCrowdsale
[L9254]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9254]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9255]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:20,408 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:20,408 INFO  L82        PathProgramCache]: Analyzing trace with hash 393657395, now seen corresponding path program 1 times
[2020-05-31 02:39:20,408 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:20,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:20,684 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:39:20,684 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:20,685 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-31 02:39:20,685 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:20,685 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:39:20,685 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:39:20,686 INFO  L87              Difference]: Start difference. First operand 30451 states and 36806 transitions. cyclomatic complexity: 6379 Second operand 8 states.
[2020-05-31 02:39:21,619 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:21,619 INFO  L93              Difference]: Finished difference Result 30595 states and 36958 transitions.
[2020-05-31 02:39:21,619 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 02:39:21,619 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30595 states and 36958 transitions.
[2020-05-31 02:39:21,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:21,774 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30595 states to 30595 states and 36958 transitions.
[2020-05-31 02:39:21,774 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 375
[2020-05-31 02:39:21,774 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 375
[2020-05-31 02:39:21,774 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30595 states and 36958 transitions.
[2020-05-31 02:39:21,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:21,801 INFO  L728         BuchiCegarLoop]: Abstraction has 30595 states and 36958 transitions.
[2020-05-31 02:39:21,832 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30595 states and 36958 transitions.
[2020-05-31 02:39:22,024 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30595 to 30563.
[2020-05-31 02:39:22,025 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30563 states.
[2020-05-31 02:39:22,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30563 states to 30563 states and 36926 transitions.
[2020-05-31 02:39:22,072 INFO  L751         BuchiCegarLoop]: Abstraction has 30563 states and 36926 transitions.
[2020-05-31 02:39:22,072 INFO  L631         BuchiCegarLoop]: Abstraction has 30563 states and 36926 transitions.
[2020-05-31 02:39:22,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 02:39:22,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30563 states and 36926 transitions.
[2020-05-31 02:39:22,107 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:22,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:22,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:22,110 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:22,110 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:22,116 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:22,116 INFO  L82        PathProgramCache]: Analyzing trace with hash -296627750, now seen corresponding path program 1 times
[2020-05-31 02:39:22,116 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:22,138 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:22,372 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:39:22,372 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:22,372 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 02:39:22,372 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:22,372 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 02:39:22,373 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 02:39:22,373 INFO  L87              Difference]: Start difference. First operand 30563 states and 36926 transitions. cyclomatic complexity: 6387 Second operand 7 states.
[2020-05-31 02:39:23,705 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:23,705 INFO  L93              Difference]: Finished difference Result 30683 states and 37046 transitions.
[2020-05-31 02:39:23,705 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:39:23,705 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30683 states and 37046 transitions.
[2020-05-31 02:39:23,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:23,873 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30683 states to 30683 states and 37046 transitions.
[2020-05-31 02:39:23,874 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 375
[2020-05-31 02:39:23,874 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 375
[2020-05-31 02:39:23,874 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30683 states and 37046 transitions.
[2020-05-31 02:39:23,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:23,900 INFO  L728         BuchiCegarLoop]: Abstraction has 30683 states and 37046 transitions.
[2020-05-31 02:39:23,931 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30683 states and 37046 transitions.
[2020-05-31 02:39:24,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30683 to 30619.
[2020-05-31 02:39:24,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30619 states.
[2020-05-31 02:39:24,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30619 states to 30619 states and 36982 transitions.
[2020-05-31 02:39:24,173 INFO  L751         BuchiCegarLoop]: Abstraction has 30619 states and 36982 transitions.
[2020-05-31 02:39:24,173 INFO  L631         BuchiCegarLoop]: Abstraction has 30619 states and 36982 transitions.
[2020-05-31 02:39:24,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 02:39:24,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30619 states and 36982 transitions.
[2020-05-31 02:39:24,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:39:24,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:24,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:24,210 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:24,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:24,217 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:24,217 INFO  L82        PathProgramCache]: Analyzing trace with hash -8862643, now seen corresponding path program 1 times
[2020-05-31 02:39:24,217 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:24,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:24,610 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:39:24,610 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:24,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-05-31 02:39:24,611 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:24,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:39:24,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:39:24,611 INFO  L87              Difference]: Start difference. First operand 30619 states and 36982 transitions. cyclomatic complexity: 6387 Second operand 14 states.
[2020-05-31 02:39:25,998 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:25,998 INFO  L93              Difference]: Finished difference Result 31055 states and 37576 transitions.
[2020-05-31 02:39:25,998 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:39:25,998 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31055 states and 37576 transitions.
[2020-05-31 02:39:26,063 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:26,163 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31055 states to 31055 states and 37576 transitions.
[2020-05-31 02:39:26,163 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 389
[2020-05-31 02:39:26,163 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 389
[2020-05-31 02:39:26,164 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31055 states and 37576 transitions.
[2020-05-31 02:39:26,191 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:26,191 INFO  L728         BuchiCegarLoop]: Abstraction has 31055 states and 37576 transitions.
[2020-05-31 02:39:26,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31055 states and 37576 transitions.
[2020-05-31 02:39:26,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31055 to 31055.
[2020-05-31 02:39:26,423 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31055 states.
[2020-05-31 02:39:26,471 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31055 states to 31055 states and 37576 transitions.
[2020-05-31 02:39:26,471 INFO  L751         BuchiCegarLoop]: Abstraction has 31055 states and 37576 transitions.
[2020-05-31 02:39:26,471 INFO  L631         BuchiCegarLoop]: Abstraction has 31055 states and 37576 transitions.
[2020-05-31 02:39:26,471 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 02:39:26,471 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31055 states and 37576 transitions.
[2020-05-31 02:39:26,506 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:26,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:26,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:26,509 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:26,509 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:26,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:26,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -328652074, now seen corresponding path program 1 times
[2020-05-31 02:39:26,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:26,531 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:26,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 716 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 680 trivial. 0 not checked.
[2020-05-31 02:39:26,738 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:39:26,738 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:39:26,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:26,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:39:26,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:39:26,740 INFO  L87              Difference]: Start difference. First operand 31055 states and 37576 transitions. cyclomatic complexity: 6553 Second operand 6 states.
[2020-05-31 02:39:27,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:27,136 INFO  L93              Difference]: Finished difference Result 31076 states and 37601 transitions.
[2020-05-31 02:39:27,137 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 02:39:27,137 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31076 states and 37601 transitions.
[2020-05-31 02:39:27,201 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:27,300 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31076 states to 31063 states and 37585 transitions.
[2020-05-31 02:39:27,300 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 389
[2020-05-31 02:39:27,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 389
[2020-05-31 02:39:27,301 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31063 states and 37585 transitions.
[2020-05-31 02:39:27,328 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:27,328 INFO  L728         BuchiCegarLoop]: Abstraction has 31063 states and 37585 transitions.
[2020-05-31 02:39:27,359 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31063 states and 37585 transitions.
[2020-05-31 02:39:27,557 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31063 to 31063.
[2020-05-31 02:39:27,557 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31063 states.
[2020-05-31 02:39:27,606 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31063 states to 31063 states and 37585 transitions.
[2020-05-31 02:39:27,606 INFO  L751         BuchiCegarLoop]: Abstraction has 31063 states and 37585 transitions.
[2020-05-31 02:39:27,606 INFO  L631         BuchiCegarLoop]: Abstraction has 31063 states and 37585 transitions.
[2020-05-31 02:39:27,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 02:39:27,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31063 states and 37585 transitions.
[2020-05-31 02:39:27,641 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:27,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:27,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:27,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:27,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:27,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:27,650 INFO  L82        PathProgramCache]: Analyzing trace with hash -1974824927, now seen corresponding path program 1 times
[2020-05-31 02:39:27,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:27,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:27,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 701 backedges. 8 proven. 31 refuted. 0 times theorem prover too weak. 662 trivial. 0 not checked.
[2020-05-31 02:39:27,941 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:39:27,941 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 02:39:27,942 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:27,942 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 02:39:27,942 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 02:39:27,942 INFO  L87              Difference]: Start difference. First operand 31063 states and 37585 transitions. cyclomatic complexity: 6554 Second operand 7 states.
[2020-05-31 02:39:28,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:28,376 INFO  L93              Difference]: Finished difference Result 31080 states and 37605 transitions.
[2020-05-31 02:39:28,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 02:39:28,377 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31080 states and 37605 transitions.
[2020-05-31 02:39:28,439 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:28,538 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31080 states to 31070 states and 37593 transitions.
[2020-05-31 02:39:28,538 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 389
[2020-05-31 02:39:28,539 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 389
[2020-05-31 02:39:28,539 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31070 states and 37593 transitions.
[2020-05-31 02:39:28,566 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:28,566 INFO  L728         BuchiCegarLoop]: Abstraction has 31070 states and 37593 transitions.
[2020-05-31 02:39:28,598 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31070 states and 37593 transitions.
[2020-05-31 02:39:28,796 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31070 to 31070.
[2020-05-31 02:39:28,796 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31070 states.
[2020-05-31 02:39:28,845 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31070 states to 31070 states and 37593 transitions.
[2020-05-31 02:39:28,845 INFO  L751         BuchiCegarLoop]: Abstraction has 31070 states and 37593 transitions.
[2020-05-31 02:39:28,845 INFO  L631         BuchiCegarLoop]: Abstraction has 31070 states and 37593 transitions.
[2020-05-31 02:39:28,845 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 02:39:28,845 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31070 states and 37593 transitions.
[2020-05-31 02:39:28,883 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:28,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:28,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:28,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:28,885 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:28,892 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:28,892 INFO  L82        PathProgramCache]: Analyzing trace with hash 353200978, now seen corresponding path program 1 times
[2020-05-31 02:39:28,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:28,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:29,123 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:39:29,123 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:29,123 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:39:29,124 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:29,124 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:39:29,124 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:39:29,124 INFO  L87              Difference]: Start difference. First operand 31070 states and 37593 transitions. cyclomatic complexity: 6555 Second operand 4 states.
[2020-05-31 02:39:29,426 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:39:29,426 INFO  L93              Difference]: Finished difference Result 31102 states and 37633 transitions.
[2020-05-31 02:39:29,426 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:39:29,426 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31102 states and 37633 transitions.
[2020-05-31 02:39:29,490 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:29,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31102 states to 31102 states and 37633 transitions.
[2020-05-31 02:39:29,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 393
[2020-05-31 02:39:29,589 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 393
[2020-05-31 02:39:29,589 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31102 states and 37633 transitions.
[2020-05-31 02:39:29,617 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:39:29,617 INFO  L728         BuchiCegarLoop]: Abstraction has 31102 states and 37633 transitions.
[2020-05-31 02:39:29,648 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31102 states and 37633 transitions.
[2020-05-31 02:39:29,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31102 to 31086.
[2020-05-31 02:39:29,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31086 states.
[2020-05-31 02:39:29,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31086 states to 31086 states and 37617 transitions.
[2020-05-31 02:39:29,896 INFO  L751         BuchiCegarLoop]: Abstraction has 31086 states and 37617 transitions.
[2020-05-31 02:39:29,896 INFO  L631         BuchiCegarLoop]: Abstraction has 31086 states and 37617 transitions.
[2020-05-31 02:39:29,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 02:39:29,896 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31086 states and 37617 transitions.
[2020-05-31 02:39:29,931 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:39:29,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:39:29,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:39:29,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:39:29,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:39:29,940 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:39:29,941 INFO  L82        PathProgramCache]: Analyzing trace with hash -148026531, now seen corresponding path program 1 times
[2020-05-31 02:39:29,941 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:39:29,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:39:30,220 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:39:30,220 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:39:30,220 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:39:30,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:39:30,221 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:39:30,221 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:39:30,221 INFO  L87              Difference]: Start difference. First operand 31086 states and 37617 transitions. cyclomatic complexity: 6563 Second operand 8 states.
[2020-05-31 02:44:30,901 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:44:30,902 INFO  L93              Difference]: Finished difference Result 92974 states and 113637 transitions.
[2020-05-31 02:44:30,902 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:44:30,902 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 92974 states and 113637 transitions.
[2020-05-31 02:44:31,141 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-05-31 02:44:31,502 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 92974 states to 92966 states and 113629 transitions.
[2020-05-31 02:44:31,502 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1208
[2020-05-31 02:44:31,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1208
[2020-05-31 02:44:31,504 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 92966 states and 113629 transitions.
[2020-05-31 02:44:31,595 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:44:31,596 INFO  L728         BuchiCegarLoop]: Abstraction has 92966 states and 113629 transitions.
[2020-05-31 02:44:31,667 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 92966 states and 113629 transitions.
[2020-05-31 02:44:32,486 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 92966 to 92910.
[2020-05-31 02:44:32,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 92910 states.
[2020-05-31 02:44:32,634 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 92910 states to 92910 states and 113549 transitions.
[2020-05-31 02:44:32,634 INFO  L751         BuchiCegarLoop]: Abstraction has 92910 states and 113549 transitions.
[2020-05-31 02:44:32,634 INFO  L631         BuchiCegarLoop]: Abstraction has 92910 states and 113549 transitions.
[2020-05-31 02:44:32,634 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 02:44:32,634 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 92910 states and 113549 transitions.
[2020-05-31 02:44:32,732 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-05-31 02:44:32,732 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:44:32,733 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:44:32,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:44:32,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:44:32,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:44:32,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -1992795776, now seen corresponding path program 1 times
[2020-05-31 02:44:32,773 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:44:32,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:44:32,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:44:32,990 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:44:32,990 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:44:32,991 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:44:32,991 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:44:32,991 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:44:32,991 INFO  L87              Difference]: Start difference. First operand 92910 states and 113549 transitions. cyclomatic complexity: 20735 Second operand 4 states.
[2020-05-31 02:44:34,455 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:44:34,455 INFO  L93              Difference]: Finished difference Result 92958 states and 113621 transitions.
[2020-05-31 02:44:34,455 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:44:34,456 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 92958 states and 113621 transitions.
[2020-05-31 02:44:34,680 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-05-31 02:44:35,030 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 92958 states to 92958 states and 113621 transitions.
[2020-05-31 02:44:35,030 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1208
[2020-05-31 02:44:35,032 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1208
[2020-05-31 02:44:35,032 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 92958 states and 113621 transitions.
[2020-05-31 02:44:35,115 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:44:35,115 INFO  L728         BuchiCegarLoop]: Abstraction has 92958 states and 113621 transitions.
[2020-05-31 02:44:35,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 92958 states and 113621 transitions.
[2020-05-31 02:44:35,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 92958 to 92910.
[2020-05-31 02:44:35,789 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 92910 states.
[2020-05-31 02:44:35,939 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 92910 states to 92910 states and 113557 transitions.
[2020-05-31 02:44:35,939 INFO  L751         BuchiCegarLoop]: Abstraction has 92910 states and 113557 transitions.
[2020-05-31 02:44:35,939 INFO  L631         BuchiCegarLoop]: Abstraction has 92910 states and 113557 transitions.
[2020-05-31 02:44:35,939 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 02:44:35,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 92910 states and 113557 transitions.
[2020-05-31 02:44:36,045 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-05-31 02:44:36,045 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:44:36,045 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:44:36,048 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:44:36,048 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:44:36,055 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:44:36,055 INFO  L82        PathProgramCache]: Analyzing trace with hash 1887248521, now seen corresponding path program 1 times
[2020-05-31 02:44:36,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:44:36,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:44:37,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 774 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 774 trivial. 0 not checked.
[2020-05-31 02:44:37,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:44:37,242 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:44:37,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:44:37,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:44:37,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:44:37,243 INFO  L87              Difference]: Start difference. First operand 92910 states and 113557 transitions. cyclomatic complexity: 20743 Second operand 8 states.
[2020-05-31 02:49:47,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:49:47,746 INFO  L93              Difference]: Finished difference Result 218094 states and 268141 transitions.
[2020-05-31 02:49:47,746 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:49:47,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 218094 states and 268141 transitions.
[2020-05-31 02:49:48,575 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:49:49,396 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 218094 states to 218086 states and 268133 transitions.
[2020-05-31 02:49:49,396 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2914
[2020-05-31 02:49:49,398 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2914
[2020-05-31 02:49:49,399 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 218086 states and 268133 transitions.
[2020-05-31 02:49:49,592 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:49:49,593 INFO  L728         BuchiCegarLoop]: Abstraction has 218086 states and 268133 transitions.
[2020-05-31 02:49:49,715 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 218086 states and 268133 transitions.
[2020-05-31 02:49:51,169 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 218086 to 217302.
[2020-05-31 02:49:51,170 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 217302 states.
[2020-05-31 02:49:51,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 217302 states to 217302 states and 267221 transitions.
[2020-05-31 02:49:51,571 INFO  L751         BuchiCegarLoop]: Abstraction has 217302 states and 267221 transitions.
[2020-05-31 02:49:51,571 INFO  L631         BuchiCegarLoop]: Abstraction has 217302 states and 267221 transitions.
[2020-05-31 02:49:51,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 02:49:51,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 217302 states and 267221 transitions.
[2020-05-31 02:49:51,853 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:49:51,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:49:51,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:49:51,857 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:49:51,857 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:49:52,170 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:49:52,170 INFO  L82        PathProgramCache]: Analyzing trace with hash -811080857, now seen corresponding path program 1 times
[2020-05-31 02:49:52,171 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:49:52,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:49:52,391 INFO  L134       CoverageAnalysis]: Checked inductivity of 695 backedges. 16 proven. 12 refuted. 0 times theorem prover too weak. 667 trivial. 0 not checked.
[2020-05-31 02:49:52,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:49:52,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 02:49:52,391 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:49:52,392 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 02:49:52,392 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 02:49:52,392 INFO  L87              Difference]: Start difference. First operand 217302 states and 267221 transitions. cyclomatic complexity: 50143 Second operand 7 states.
[2020-05-31 02:49:53,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:49:53,603 INFO  L93              Difference]: Finished difference Result 217319 states and 267241 transitions.
[2020-05-31 02:49:53,603 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 02:49:53,603 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 217319 states and 267241 transitions.
[2020-05-31 02:49:54,178 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:49:55,126 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 217319 states to 217302 states and 267220 transitions.
[2020-05-31 02:49:55,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2864
[2020-05-31 02:49:55,129 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2864
[2020-05-31 02:49:55,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 217302 states and 267220 transitions.
[2020-05-31 02:49:55,327 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:49:55,327 INFO  L728         BuchiCegarLoop]: Abstraction has 217302 states and 267220 transitions.
[2020-05-31 02:49:55,450 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 217302 states and 267220 transitions.
[2020-05-31 02:49:56,950 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 217302 to 217302.
[2020-05-31 02:49:56,950 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 217302 states.
[2020-05-31 02:49:57,357 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 217302 states to 217302 states and 267220 transitions.
[2020-05-31 02:49:57,357 INFO  L751         BuchiCegarLoop]: Abstraction has 217302 states and 267220 transitions.
[2020-05-31 02:49:57,357 INFO  L631         BuchiCegarLoop]: Abstraction has 217302 states and 267220 transitions.
[2020-05-31 02:49:57,357 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 02:49:57,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 217302 states and 267220 transitions.
[2020-05-31 02:49:57,641 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:49:57,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:49:57,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:49:57,645 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:49:57,645 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:49:57,652 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:49:57,653 INFO  L82        PathProgramCache]: Analyzing trace with hash 1555396825, now seen corresponding path program 1 times
[2020-05-31 02:49:57,653 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:49:57,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:49:57,885 INFO  L134       CoverageAnalysis]: Checked inductivity of 698 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 667 trivial. 0 not checked.
[2020-05-31 02:49:57,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:49:57,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:49:57,886 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:49:57,886 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:49:57,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:49:57,886 INFO  L87              Difference]: Start difference. First operand 217302 states and 267220 transitions. cyclomatic complexity: 50142 Second operand 8 states.
[2020-05-31 02:50:00,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:50:00,248 INFO  L93              Difference]: Finished difference Result 217316 states and 267235 transitions.
[2020-05-31 02:50:00,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 02:50:00,249 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 217316 states and 267235 transitions.
[2020-05-31 02:50:00,833 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:50:01,781 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 217316 states to 217272 states and 267183 transitions.
[2020-05-31 02:50:01,781 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2864
[2020-05-31 02:50:01,784 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2864
[2020-05-31 02:50:01,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 217272 states and 267183 transitions.
[2020-05-31 02:50:01,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:50:01,987 INFO  L728         BuchiCegarLoop]: Abstraction has 217272 states and 267183 transitions.
[2020-05-31 02:50:02,119 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 217272 states and 267183 transitions.
[2020-05-31 02:50:03,616 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 217272 to 217272.
[2020-05-31 02:50:03,616 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 217272 states.
[2020-05-31 02:50:04,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 217272 states to 217272 states and 267183 transitions.
[2020-05-31 02:50:04,021 INFO  L751         BuchiCegarLoop]: Abstraction has 217272 states and 267183 transitions.
[2020-05-31 02:50:04,021 INFO  L631         BuchiCegarLoop]: Abstraction has 217272 states and 267183 transitions.
[2020-05-31 02:50:04,021 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 02:50:04,021 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 217272 states and 267183 transitions.
[2020-05-31 02:50:04,309 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-05-31 02:50:04,309 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:50:04,309 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:50:04,313 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:50:04,313 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND FALSE  !(DType[this] == Escrow)
[L9177]   COND TRUE   DType[this] == Secondary
[L9178]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9178]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND TRUE   DType[this] == Escrow
[L9173]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9173]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:50:04,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:50:04,320 INFO  L82        PathProgramCache]: Analyzing trace with hash -637822258, now seen corresponding path program 1 times
[2020-05-31 02:50:04,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:50:04,345 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:50:04,760 INFO  L134       CoverageAnalysis]: Checked inductivity of 710 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 710 trivial. 0 not checked.
[2020-05-31 02:50:04,760 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:50:04,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:50:04,761 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:50:04,761 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:50:04,761 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:50:04,761 INFO  L87              Difference]: Start difference. First operand 217272 states and 267183 transitions. cyclomatic complexity: 50135 Second operand 4 states.
[2020-05-31 02:50:06,276 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:50:06,276 INFO  L93              Difference]: Finished difference Result 236021 states and 287772 transitions.
[2020-05-31 02:50:06,276 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:50:06,276 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 236021 states and 287772 transitions.
[2020-05-31 02:50:06,931 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 28
[2020-05-31 02:50:08,003 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 236021 states to 233615 states and 281460 transitions.
[2020-05-31 02:50:08,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2934
[2020-05-31 02:50:08,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3851
[2020-05-31 02:50:08,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 233615 states and 281460 transitions.
[2020-05-31 02:50:08,222 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:50:08,222 INFO  L728         BuchiCegarLoop]: Abstraction has 233615 states and 281460 transitions.
[2020-05-31 02:50:08,367 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 233615 states and 281460 transitions.
[2020-05-31 02:50:10,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 233615 to 227380.
[2020-05-31 02:50:10,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 227380 states.
[2020-05-31 02:50:10,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 227380 states to 227380 states and 274458 transitions.
[2020-05-31 02:50:10,923 INFO  L751         BuchiCegarLoop]: Abstraction has 227380 states and 274458 transitions.
[2020-05-31 02:50:10,923 INFO  L631         BuchiCegarLoop]: Abstraction has 227380 states and 274458 transitions.
[2020-05-31 02:50:10,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-31 02:50:10,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 227380 states and 274458 transitions.
[2020-05-31 02:50:11,212 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-05-31 02:50:11,212 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:50:11,212 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:50:11,215 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:50:11,215 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND FALSE  !(DType[this] == Escrow)
[L9177]   COND TRUE   DType[this] == Secondary
[L9178]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9178]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:50:11,223 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:50:11,223 INFO  L82        PathProgramCache]: Analyzing trace with hash 1578913790, now seen corresponding path program 1 times
[2020-05-31 02:50:11,223 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:50:11,249 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:50:11,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:50:11,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:50:11,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:50:11,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:50:11,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:50:11,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:50:11,471 INFO  L87              Difference]: Start difference. First operand 227380 states and 274458 transitions. cyclomatic complexity: 47246 Second operand 8 states.
[2020-05-31 02:50:49,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:50:49,099 INFO  L93              Difference]: Finished difference Result 237348 states and 289766 transitions.
[2020-05-31 02:50:49,100 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 02:50:49,100 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 237348 states and 289766 transitions.
[2020-05-31 02:50:49,743 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-05-31 02:50:50,806 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 237348 states to 237348 states and 289766 transitions.
[2020-05-31 02:50:50,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4292
[2020-05-31 02:50:50,810 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4292
[2020-05-31 02:50:50,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 237348 states and 289766 transitions.
[2020-05-31 02:50:51,052 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:50:51,052 INFO  L728         BuchiCegarLoop]: Abstraction has 237348 states and 289766 transitions.
[2020-05-31 02:50:51,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 237348 states and 289766 transitions.
[2020-05-31 02:50:54,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 237348 to 236952.
[2020-05-31 02:50:54,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 236952 states.
[2020-05-31 02:50:55,376 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 236952 states to 236952 states and 289179 transitions.
[2020-05-31 02:50:55,376 INFO  L751         BuchiCegarLoop]: Abstraction has 236952 states and 289179 transitions.
[2020-05-31 02:50:55,376 INFO  L631         BuchiCegarLoop]: Abstraction has 236952 states and 289179 transitions.
[2020-05-31 02:50:55,377 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-31 02:50:55,377 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 236952 states and 289179 transitions.
[2020-05-31 02:50:55,696 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-05-31 02:50:55,697 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:50:55,697 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:50:55,700 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:50:55,700 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND FALSE  !(gas < 21000)
[L8410]   COND FALSE  !(DType[from] == RefundableCrowdsale)
[L8538]   COND TRUE   DType[from] == FinalizableCrowdsale
[L8539]   COND FALSE  !(choice == 11)
[L8548]   COND FALSE  !(choice == 10)
[L8557]   COND FALSE  !(choice == 9)
[L8566]   COND FALSE  !(choice == 8)
[L8575]   COND FALSE  !(choice == 7)
[L8584]   COND FALSE  !(choice == 6)
[L8593]   COND FALSE  !(choice == 5)
[L8602]   COND FALSE  !(choice == 4)
[L8611]   COND FALSE  !(choice == 3)
[L8620]   COND FALSE  !(choice == 2)
[L8629]   COND TRUE   choice == 1
[L8630]               gas := gas - 21000;
[L8631]   COND TRUE   gas >= 0
[L8632]               assume msgvalue_MSG == 0;
[L8633]   CALL        call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L8633]   RET         call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L8634]   COND FALSE  !(revert)
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:50:55,708 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:50:55,709 INFO  L82        PathProgramCache]: Analyzing trace with hash 98346352, now seen corresponding path program 1 times
[2020-05-31 02:50:55,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:50:55,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:50:56,195 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 749 trivial. 0 not checked.
[2020-05-31 02:50:56,196 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:50:56,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 02:50:56,197 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:50:56,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:50:56,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:50:56,197 INFO  L87              Difference]: Start difference. First operand 236952 states and 289179 transitions. cyclomatic complexity: 52395 Second operand 6 states.
[2020-05-31 02:51:15,698 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:51:15,698 INFO  L93              Difference]: Finished difference Result 144427 states and 168160 transitions.
[2020-05-31 02:51:15,698 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:51:15,699 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 144427 states and 168160 transitions.
[2020-05-31 02:51:16,076 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-31 02:51:16,809 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 144427 states to 134891 states and 156392 transitions.
[2020-05-31 02:51:16,809 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1990
[2020-05-31 02:51:16,812 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3694
[2020-05-31 02:51:16,812 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 134891 states and 156392 transitions.
[2020-05-31 02:51:16,916 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:51:16,916 INFO  L728         BuchiCegarLoop]: Abstraction has 134891 states and 156392 transitions.
[2020-05-31 02:51:16,981 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 134891 states and 156392 transitions.
[2020-05-31 02:51:17,839 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 134891 to 119191.
[2020-05-31 02:51:17,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 119191 states.
[2020-05-31 02:51:18,044 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 119191 states to 119191 states and 137608 transitions.
[2020-05-31 02:51:18,045 INFO  L751         BuchiCegarLoop]: Abstraction has 119191 states and 137608 transitions.
[2020-05-31 02:51:18,045 INFO  L631         BuchiCegarLoop]: Abstraction has 119191 states and 137608 transitions.
[2020-05-31 02:51:18,045 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-31 02:51:18,045 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 119191 states and 137608 transitions.
[2020-05-31 02:51:18,199 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:51:18,199 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:51:18,199 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:51:18,202 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:51:18,202 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:51:18,225 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:51:18,225 INFO  L82        PathProgramCache]: Analyzing trace with hash 1663208089, now seen corresponding path program 1 times
[2020-05-31 02:51:18,225 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:51:18,248 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:51:18,671 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:51:18,672 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:51:18,672 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:51:18,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:51:18,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:51:18,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:51:18,672 INFO  L87              Difference]: Start difference. First operand 119191 states and 137608 transitions. cyclomatic complexity: 18513 Second operand 4 states.
[2020-05-31 02:51:18,991 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:51:18,992 INFO  L93              Difference]: Finished difference Result 59525 states and 68246 transitions.
[2020-05-31 02:51:18,992 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:51:18,992 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 59525 states and 68246 transitions.
[2020-05-31 02:51:19,127 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:51:19,320 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 59525 states to 59349 states and 68054 transitions.
[2020-05-31 02:51:19,321 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1313
[2020-05-31 02:51:19,321 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1313
[2020-05-31 02:51:19,322 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 59349 states and 68054 transitions.
[2020-05-31 02:51:19,368 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:51:19,368 INFO  L728         BuchiCegarLoop]: Abstraction has 59349 states and 68054 transitions.
[2020-05-31 02:51:19,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 59349 states and 68054 transitions.
[2020-05-31 02:51:19,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 59349 to 58573.
[2020-05-31 02:51:19,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 58573 states.
[2020-05-31 02:51:19,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 58573 states to 58573 states and 67198 transitions.
[2020-05-31 02:51:19,880 INFO  L751         BuchiCegarLoop]: Abstraction has 58573 states and 67198 transitions.
[2020-05-31 02:51:19,880 INFO  L631         BuchiCegarLoop]: Abstraction has 58573 states and 67198 transitions.
[2020-05-31 02:51:19,880 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-31 02:51:19,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 58573 states and 67198 transitions.
[2020-05-31 02:51:19,951 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:51:19,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:51:19,952 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:51:19,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:51:19,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND FALSE  !(DType[this] == Escrow)
[L9177]   COND TRUE   DType[this] == Secondary
[L9178]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9178]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:51:19,960 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:51:19,961 INFO  L82        PathProgramCache]: Analyzing trace with hash -439529347, now seen corresponding path program 1 times
[2020-05-31 02:51:19,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:51:19,986 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:51:20,368 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:51:20,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:51:20,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:51:20,369 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:51:20,369 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:51:20,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:51:20,369 INFO  L87              Difference]: Start difference. First operand 58573 states and 67198 transitions. cyclomatic complexity: 8673 Second operand 5 states.
[2020-05-31 02:51:20,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:51:20,776 INFO  L93              Difference]: Finished difference Result 59261 states and 67902 transitions.
[2020-05-31 02:51:20,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:51:20,776 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 59261 states and 67902 transitions.
[2020-05-31 02:51:20,909 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:51:21,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 59261 states to 59261 states and 67902 transitions.
[2020-05-31 02:51:21,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1305
[2020-05-31 02:51:21,104 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1305
[2020-05-31 02:51:21,104 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 59261 states and 67902 transitions.
[2020-05-31 02:51:21,151 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:51:21,151 INFO  L728         BuchiCegarLoop]: Abstraction has 59261 states and 67902 transitions.
[2020-05-31 02:51:21,191 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 59261 states and 67902 transitions.
[2020-05-31 02:51:21,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 59261 to 59261.
[2020-05-31 02:51:21,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 59261 states.
[2020-05-31 02:51:21,687 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 59261 states to 59261 states and 67902 transitions.
[2020-05-31 02:51:21,687 INFO  L751         BuchiCegarLoop]: Abstraction has 59261 states and 67902 transitions.
[2020-05-31 02:51:21,687 INFO  L631         BuchiCegarLoop]: Abstraction has 59261 states and 67902 transitions.
[2020-05-31 02:51:21,687 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-31 02:51:21,687 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 59261 states and 67902 transitions.
[2020-05-31 02:51:21,758 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:51:21,759 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:51:21,759 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:51:21,761 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:51:21,761 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:51:21,767 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:51:21,767 INFO  L82        PathProgramCache]: Analyzing trace with hash -304933650, now seen corresponding path program 1 times
[2020-05-31 02:51:21,768 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:51:21,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:51:22,226 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:51:22,226 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:51:22,226 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:51:22,226 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:51:22,226 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:51:22,227 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:51:22,227 INFO  L87              Difference]: Start difference. First operand 59261 states and 67902 transitions. cyclomatic complexity: 8689 Second operand 8 states.
[2020-05-31 02:51:51,354 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:51:51,354 INFO  L93              Difference]: Finished difference Result 118104 states and 135832 transitions.
[2020-05-31 02:51:51,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-31 02:51:51,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 118104 states and 135832 transitions.
[2020-05-31 02:51:51,800 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:51:52,153 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 118104 states to 117104 states and 134720 transitions.
[2020-05-31 02:51:52,153 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2558
[2020-05-31 02:51:52,155 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2558
[2020-05-31 02:51:52,155 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 117104 states and 134720 transitions.
[2020-05-31 02:51:52,248 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:51:52,248 INFO  L728         BuchiCegarLoop]: Abstraction has 117104 states and 134720 transitions.
[2020-05-31 02:51:52,317 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 117104 states and 134720 transitions.
[2020-05-31 02:51:53,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 117104 to 117104.
[2020-05-31 02:51:53,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 117104 states.
[2020-05-31 02:51:53,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 117104 states to 117104 states and 134720 transitions.
[2020-05-31 02:51:53,278 INFO  L751         BuchiCegarLoop]: Abstraction has 117104 states and 134720 transitions.
[2020-05-31 02:51:53,278 INFO  L631         BuchiCegarLoop]: Abstraction has 117104 states and 134720 transitions.
[2020-05-31 02:51:53,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-31 02:51:53,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 117104 states and 134720 transitions.
[2020-05-31 02:51:53,428 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:51:53,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:51:53,428 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:51:53,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:51:53,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:51:53,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:51:53,466 INFO  L82        PathProgramCache]: Analyzing trace with hash 1066716478, now seen corresponding path program 1 times
[2020-05-31 02:51:53,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:51:53,486 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:51:53,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 752 trivial. 0 not checked.
[2020-05-31 02:51:53,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:51:53,821 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-05-31 02:51:53,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:51:53,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:51:53,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:51:53,822 INFO  L87              Difference]: Start difference. First operand 117104 states and 134720 transitions. cyclomatic complexity: 17712 Second operand 14 states.
[2020-05-31 02:52:34,401 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:52:34,401 INFO  L93              Difference]: Finished difference Result 118928 states and 137236 transitions.
[2020-05-31 02:52:34,401 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-31 02:52:34,401 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 118928 states and 137236 transitions.
[2020-05-31 02:52:34,679 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:35,093 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 118928 states to 116472 states and 134200 transitions.
[2020-05-31 02:52:35,093 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2565
[2020-05-31 02:52:35,095 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2565
[2020-05-31 02:52:35,095 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 116472 states and 134200 transitions.
[2020-05-31 02:52:35,188 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:52:35,189 INFO  L728         BuchiCegarLoop]: Abstraction has 116472 states and 134200 transitions.
[2020-05-31 02:52:35,257 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 116472 states and 134200 transitions.
[2020-05-31 02:52:35,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 116472 to 115824.
[2020-05-31 02:52:35,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 115824 states.
[2020-05-31 02:52:36,146 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 115824 states to 115824 states and 133144 transitions.
[2020-05-31 02:52:36,147 INFO  L751         BuchiCegarLoop]: Abstraction has 115824 states and 133144 transitions.
[2020-05-31 02:52:36,147 INFO  L631         BuchiCegarLoop]: Abstraction has 115824 states and 133144 transitions.
[2020-05-31 02:52:36,147 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-31 02:52:36,147 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 115824 states and 133144 transitions.
[2020-05-31 02:52:36,293 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:36,293 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:52:36,293 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:52:36,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:52:36,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:52:36,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:52:36,302 INFO  L82        PathProgramCache]: Analyzing trace with hash -1066526792, now seen corresponding path program 1 times
[2020-05-31 02:52:36,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:52:36,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:52:36,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 02:52:36,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:52:36,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-31 02:52:36,692 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:52:36,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:52:36,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:52:36,692 INFO  L87              Difference]: Start difference. First operand 115824 states and 133144 transitions. cyclomatic complexity: 17416 Second operand 10 states.
[2020-05-31 02:52:55,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:52:55,859 INFO  L93              Difference]: Finished difference Result 117738 states and 135746 transitions.
[2020-05-31 02:52:55,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:52:55,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 117738 states and 135746 transitions.
[2020-05-31 02:52:56,145 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:56,427 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 117738 states to 85246 states and 97810 transitions.
[2020-05-31 02:52:56,427 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2462
[2020-05-31 02:52:56,429 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2474
[2020-05-31 02:52:56,429 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 85246 states and 97810 transitions.
[2020-05-31 02:52:56,494 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:52:56,494 INFO  L728         BuchiCegarLoop]: Abstraction has 85246 states and 97810 transitions.
[2020-05-31 02:52:56,544 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 85246 states and 97810 transitions.
[2020-05-31 02:52:57,158 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 85246 to 85204.
[2020-05-31 02:52:57,158 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 85204 states.
[2020-05-31 02:52:57,279 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 85204 states to 85204 states and 97756 transitions.
[2020-05-31 02:52:57,279 INFO  L751         BuchiCegarLoop]: Abstraction has 85204 states and 97756 transitions.
[2020-05-31 02:52:57,279 INFO  L631         BuchiCegarLoop]: Abstraction has 85204 states and 97756 transitions.
[2020-05-31 02:52:57,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-31 02:52:57,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 85204 states and 97756 transitions.
[2020-05-31 02:52:57,377 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:57,377 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:52:57,377 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:52:57,380 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:52:57,380 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:52:57,396 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:52:57,397 INFO  L82        PathProgramCache]: Analyzing trace with hash 2068033443, now seen corresponding path program 1 times
[2020-05-31 02:52:57,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:52:57,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:52:57,658 INFO  L134       CoverageAnalysis]: Checked inductivity of 712 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 712 trivial. 0 not checked.
[2020-05-31 02:52:57,658 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:52:57,658 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:52:57,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:52:57,658 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:52:57,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:52:57,659 INFO  L87              Difference]: Start difference. First operand 85204 states and 97756 transitions. cyclomatic complexity: 12624 Second operand 4 states.
[2020-05-31 02:52:58,066 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:52:58,066 INFO  L93              Difference]: Finished difference Result 87325 states and 99589 transitions.
[2020-05-31 02:52:58,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:52:58,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 87325 states and 99589 transitions.
[2020-05-31 02:52:58,259 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:58,538 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 87325 states to 87325 states and 99589 transitions.
[2020-05-31 02:52:58,538 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2570
[2020-05-31 02:52:58,540 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2734
[2020-05-31 02:52:58,540 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 87325 states and 99589 transitions.
[2020-05-31 02:52:58,606 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:52:58,607 INFO  L728         BuchiCegarLoop]: Abstraction has 87325 states and 99589 transitions.
[2020-05-31 02:52:58,658 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 87325 states and 99589 transitions.
[2020-05-31 02:52:59,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 87325 to 86236.
[2020-05-31 02:52:59,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 86236 states.
[2020-05-31 02:52:59,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 86236 states to 86236 states and 98356 transitions.
[2020-05-31 02:52:59,406 INFO  L751         BuchiCegarLoop]: Abstraction has 86236 states and 98356 transitions.
[2020-05-31 02:52:59,406 INFO  L631         BuchiCegarLoop]: Abstraction has 86236 states and 98356 transitions.
[2020-05-31 02:52:59,406 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-31 02:52:59,406 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 86236 states and 98356 transitions.
[2020-05-31 02:52:59,506 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:52:59,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:52:59,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:52:59,508 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:52:59,508 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND TRUE   gas >= 0
[L10385]              assume msgvalue_MSG == 0;
[L10386]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10386]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:52:59,514 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:52:59,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -1862940446, now seen corresponding path program 1 times
[2020-05-31 02:52:59,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:52:59,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:52:59,798 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 752 trivial. 0 not checked.
[2020-05-31 02:52:59,798 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:52:59,798 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:52:59,799 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:52:59,799 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:52:59,799 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:52:59,799 INFO  L87              Difference]: Start difference. First operand 86236 states and 98356 transitions. cyclomatic complexity: 12192 Second operand 11 states.
[2020-05-31 02:53:00,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:00,822 INFO  L93              Difference]: Finished difference Result 87892 states and 100436 transitions.
[2020-05-31 02:53:00,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:53:00,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 87892 states and 100436 transitions.
[2020-05-31 02:53:01,019 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:01,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 87892 states to 87892 states and 100436 transitions.
[2020-05-31 02:53:01,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2738
[2020-05-31 02:53:01,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2738
[2020-05-31 02:53:01,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 87892 states and 100436 transitions.
[2020-05-31 02:53:01,387 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:01,388 INFO  L728         BuchiCegarLoop]: Abstraction has 87892 states and 100436 transitions.
[2020-05-31 02:53:01,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 87892 states and 100436 transitions.
[2020-05-31 02:53:02,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 87892 to 86507.
[2020-05-31 02:53:02,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 86507 states.
[2020-05-31 02:53:02,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 86507 states to 86507 states and 98684 transitions.
[2020-05-31 02:53:02,181 INFO  L751         BuchiCegarLoop]: Abstraction has 86507 states and 98684 transitions.
[2020-05-31 02:53:02,181 INFO  L631         BuchiCegarLoop]: Abstraction has 86507 states and 98684 transitions.
[2020-05-31 02:53:02,181 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-31 02:53:02,181 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 86507 states and 98684 transitions.
[2020-05-31 02:53:02,282 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:02,282 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:02,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:02,285 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:02,286 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:02,294 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:02,295 INFO  L82        PathProgramCache]: Analyzing trace with hash -909358614, now seen corresponding path program 1 times
[2020-05-31 02:53:02,295 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:02,323 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:02,643 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 734 trivial. 0 not checked.
[2020-05-31 02:53:02,644 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:02,644 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 02:53:02,644 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:02,644 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-31 02:53:02,644 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-05-31 02:53:02,645 INFO  L87              Difference]: Start difference. First operand 86507 states and 98684 transitions. cyclomatic complexity: 12249 Second operand 16 states.
[2020-05-31 02:53:24,389 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:24,390 INFO  L93              Difference]: Finished difference Result 88150 states and 100748 transitions.
[2020-05-31 02:53:24,390 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 02:53:24,390 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 88150 states and 100748 transitions.
[2020-05-31 02:53:24,586 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:24,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 88150 states to 56800 states and 65084 transitions.
[2020-05-31 02:53:24,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2553
[2020-05-31 02:53:24,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2553
[2020-05-31 02:53:24,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 56800 states and 65084 transitions.
[2020-05-31 02:53:24,823 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:24,823 INFO  L728         BuchiCegarLoop]: Abstraction has 56800 states and 65084 transitions.
[2020-05-31 02:53:24,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 56800 states and 65084 transitions.
[2020-05-31 02:53:25,289 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 56800 to 55666.
[2020-05-31 02:53:25,290 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 55666 states.
[2020-05-31 02:53:25,372 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 55666 states to 55666 states and 63702 transitions.
[2020-05-31 02:53:25,372 INFO  L751         BuchiCegarLoop]: Abstraction has 55666 states and 63702 transitions.
[2020-05-31 02:53:25,372 INFO  L631         BuchiCegarLoop]: Abstraction has 55666 states and 63702 transitions.
[2020-05-31 02:53:25,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-31 02:53:25,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 55666 states and 63702 transitions.
[2020-05-31 02:53:25,439 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:25,439 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:25,440 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:25,442 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:25,443 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND TRUE   gas >= 0
[L10385]              assume msgvalue_MSG == 0;
[L10386]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10386]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND TRUE   choice == 14
[L10383]              gas := gas - 21000;
[L10384]  COND TRUE   gas >= 0
[L10385]              assume msgvalue_MSG == 0;
[L10386]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10386]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:25,458 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:25,458 INFO  L82        PathProgramCache]: Analyzing trace with hash -179313175, now seen corresponding path program 1 times
[2020-05-31 02:53:25,458 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:25,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:25,772 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 780 trivial. 0 not checked.
[2020-05-31 02:53:25,772 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:25,772 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:53:25,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:25,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:53:25,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=64, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:53:25,774 INFO  L87              Difference]: Start difference. First operand 55666 states and 63702 transitions. cyclomatic complexity: 8088 Second operand 10 states.
[2020-05-31 02:53:28,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:28,441 INFO  L93              Difference]: Finished difference Result 58715 states and 67086 transitions.
[2020-05-31 02:53:28,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-31 02:53:28,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 58715 states and 67086 transitions.
[2020-05-31 02:53:28,588 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-31 02:53:28,784 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 58715 states to 53051 states and 61326 transitions.
[2020-05-31 02:53:28,784 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1495
[2020-05-31 02:53:28,785 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1695
[2020-05-31 02:53:28,785 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53051 states and 61326 transitions.
[2020-05-31 02:53:28,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:28,829 INFO  L728         BuchiCegarLoop]: Abstraction has 53051 states and 61326 transitions.
[2020-05-31 02:53:28,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53051 states and 61326 transitions.
[2020-05-31 02:53:29,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53051 to 50199.
[2020-05-31 02:53:29,161 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 50199 states.
[2020-05-31 02:53:29,367 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 50199 states to 50199 states and 57949 transitions.
[2020-05-31 02:53:29,367 INFO  L751         BuchiCegarLoop]: Abstraction has 50199 states and 57949 transitions.
[2020-05-31 02:53:29,367 INFO  L631         BuchiCegarLoop]: Abstraction has 50199 states and 57949 transitions.
[2020-05-31 02:53:29,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-31 02:53:29,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 50199 states and 57949 transitions.
[2020-05-31 02:53:29,425 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:29,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:29,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:29,428 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:29,428 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:29,439 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:29,439 INFO  L82        PathProgramCache]: Analyzing trace with hash 313880275, now seen corresponding path program 1 times
[2020-05-31 02:53:29,440 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:29,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:29,835 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 18 proven. 0 refuted. 0 times theorem prover too weak. 771 trivial. 0 not checked.
[2020-05-31 02:53:29,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:29,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-05-31 02:53:29,836 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:29,836 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 02:53:29,836 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-05-31 02:53:29,836 INFO  L87              Difference]: Start difference. First operand 50199 states and 57949 transitions. cyclomatic complexity: 7802 Second operand 18 states.
[2020-05-31 02:53:41,004 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:41,005 INFO  L93              Difference]: Finished difference Result 53802 states and 62475 transitions.
[2020-05-31 02:53:41,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 02:53:41,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 53802 states and 62475 transitions.
[2020-05-31 02:53:41,134 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:53:41,322 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 53802 states to 53802 states and 62471 transitions.
[2020-05-31 02:53:41,322 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2026
[2020-05-31 02:53:41,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2026
[2020-05-31 02:53:41,323 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53802 states and 62471 transitions.
[2020-05-31 02:53:41,362 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:41,362 INFO  L728         BuchiCegarLoop]: Abstraction has 53802 states and 62471 transitions.
[2020-05-31 02:53:41,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53802 states and 62471 transitions.
[2020-05-31 02:53:41,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53802 to 52383.
[2020-05-31 02:53:41,733 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 52383 states.
[2020-05-31 02:53:41,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 52383 states to 52383 states and 60730 transitions.
[2020-05-31 02:53:41,806 INFO  L751         BuchiCegarLoop]: Abstraction has 52383 states and 60730 transitions.
[2020-05-31 02:53:41,806 INFO  L631         BuchiCegarLoop]: Abstraction has 52383 states and 60730 transitions.
[2020-05-31 02:53:41,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-31 02:53:41,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 52383 states and 60730 transitions.
[2020-05-31 02:53:41,863 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:41,863 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:41,863 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:41,865 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:41,865 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND FALSE  !(Balance[from] >= amount)
[L9119]               success := false;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:41,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:41,870 INFO  L82        PathProgramCache]: Analyzing trace with hash 1123755626, now seen corresponding path program 1 times
[2020-05-31 02:53:41,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:41,897 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:42,247 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 02:53:42,247 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:42,247 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:53:42,248 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:42,248 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:53:42,248 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:53:42,248 INFO  L87              Difference]: Start difference. First operand 52383 states and 60730 transitions. cyclomatic complexity: 8399 Second operand 4 states.
[2020-05-31 02:53:42,406 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:42,406 INFO  L93              Difference]: Finished difference Result 52391 states and 60734 transitions.
[2020-05-31 02:53:42,406 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:53:42,407 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 52391 states and 60734 transitions.
[2020-05-31 02:53:42,535 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:42,712 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 52391 states to 52383 states and 60726 transitions.
[2020-05-31 02:53:42,712 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1815
[2020-05-31 02:53:42,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-05-31 02:53:42,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 52383 states and 60726 transitions.
[2020-05-31 02:53:42,754 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:42,754 INFO  L728         BuchiCegarLoop]: Abstraction has 52383 states and 60726 transitions.
[2020-05-31 02:53:42,782 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 52383 states and 60726 transitions.
[2020-05-31 02:53:43,134 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 52383 to 52383.
[2020-05-31 02:53:43,134 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 52383 states.
[2020-05-31 02:53:43,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 52383 states to 52383 states and 60726 transitions.
[2020-05-31 02:53:43,219 INFO  L751         BuchiCegarLoop]: Abstraction has 52383 states and 60726 transitions.
[2020-05-31 02:53:43,219 INFO  L631         BuchiCegarLoop]: Abstraction has 52383 states and 60726 transitions.
[2020-05-31 02:53:43,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-31 02:53:43,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 52383 states and 60726 transitions.
[2020-05-31 02:53:43,285 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:43,285 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:43,285 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:43,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:43,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6068]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6068]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6069]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:43,295 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:43,296 INFO  L82        PathProgramCache]: Analyzing trace with hash 575304551, now seen corresponding path program 1 times
[2020-05-31 02:53:43,296 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:43,334 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:43,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 811 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 02:53:43,780 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:43,780 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:53:43,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:43,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:53:43,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:53:43,781 INFO  L87              Difference]: Start difference. First operand 52383 states and 60726 transitions. cyclomatic complexity: 8395 Second operand 3 states.
[2020-05-31 02:53:43,962 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:43,962 INFO  L93              Difference]: Finished difference Result 52431 states and 60790 transitions.
[2020-05-31 02:53:43,963 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:53:43,963 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 52431 states and 60790 transitions.
[2020-05-31 02:53:44,097 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:44,282 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 52431 states to 52431 states and 60790 transitions.
[2020-05-31 02:53:44,282 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1823
[2020-05-31 02:53:44,283 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1823
[2020-05-31 02:53:44,283 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 52431 states and 60790 transitions.
[2020-05-31 02:53:44,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:44,324 INFO  L728         BuchiCegarLoop]: Abstraction has 52431 states and 60790 transitions.
[2020-05-31 02:53:44,352 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 52431 states and 60790 transitions.
[2020-05-31 02:53:44,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 52431 to 52399.
[2020-05-31 02:53:44,699 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 52399 states.
[2020-05-31 02:53:44,782 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 52399 states to 52399 states and 60742 transitions.
[2020-05-31 02:53:44,782 INFO  L751         BuchiCegarLoop]: Abstraction has 52399 states and 60742 transitions.
[2020-05-31 02:53:44,782 INFO  L631         BuchiCegarLoop]: Abstraction has 52399 states and 60742 transitions.
[2020-05-31 02:53:44,782 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-31 02:53:44,782 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 52399 states and 60742 transitions.
[2020-05-31 02:53:44,846 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:44,846 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:44,846 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:44,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:44,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:44,854 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:44,855 INFO  L82        PathProgramCache]: Analyzing trace with hash -1163866664, now seen corresponding path program 1 times
[2020-05-31 02:53:44,855 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:44,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:45,194 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 02:53:45,194 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:45,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-05-31 02:53:45,195 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:45,195 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 02:53:45,195 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=205, Unknown=0, NotChecked=0, Total=306
[2020-05-31 02:53:45,195 INFO  L87              Difference]: Start difference. First operand 52399 states and 60742 transitions. cyclomatic complexity: 8395 Second operand 18 states.
[2020-05-31 02:53:49,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:49,605 INFO  L93              Difference]: Finished difference Result 61521 states and 71937 transitions.
[2020-05-31 02:53:49,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-05-31 02:53:49,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 61521 states and 71937 transitions.
[2020-05-31 02:53:49,755 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-05-31 02:53:49,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 61521 states to 60777 states and 71057 transitions.
[2020-05-31 02:53:49,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2075
[2020-05-31 02:53:49,970 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2075
[2020-05-31 02:53:49,970 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 60777 states and 71057 transitions.
[2020-05-31 02:53:50,020 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:50,020 INFO  L728         BuchiCegarLoop]: Abstraction has 60777 states and 71057 transitions.
[2020-05-31 02:53:50,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 60777 states and 71057 transitions.
[2020-05-31 02:53:50,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 60777 to 53089.
[2020-05-31 02:53:50,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53089 states.
[2020-05-31 02:53:50,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53089 states to 53089 states and 61697 transitions.
[2020-05-31 02:53:50,549 INFO  L751         BuchiCegarLoop]: Abstraction has 53089 states and 61697 transitions.
[2020-05-31 02:53:50,549 INFO  L631         BuchiCegarLoop]: Abstraction has 53089 states and 61697 transitions.
[2020-05-31 02:53:50,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-31 02:53:50,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53089 states and 61697 transitions.
[2020-05-31 02:53:50,615 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:50,615 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:50,615 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:50,618 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:50,618 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND TRUE   DType[this] == RefundableCrowdsale
[L6063]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6063]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6064]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:50,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:50,625 INFO  L82        PathProgramCache]: Analyzing trace with hash 549432710, now seen corresponding path program 1 times
[2020-05-31 02:53:50,626 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:50,664 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:51,056 INFO  L134       CoverageAnalysis]: Checked inductivity of 811 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 02:53:51,056 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:51,057 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:53:51,057 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:51,057 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:53:51,058 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:53:51,058 INFO  L87              Difference]: Start difference. First operand 53089 states and 61697 transitions. cyclomatic complexity: 8660 Second operand 10 states.
[2020-05-31 02:53:51,642 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:51,642 INFO  L93              Difference]: Finished difference Result 54241 states and 63161 transitions.
[2020-05-31 02:53:51,642 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:53:51,642 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 54241 states and 63161 transitions.
[2020-05-31 02:53:51,855 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:52,012 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 54241 states to 54241 states and 63161 transitions.
[2020-05-31 02:53:52,012 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1935
[2020-05-31 02:53:52,013 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1935
[2020-05-31 02:53:52,013 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 54241 states and 63161 transitions.
[2020-05-31 02:53:52,055 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:52,055 INFO  L728         BuchiCegarLoop]: Abstraction has 54241 states and 63161 transitions.
[2020-05-31 02:53:52,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 54241 states and 63161 transitions.
[2020-05-31 02:53:52,431 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 54241 to 53985.
[2020-05-31 02:53:52,431 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53985 states.
[2020-05-31 02:53:52,516 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53985 states to 53985 states and 62761 transitions.
[2020-05-31 02:53:52,516 INFO  L751         BuchiCegarLoop]: Abstraction has 53985 states and 62761 transitions.
[2020-05-31 02:53:52,516 INFO  L631         BuchiCegarLoop]: Abstraction has 53985 states and 62761 transitions.
[2020-05-31 02:53:52,516 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-31 02:53:52,516 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53985 states and 62761 transitions.
[2020-05-31 02:53:52,582 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:52,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:52,582 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:52,586 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:52,586 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND TRUE   DType[this] == RefundableCrowdsale
[L6063]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6063]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6064]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:52,596 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:52,596 INFO  L82        PathProgramCache]: Analyzing trace with hash 1200159502, now seen corresponding path program 1 times
[2020-05-31 02:53:52,597 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:52,634 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:53,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 3 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 02:53:53,029 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:53:53,029 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 02:53:53,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:53,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:53:53,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:53:53,030 INFO  L87              Difference]: Start difference. First operand 53985 states and 62761 transitions. cyclomatic complexity: 8828 Second operand 4 states.
[2020-05-31 02:53:53,244 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:53,244 INFO  L93              Difference]: Finished difference Result 54049 states and 62793 transitions.
[2020-05-31 02:53:53,244 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:53:53,245 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 54049 states and 62793 transitions.
[2020-05-31 02:53:53,375 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:53,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 54049 states to 53873 states and 62569 transitions.
[2020-05-31 02:53:53,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1871
[2020-05-31 02:53:53,557 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1871
[2020-05-31 02:53:53,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53873 states and 62569 transitions.
[2020-05-31 02:53:53,598 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:53,598 INFO  L728         BuchiCegarLoop]: Abstraction has 53873 states and 62569 transitions.
[2020-05-31 02:53:53,625 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53873 states and 62569 transitions.
[2020-05-31 02:53:54,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53873 to 53841.
[2020-05-31 02:53:54,050 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53841 states.
[2020-05-31 02:53:54,131 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53841 states to 53841 states and 62537 transitions.
[2020-05-31 02:53:54,131 INFO  L751         BuchiCegarLoop]: Abstraction has 53841 states and 62537 transitions.
[2020-05-31 02:53:54,131 INFO  L631         BuchiCegarLoop]: Abstraction has 53841 states and 62537 transitions.
[2020-05-31 02:53:54,131 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-31 02:53:54,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53841 states and 62537 transitions.
[2020-05-31 02:53:54,196 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:54,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:54,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:54,200 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:54,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6068]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6068]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6069]   COND FALSE  !(revert)
[L6085]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6090]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6095]   COND TRUE   DType[this] == TimedCrowdsale
[L6096]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6096]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6097]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:54,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:54,207 INFO  L82        PathProgramCache]: Analyzing trace with hash -1901205424, now seen corresponding path program 1 times
[2020-05-31 02:53:54,208 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:54,247 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:54,633 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 803 trivial. 0 not checked.
[2020-05-31 02:53:54,633 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:53:54,633 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:53:54,634 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:54,634 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:53:54,634 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:53:54,634 INFO  L87              Difference]: Start difference. First operand 53841 states and 62537 transitions. cyclomatic complexity: 8748 Second operand 3 states.
[2020-05-31 02:53:54,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:54,819 INFO  L93              Difference]: Finished difference Result 53905 states and 62617 transitions.
[2020-05-31 02:53:54,819 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:53:54,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 53905 states and 62617 transitions.
[2020-05-31 02:53:54,954 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:55,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 53905 states to 53905 states and 62617 transitions.
[2020-05-31 02:53:55,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1871
[2020-05-31 02:53:55,144 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1871
[2020-05-31 02:53:55,144 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53905 states and 62617 transitions.
[2020-05-31 02:53:55,189 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:55,189 INFO  L728         BuchiCegarLoop]: Abstraction has 53905 states and 62617 transitions.
[2020-05-31 02:53:55,219 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53905 states and 62617 transitions.
[2020-05-31 02:53:55,594 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53905 to 53873.
[2020-05-31 02:53:55,594 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53873 states.
[2020-05-31 02:53:55,681 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53873 states to 53873 states and 62569 transitions.
[2020-05-31 02:53:55,681 INFO  L751         BuchiCegarLoop]: Abstraction has 53873 states and 62569 transitions.
[2020-05-31 02:53:55,682 INFO  L631         BuchiCegarLoop]: Abstraction has 53873 states and 62569 transitions.
[2020-05-31 02:53:55,682 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-31 02:53:55,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53873 states and 62569 transitions.
[2020-05-31 02:53:55,749 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:55,749 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:55,749 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:55,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:55,753 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6068]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6068]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6069]   COND FALSE  !(revert)
[L6085]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6090]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6091]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6091]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6092]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:55,759 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:55,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 1929903979, now seen corresponding path program 1 times
[2020-05-31 02:53:55,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:55,802 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:56,249 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 2 refuted. 0 times theorem prover too weak. 801 trivial. 0 not checked.
[2020-05-31 02:53:56,249 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:53:56,249 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 02:53:56,250 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:56,250 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:53:56,250 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:53:56,250 INFO  L87              Difference]: Start difference. First operand 53873 states and 62569 transitions. cyclomatic complexity: 8748 Second operand 4 states.
[2020-05-31 02:53:56,456 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:53:56,456 INFO  L93              Difference]: Finished difference Result 53937 states and 62617 transitions.
[2020-05-31 02:53:56,456 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:53:56,456 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 53937 states and 62617 transitions.
[2020-05-31 02:53:56,585 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:56,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 53937 states to 53745 states and 62361 transitions.
[2020-05-31 02:53:56,767 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1863
[2020-05-31 02:53:56,768 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-05-31 02:53:56,768 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 53745 states and 62361 transitions.
[2020-05-31 02:53:56,812 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:53:56,812 INFO  L728         BuchiCegarLoop]: Abstraction has 53745 states and 62361 transitions.
[2020-05-31 02:53:56,842 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 53745 states and 62361 transitions.
[2020-05-31 02:53:57,202 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 53745 to 53713.
[2020-05-31 02:53:57,202 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 53713 states.
[2020-05-31 02:53:57,284 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 53713 states to 53713 states and 62329 transitions.
[2020-05-31 02:53:57,284 INFO  L751         BuchiCegarLoop]: Abstraction has 53713 states and 62329 transitions.
[2020-05-31 02:53:57,284 INFO  L631         BuchiCegarLoop]: Abstraction has 53713 states and 62329 transitions.
[2020-05-31 02:53:57,284 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-31 02:53:57,284 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 53713 states and 62329 transitions.
[2020-05-31 02:53:57,349 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:53:57,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:53:57,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:53:57,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:53:57,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:53:57,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:53:57,358 INFO  L82        PathProgramCache]: Analyzing trace with hash 571652580, now seen corresponding path program 1 times
[2020-05-31 02:53:57,358 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:53:57,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:53:58,152 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 3 proven. 30 refuted. 0 times theorem prover too weak. 756 trivial. 0 not checked.
[2020-05-31 02:53:58,152 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:53:58,152 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-05-31 02:53:58,153 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:53:58,153 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-05-31 02:53:58,153 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=94, Invalid=1546, Unknown=0, NotChecked=0, Total=1640
[2020-05-31 02:53:58,153 INFO  L87              Difference]: Start difference. First operand 53713 states and 62329 transitions. cyclomatic complexity: 8668 Second operand 41 states.
[2020-05-31 02:54:31,045 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:54:31,045 INFO  L93              Difference]: Finished difference Result 57074 states and 66565 transitions.
[2020-05-31 02:54:31,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 50 states. 
[2020-05-31 02:54:31,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 57074 states and 66565 transitions.
[2020-05-31 02:54:31,287 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:54:31,443 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 57074 states to 56957 states and 66389 transitions.
[2020-05-31 02:54:31,443 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2333
[2020-05-31 02:54:31,444 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2333
[2020-05-31 02:54:31,445 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 56957 states and 66389 transitions.
[2020-05-31 02:54:31,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:54:31,487 INFO  L728         BuchiCegarLoop]: Abstraction has 56957 states and 66389 transitions.
[2020-05-31 02:54:31,514 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 56957 states and 66389 transitions.
[2020-05-31 02:54:31,897 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 56957 to 55625.
[2020-05-31 02:54:31,897 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 55625 states.
[2020-05-31 02:54:31,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 55625 states to 55625 states and 64757 transitions.
[2020-05-31 02:54:31,984 INFO  L751         BuchiCegarLoop]: Abstraction has 55625 states and 64757 transitions.
[2020-05-31 02:54:31,984 INFO  L631         BuchiCegarLoop]: Abstraction has 55625 states and 64757 transitions.
[2020-05-31 02:54:31,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-31 02:54:31,984 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 55625 states and 64757 transitions.
[2020-05-31 02:54:32,053 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:54:32,053 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:54:32,053 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:54:32,056 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:54:32,056 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6072]   COND TRUE   DType[this] == TimedCrowdsale
[L6073]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6073]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6074]   COND FALSE  !(revert)
[L6085]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6090]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6095]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6100]   COND TRUE   DType[this] == Crowdsale
[L6101]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6101]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6102]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:54:32,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:54:32,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 1779200918, now seen corresponding path program 1 times
[2020-05-31 02:54:32,087 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:54:32,122 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:54:32,510 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 803 trivial. 0 not checked.
[2020-05-31 02:54:32,510 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:54:32,510 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:54:32,511 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:54:32,511 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:54:32,511 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:54:32,511 INFO  L87              Difference]: Start difference. First operand 55625 states and 64757 transitions. cyclomatic complexity: 9189 Second operand 3 states.
[2020-05-31 02:54:32,698 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:54:32,698 INFO  L93              Difference]: Finished difference Result 55705 states and 64853 transitions.
[2020-05-31 02:54:32,698 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:54:32,698 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 55705 states and 64853 transitions.
[2020-05-31 02:54:32,834 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:54:33,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 55705 states to 55705 states and 64853 transitions.
[2020-05-31 02:54:33,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2059
[2020-05-31 02:54:33,025 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2059
[2020-05-31 02:54:33,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 55705 states and 64853 transitions.
[2020-05-31 02:54:33,071 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:54:33,071 INFO  L728         BuchiCegarLoop]: Abstraction has 55705 states and 64853 transitions.
[2020-05-31 02:54:33,101 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 55705 states and 64853 transitions.
[2020-05-31 02:54:33,473 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 55705 to 55673.
[2020-05-31 02:54:33,473 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 55673 states.
[2020-05-31 02:54:33,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 55673 states to 55673 states and 64805 transitions.
[2020-05-31 02:54:33,563 INFO  L751         BuchiCegarLoop]: Abstraction has 55673 states and 64805 transitions.
[2020-05-31 02:54:33,563 INFO  L631         BuchiCegarLoop]: Abstraction has 55673 states and 64805 transitions.
[2020-05-31 02:54:33,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-31 02:54:33,564 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 55673 states and 64805 transitions.
[2020-05-31 02:54:33,633 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:54:33,634 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:54:33,634 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:54:33,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:54:33,636 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:54:33,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:54:33,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 2136378850, now seen corresponding path program 1 times
[2020-05-31 02:54:33,643 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:54:33,686 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:54:35,490 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 163 proven. 30 refuted. 0 times theorem prover too weak. 596 trivial. 0 not checked.
[2020-05-31 02:54:35,490 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:54:35,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [57] total 57
[2020-05-31 02:54:35,491 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:54:35,491 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 58 interpolants.
[2020-05-31 02:54:35,491 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=3122, Unknown=0, NotChecked=0, Total=3306
[2020-05-31 02:54:35,491 INFO  L87              Difference]: Start difference. First operand 55673 states and 64805 transitions. cyclomatic complexity: 9189 Second operand 58 states.
[2020-05-31 02:55:35,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:35,496 INFO  L93              Difference]: Finished difference Result 70796 states and 82389 transitions.
[2020-05-31 02:55:35,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 90 states. 
[2020-05-31 02:55:35,496 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 70796 states and 82389 transitions.
[2020-05-31 02:55:35,655 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:35,887 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 70796 states to 70757 states and 82340 transitions.
[2020-05-31 02:55:35,887 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2305
[2020-05-31 02:55:35,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2305
[2020-05-31 02:55:35,889 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 70757 states and 82340 transitions.
[2020-05-31 02:55:35,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:35,942 INFO  L728         BuchiCegarLoop]: Abstraction has 70757 states and 82340 transitions.
[2020-05-31 02:55:35,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 70757 states and 82340 transitions.
[2020-05-31 02:55:36,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 70757 to 69072.
[2020-05-31 02:55:36,541 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 69072 states.
[2020-05-31 02:55:36,647 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 69072 states to 69072 states and 80264 transitions.
[2020-05-31 02:55:36,647 INFO  L751         BuchiCegarLoop]: Abstraction has 69072 states and 80264 transitions.
[2020-05-31 02:55:36,647 INFO  L631         BuchiCegarLoop]: Abstraction has 69072 states and 80264 transitions.
[2020-05-31 02:55:36,647 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-31 02:55:36,647 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 69072 states and 80264 transitions.
[2020-05-31 02:55:36,733 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:36,733 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:36,734 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:36,737 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:36,737 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7475]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7476]   CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5080]               gas := gas - 7;
[L5081]   COND FALSE  !(DType[this] == RefundEscrow)
[L5086]   COND TRUE   DType[this] == ConditionalEscrow
[L5087]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5087]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5088]   COND FALSE  !(revert)
[L7476]   RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7477]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6072]   COND TRUE   DType[this] == TimedCrowdsale
[L6073]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6073]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6074]   COND FALSE  !(revert)
[L6085]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6090]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6095]   COND TRUE   DType[this] == TimedCrowdsale
[L6096]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6096]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6097]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:36,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:36,774 INFO  L82        PathProgramCache]: Analyzing trace with hash 1742609253, now seen corresponding path program 1 times
[2020-05-31 02:55:36,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:36,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:37,282 INFO  L134       CoverageAnalysis]: Checked inductivity of 854 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 845 trivial. 0 not checked.
[2020-05-31 02:55:37,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:37,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:55:37,283 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:37,283 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:55:37,284 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:55:37,284 INFO  L87              Difference]: Start difference. First operand 69072 states and 80264 transitions. cyclomatic complexity: 11261 Second operand 4 states.
[2020-05-31 02:55:37,521 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:37,521 INFO  L93              Difference]: Finished difference Result 69236 states and 80407 transitions.
[2020-05-31 02:55:37,521 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:55:37,521 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 69236 states and 80407 transitions.
[2020-05-31 02:55:37,680 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:37,910 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 69236 states to 69032 states and 80163 transitions.
[2020-05-31 02:55:37,910 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2002
[2020-05-31 02:55:37,911 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2002
[2020-05-31 02:55:37,911 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 69032 states and 80163 transitions.
[2020-05-31 02:55:37,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:37,966 INFO  L728         BuchiCegarLoop]: Abstraction has 69032 states and 80163 transitions.
[2020-05-31 02:55:38,003 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 69032 states and 80163 transitions.
[2020-05-31 02:55:38,458 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 69032 to 68950.
[2020-05-31 02:55:38,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 68950 states.
[2020-05-31 02:55:38,564 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 68950 states to 68950 states and 80061 transitions.
[2020-05-31 02:55:38,564 INFO  L751         BuchiCegarLoop]: Abstraction has 68950 states and 80061 transitions.
[2020-05-31 02:55:38,564 INFO  L631         BuchiCegarLoop]: Abstraction has 68950 states and 80061 transitions.
[2020-05-31 02:55:38,564 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-31 02:55:38,564 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 68950 states and 80061 transitions.
[2020-05-31 02:55:38,644 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:38,645 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:38,645 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:38,647 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:38,647 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7475]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7476]   CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5080]               gas := gas - 7;
[L5081]   COND TRUE   DType[this] == RefundEscrow
[L5082]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5082]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5083]   COND FALSE  !(revert)
[L7476]   RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7477]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:38,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:38,654 INFO  L82        PathProgramCache]: Analyzing trace with hash 786610034, now seen corresponding path program 1 times
[2020-05-31 02:55:38,654 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:38,690 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:39,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:39,087 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:39,087 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:55:39,088 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:39,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:55:39,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:55:39,088 INFO  L87              Difference]: Start difference. First operand 68950 states and 80061 transitions. cyclomatic complexity: 11180 Second operand 4 states.
[2020-05-31 02:55:39,323 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:39,323 INFO  L93              Difference]: Finished difference Result 69114 states and 80204 transitions.
[2020-05-31 02:55:39,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:55:39,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 69114 states and 80204 transitions.
[2020-05-31 02:55:39,484 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:39,713 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 69114 states to 68910 states and 79960 transitions.
[2020-05-31 02:55:39,713 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2002
[2020-05-31 02:55:39,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2002
[2020-05-31 02:55:39,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 68910 states and 79960 transitions.
[2020-05-31 02:55:39,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:39,768 INFO  L728         BuchiCegarLoop]: Abstraction has 68910 states and 79960 transitions.
[2020-05-31 02:55:39,804 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 68910 states and 79960 transitions.
[2020-05-31 02:55:40,236 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 68910 to 68828.
[2020-05-31 02:55:40,236 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 68828 states.
[2020-05-31 02:55:40,338 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 68828 states to 68828 states and 79858 transitions.
[2020-05-31 02:55:40,338 INFO  L751         BuchiCegarLoop]: Abstraction has 68828 states and 79858 transitions.
[2020-05-31 02:55:40,338 INFO  L631         BuchiCegarLoop]: Abstraction has 68828 states and 79858 transitions.
[2020-05-31 02:55:40,338 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-31 02:55:40,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 68828 states and 79858 transitions.
[2020-05-31 02:55:40,413 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:40,413 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:40,413 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:40,416 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:40,416 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND FALSE  !(DType[this] == RefundEscrow)
[L5267]   COND TRUE   DType[this] == ConditionalEscrow
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:40,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:40,421 INFO  L82        PathProgramCache]: Analyzing trace with hash 682846263, now seen corresponding path program 1 times
[2020-05-31 02:55:40,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:40,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:40,854 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:40,855 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:40,855 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:55:40,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:40,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:55:40,856 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:55:40,856 INFO  L87              Difference]: Start difference. First operand 68828 states and 79858 transitions. cyclomatic complexity: 11099 Second operand 3 states.
[2020-05-31 02:55:41,067 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:41,067 INFO  L93              Difference]: Finished difference Result 68970 states and 80081 transitions.
[2020-05-31 02:55:41,067 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:55:41,067 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 68970 states and 80081 transitions.
[2020-05-31 02:55:41,226 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:41,454 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 68970 states to 68970 states and 80081 transitions.
[2020-05-31 02:55:41,454 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2002
[2020-05-31 02:55:41,456 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2002
[2020-05-31 02:55:41,456 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 68970 states and 80081 transitions.
[2020-05-31 02:55:41,508 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:41,509 INFO  L728         BuchiCegarLoop]: Abstraction has 68970 states and 80081 transitions.
[2020-05-31 02:55:41,545 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 68970 states and 80081 transitions.
[2020-05-31 02:55:41,994 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 68970 to 68888.
[2020-05-31 02:55:41,994 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 68888 states.
[2020-05-31 02:55:42,099 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 68888 states to 68888 states and 79918 transitions.
[2020-05-31 02:55:42,100 INFO  L751         BuchiCegarLoop]: Abstraction has 68888 states and 79918 transitions.
[2020-05-31 02:55:42,100 INFO  L631         BuchiCegarLoop]: Abstraction has 68888 states and 79918 transitions.
[2020-05-31 02:55:42,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-05-31 02:55:42,100 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 68888 states and 79918 transitions.
[2020-05-31 02:55:42,180 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:42,180 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:42,180 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:42,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:42,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7471]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND FALSE  !(DType[this] == RefundEscrow)
[L5267]   COND TRUE   DType[this] == ConditionalEscrow
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND FALSE  !(DType[this] == RefundEscrow)
[L5282]   COND TRUE   DType[this] == ConditionalEscrow
[L5283]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9172]   COND FALSE  !(DType[this] == Escrow)
[L9177]   COND TRUE   DType[this] == Secondary
[L9178]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9178]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9179]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5283]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5284]   COND FALSE  !(revert)
[L7471]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7472]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:42,187 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:42,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 575969547, now seen corresponding path program 1 times
[2020-05-31 02:55:42,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:42,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:42,582 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:42,583 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:42,583 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:55:42,583 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:42,583 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:55:42,583 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:55:42,584 INFO  L87              Difference]: Start difference. First operand 68888 states and 79918 transitions. cyclomatic complexity: 11099 Second operand 5 states.
[2020-05-31 02:55:42,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:42,875 INFO  L93              Difference]: Finished difference Result 69671 states and 80984 transitions.
[2020-05-31 02:55:42,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:55:42,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 69671 states and 80984 transitions.
[2020-05-31 02:55:43,038 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:43,270 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 69671 states to 69671 states and 80984 transitions.
[2020-05-31 02:55:43,270 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2002
[2020-05-31 02:55:43,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2002
[2020-05-31 02:55:43,271 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 69671 states and 80984 transitions.
[2020-05-31 02:55:43,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:43,324 INFO  L728         BuchiCegarLoop]: Abstraction has 69671 states and 80984 transitions.
[2020-05-31 02:55:43,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 69671 states and 80984 transitions.
[2020-05-31 02:55:43,843 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 69671 to 69554.
[2020-05-31 02:55:43,843 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 69554 states.
[2020-05-31 02:55:44,091 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 69554 states to 69554 states and 80786 transitions.
[2020-05-31 02:55:44,091 INFO  L751         BuchiCegarLoop]: Abstraction has 69554 states and 80786 transitions.
[2020-05-31 02:55:44,091 INFO  L631         BuchiCegarLoop]: Abstraction has 69554 states and 80786 transitions.
[2020-05-31 02:55:44,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-05-31 02:55:44,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 69554 states and 80786 transitions.
[2020-05-31 02:55:44,167 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 02:55:44,168 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:44,168 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:44,170 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:44,170 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7475]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7476]   CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5080]               gas := gas - 7;
[L5081]   COND FALSE  !(DType[this] == RefundEscrow)
[L5086]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L5091]   COND TRUE   DType[this] == Escrow
[L5092]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5092]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5093]   COND FALSE  !(revert)
[L7476]   RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7477]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:44,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:44,176 INFO  L82        PathProgramCache]: Analyzing trace with hash -956405322, now seen corresponding path program 1 times
[2020-05-31 02:55:44,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:44,212 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:44,559 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:44,559 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:44,559 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:55:44,560 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:44,560 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:55:44,560 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:55:44,560 INFO  L87              Difference]: Start difference. First operand 69554 states and 80786 transitions. cyclomatic complexity: 11301 Second operand 8 states.
[2020-05-31 02:55:48,010 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:48,010 INFO  L93              Difference]: Finished difference Result 139870 states and 163025 transitions.
[2020-05-31 02:55:48,011 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:55:48,011 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139870 states and 163025 transitions.
[2020-05-31 02:55:48,357 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:48,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139870 states to 139870 states and 163025 transitions.
[2020-05-31 02:55:48,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4004
[2020-05-31 02:55:48,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4004
[2020-05-31 02:55:48,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 139870 states and 163025 transitions.
[2020-05-31 02:55:48,984 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:48,984 INFO  L728         BuchiCegarLoop]: Abstraction has 139870 states and 163025 transitions.
[2020-05-31 02:55:49,060 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 139870 states and 163025 transitions.
[2020-05-31 02:55:50,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 139870 to 139150.
[2020-05-31 02:55:50,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 139150 states.
[2020-05-31 02:55:50,573 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 139150 states to 139150 states and 162087 transitions.
[2020-05-31 02:55:50,573 INFO  L751         BuchiCegarLoop]: Abstraction has 139150 states and 162087 transitions.
[2020-05-31 02:55:50,573 INFO  L631         BuchiCegarLoop]: Abstraction has 139150 states and 162087 transitions.
[2020-05-31 02:55:50,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-05-31 02:55:50,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 139150 states and 162087 transitions.
[2020-05-31 02:55:50,734 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:50,734 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:50,734 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:50,737 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:50,737 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND FALSE  !(DType[this] == RefundEscrow)
[L5267]   COND TRUE   DType[this] == ConditionalEscrow
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND FALSE  !(DType[this] == RefundEscrow)
[L5282]   COND TRUE   DType[this] == ConditionalEscrow
[L5283]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5283]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5284]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:50,747 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:50,748 INFO  L82        PathProgramCache]: Analyzing trace with hash 1284120648, now seen corresponding path program 1 times
[2020-05-31 02:55:50,748 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:50,783 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:51,129 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:51,129 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:51,129 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:55:51,130 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:51,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:55:51,130 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:55:51,130 INFO  L87              Difference]: Start difference. First operand 139150 states and 162087 transitions. cyclomatic complexity: 23075 Second operand 4 states.
[2020-05-31 02:55:51,554 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:51,554 INFO  L93              Difference]: Finished difference Result 139396 states and 162393 transitions.
[2020-05-31 02:55:51,554 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:55:51,555 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139396 states and 162393 transitions.
[2020-05-31 02:55:51,908 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:52,415 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139396 states to 139396 states and 162393 transitions.
[2020-05-31 02:55:52,415 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4004
[2020-05-31 02:55:52,417 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4004
[2020-05-31 02:55:52,417 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 139396 states and 162393 transitions.
[2020-05-31 02:55:52,524 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:52,524 INFO  L728         BuchiCegarLoop]: Abstraction has 139396 states and 162393 transitions.
[2020-05-31 02:55:52,599 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 139396 states and 162393 transitions.
[2020-05-31 02:55:53,569 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 139396 to 139314.
[2020-05-31 02:55:53,569 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 139314 states.
[2020-05-31 02:55:55,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 139314 states to 139314 states and 162291 transitions.
[2020-05-31 02:55:55,675 INFO  L751         BuchiCegarLoop]: Abstraction has 139314 states and 162291 transitions.
[2020-05-31 02:55:55,675 INFO  L631         BuchiCegarLoop]: Abstraction has 139314 states and 162291 transitions.
[2020-05-31 02:55:55,675 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-05-31 02:55:55,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 139314 states and 162291 transitions.
[2020-05-31 02:55:55,835 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:55,835 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:55,835 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:55,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:55,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6072]   COND TRUE   DType[this] == TimedCrowdsale
[L6073]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6073]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6074]   COND FALSE  !(revert)
[L6085]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6090]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6095]   COND TRUE   DType[this] == TimedCrowdsale
[L6096]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6096]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6097]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:55,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:55,844 INFO  L82        PathProgramCache]: Analyzing trace with hash -689496526, now seen corresponding path program 1 times
[2020-05-31 02:55:55,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:55,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:56,366 INFO  L134       CoverageAnalysis]: Checked inductivity of 854 backedges. 11 proven. 1 refuted. 0 times theorem prover too weak. 842 trivial. 0 not checked.
[2020-05-31 02:55:56,366 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:55:56,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 02:55:56,367 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:56,367 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:55:56,367 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:55:56,367 INFO  L87              Difference]: Start difference. First operand 139314 states and 162291 transitions. cyclomatic complexity: 23115 Second operand 4 states.
[2020-05-31 02:55:56,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:55:56,785 INFO  L93              Difference]: Finished difference Result 139474 states and 162411 transitions.
[2020-05-31 02:55:56,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:55:56,785 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139474 states and 162411 transitions.
[2020-05-31 02:55:57,137 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:57,644 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139474 states to 138954 states and 161701 transitions.
[2020-05-31 02:55:57,644 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4004
[2020-05-31 02:55:57,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4004
[2020-05-31 02:55:57,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 138954 states and 161701 transitions.
[2020-05-31 02:55:57,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:55:57,751 INFO  L728         BuchiCegarLoop]: Abstraction has 138954 states and 161701 transitions.
[2020-05-31 02:55:57,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 138954 states and 161701 transitions.
[2020-05-31 02:55:58,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 138954 to 138874.
[2020-05-31 02:55:58,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 138874 states.
[2020-05-31 02:55:59,092 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 138874 states to 138874 states and 161621 transitions.
[2020-05-31 02:55:59,092 INFO  L751         BuchiCegarLoop]: Abstraction has 138874 states and 161621 transitions.
[2020-05-31 02:55:59,092 INFO  L631         BuchiCegarLoop]: Abstraction has 138874 states and 161621 transitions.
[2020-05-31 02:55:59,092 INFO  L445         BuchiCegarLoop]: ======== Iteration 57============
[2020-05-31 02:55:59,092 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 138874 states and 161621 transitions.
[2020-05-31 02:55:59,266 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-05-31 02:55:59,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:55:59,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:55:59,269 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:55:59,269 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7471]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND FALSE  !(DType[this] == RefundEscrow)
[L5267]   COND TRUE   DType[this] == ConditionalEscrow
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND FALSE  !(DType[this] == RefundEscrow)
[L5282]   COND TRUE   DType[this] == ConditionalEscrow
[L5283]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5283]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5284]   COND FALSE  !(revert)
[L7471]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7472]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:55:59,274 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:55:59,275 INFO  L82        PathProgramCache]: Analyzing trace with hash -1781718746, now seen corresponding path program 1 times
[2020-05-31 02:55:59,275 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:55:59,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:55:59,678 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:55:59,678 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:55:59,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:55:59,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:55:59,679 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 02:55:59,679 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 02:55:59,679 INFO  L87              Difference]: Start difference. First operand 138874 states and 161621 transitions. cyclomatic complexity: 22885 Second operand 8 states.
[2020-05-31 02:56:02,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:56:02,169 INFO  L93              Difference]: Finished difference Result 278958 states and 325225 transitions.
[2020-05-31 02:56:02,169 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-31 02:56:02,169 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 278958 states and 325225 transitions.
[2020-05-31 02:56:02,881 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:03,955 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 278958 states to 277982 states and 324089 transitions.
[2020-05-31 02:56:03,955 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 7976
[2020-05-31 02:56:03,961 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 7976
[2020-05-31 02:56:03,961 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 277982 states and 324089 transitions.
[2020-05-31 02:56:04,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:56:04,170 INFO  L728         BuchiCegarLoop]: Abstraction has 277982 states and 324089 transitions.
[2020-05-31 02:56:04,321 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 277982 states and 324089 transitions.
[2020-05-31 02:56:06,241 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 277982 to 275374.
[2020-05-31 02:56:06,241 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 275374 states.
[2020-05-31 02:56:07,178 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 275374 states to 275374 states and 320864 transitions.
[2020-05-31 02:56:07,178 INFO  L751         BuchiCegarLoop]: Abstraction has 275374 states and 320864 transitions.
[2020-05-31 02:56:07,179 INFO  L631         BuchiCegarLoop]: Abstraction has 275374 states and 320864 transitions.
[2020-05-31 02:56:07,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 58============
[2020-05-31 02:56:07,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 275374 states and 320864 transitions.
[2020-05-31 02:56:07,511 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:07,512 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:56:07,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:56:07,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:56:07,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND FALSE  !(DType[this] == RefundEscrow)
[L9167]   COND TRUE   DType[this] == ConditionalEscrow
[L9168]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9168]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9169]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:56:07,521 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:56:07,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 586751356, now seen corresponding path program 1 times
[2020-05-31 02:56:07,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:56:07,558 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:56:07,918 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 02:56:07,918 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:56:07,918 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:56:07,919 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:56:07,919 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:56:07,919 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:56:07,919 INFO  L87              Difference]: Start difference. First operand 275374 states and 320864 transitions. cyclomatic complexity: 45766 Second operand 5 states.
[2020-05-31 02:56:09,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:56:09,088 INFO  L93              Difference]: Finished difference Result 276610 states and 321968 transitions.
[2020-05-31 02:56:09,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:56:09,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 276610 states and 321968 transitions.
[2020-05-31 02:56:09,785 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:10,843 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 276610 states to 274902 states and 319940 transitions.
[2020-05-31 02:56:10,843 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 7976
[2020-05-31 02:56:10,848 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 7976
[2020-05-31 02:56:10,848 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 274902 states and 319940 transitions.
[2020-05-31 02:56:11,057 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:56:11,057 INFO  L728         BuchiCegarLoop]: Abstraction has 274902 states and 319940 transitions.
[2020-05-31 02:56:11,200 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 274902 states and 319940 transitions.
[2020-05-31 02:56:15,902 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 274902 to 274902.
[2020-05-31 02:56:15,903 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 274902 states.
[2020-05-31 02:56:16,341 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 274902 states to 274902 states and 319940 transitions.
[2020-05-31 02:56:16,341 INFO  L751         BuchiCegarLoop]: Abstraction has 274902 states and 319940 transitions.
[2020-05-31 02:56:16,342 INFO  L631         BuchiCegarLoop]: Abstraction has 274902 states and 319940 transitions.
[2020-05-31 02:56:16,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 59============
[2020-05-31 02:56:16,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 274902 states and 319940 transitions.
[2020-05-31 02:56:16,689 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:16,689 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:56:16,689 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:56:16,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:56:16,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND TRUE   choice == 2
[L10455]              gas := gas - 21000;
[L10456]  COND TRUE   gas >= 0
[L10457]              assume msgvalue_MSG == 0;
[L10458]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10458]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:56:16,696 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:56:16,697 INFO  L82        PathProgramCache]: Analyzing trace with hash -654324828, now seen corresponding path program 1 times
[2020-05-31 02:56:16,697 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:56:16,733 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:56:17,270 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 2 proven. 11 refuted. 0 times theorem prover too weak. 816 trivial. 0 not checked.
[2020-05-31 02:56:17,270 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:56:17,271 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-31 02:56:17,272 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:56:17,272 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:56:17,272 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:56:17,272 INFO  L87              Difference]: Start difference. First operand 274902 states and 319940 transitions. cyclomatic complexity: 45314 Second operand 14 states.
[2020-05-31 02:56:23,375 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:56:23,375 INFO  L93              Difference]: Finished difference Result 85268 states and 98040 transitions.
[2020-05-31 02:56:23,375 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:56:23,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 85268 states and 98040 transitions.
[2020-05-31 02:56:23,569 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:23,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 85268 states to 61375 states and 70970 transitions.
[2020-05-31 02:56:23,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6367
[2020-05-31 02:56:23,781 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 6367
[2020-05-31 02:56:23,781 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 61375 states and 70970 transitions.
[2020-05-31 02:56:23,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:56:23,829 INFO  L728         BuchiCegarLoop]: Abstraction has 61375 states and 70970 transitions.
[2020-05-31 02:56:23,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 61375 states and 70970 transitions.
[2020-05-31 02:56:24,402 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 61375 to 61029.
[2020-05-31 02:56:24,402 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 61029 states.
[2020-05-31 02:56:24,491 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 61029 states to 61029 states and 70561 transitions.
[2020-05-31 02:56:24,491 INFO  L751         BuchiCegarLoop]: Abstraction has 61029 states and 70561 transitions.
[2020-05-31 02:56:24,492 INFO  L631         BuchiCegarLoop]: Abstraction has 61029 states and 70561 transitions.
[2020-05-31 02:56:24,492 INFO  L445         BuchiCegarLoop]: ======== Iteration 60============
[2020-05-31 02:56:24,492 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 61029 states and 70561 transitions.
[2020-05-31 02:56:24,570 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:24,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:56:24,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:56:24,573 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:56:24,573 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:56:24,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:56:24,585 INFO  L82        PathProgramCache]: Analyzing trace with hash -2041026758, now seen corresponding path program 1 times
[2020-05-31 02:56:24,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:56:24,627 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:56:26,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 44 proven. 62 refuted. 0 times theorem prover too weak. 1100 trivial. 0 not checked.
[2020-05-31 02:56:26,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:56:26,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-05-31 02:56:26,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:56:26,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-05-31 02:56:26,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=2318, Unknown=0, NotChecked=0, Total=2450
[2020-05-31 02:56:26,060 INFO  L87              Difference]: Start difference. First operand 61029 states and 70561 transitions. cyclomatic complexity: 9591 Second operand 50 states.
[2020-05-31 02:56:48,373 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:56:48,373 INFO  L93              Difference]: Finished difference Result 62942 states and 72828 transitions.
[2020-05-31 02:56:48,373 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-05-31 02:56:48,373 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 62942 states and 72828 transitions.
[2020-05-31 02:56:48,511 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:48,711 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 62942 states to 62929 states and 72812 transitions.
[2020-05-31 02:56:48,712 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6788
[2020-05-31 02:56:48,715 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 6788
[2020-05-31 02:56:48,715 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 62929 states and 72812 transitions.
[2020-05-31 02:56:48,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:56:48,760 INFO  L728         BuchiCegarLoop]: Abstraction has 62929 states and 72812 transitions.
[2020-05-31 02:56:48,789 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 62929 states and 72812 transitions.
[2020-05-31 02:56:49,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 62929 to 61757.
[2020-05-31 02:56:49,204 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 61757 states.
[2020-05-31 02:56:49,296 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 61757 states to 61757 states and 71482 transitions.
[2020-05-31 02:56:49,297 INFO  L751         BuchiCegarLoop]: Abstraction has 61757 states and 71482 transitions.
[2020-05-31 02:56:49,297 INFO  L631         BuchiCegarLoop]: Abstraction has 61757 states and 71482 transitions.
[2020-05-31 02:56:49,297 INFO  L445         BuchiCegarLoop]: ======== Iteration 61============
[2020-05-31 02:56:49,297 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 61757 states and 71482 transitions.
[2020-05-31 02:56:49,376 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-05-31 02:56:49,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:56:49,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:56:49,379 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:56:49,379 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10475]              assume null == 0;
[L10476]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10476]  RET         call this := FreshRefGenerator__success();
[L10477]              assume now >= 0;
[L10478]              assume DType[this] == RefundableCrowdsale;
[L10479]              gas := gas - 53000;
[L10480]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10480]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10481]              assume !revert && gas >= 0;
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND TRUE   choice == 10
[L10407]              gas := gas - 21000;
[L10408]  COND TRUE   gas >= 0
[L10409]              assume msgvalue_MSG >= 0;
[L10410]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9204]               gas := gas - 891;
[L9205]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9209]               gas := gas - 20267;
[L9210]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]   COND TRUE   DType[this] == RefundableCrowdsale
[L9244]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9244]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9245]   COND FALSE  !(revert)
[L9261]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9275]               gas := gas - 20267;
[L9276]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10410]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND TRUE   choice == 4
[L10443]              gas := gas - 21000;
[L10444]  COND TRUE   gas >= 0
[L10445]              assume msgvalue_MSG == 0;
[L10446]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9161]               gas := gas - 7402;
[L9162]   COND TRUE   DType[this] == RefundEscrow
[L9163]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9163]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9164]   COND FALSE  !(revert)
[L9185]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9084]               havoc __exception;
[L9085]   COND FALSE  !(__exception)
[L9115]   COND TRUE   Balance[from] >= amount
[L9116]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8399]               assume Balance[from] >= amount;
[L8400]               Balance[from] := Balance[from] - amount;
[L8401]               Balance[to] := Balance[to] + amount;
[L8403]   COND FALSE  !(choice == 0)
[L8407]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9116]   RET         call FallbackDispatch__success(from, to, amount);
[L9117]               success := true;
[L9121]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10446]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10484]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10339]              havoc msgsender_MSG;
[L10340]              havoc msgvalue_MSG;
[L10341]              havoc choice;
[L10342]              havoc rate_s740;
[L10343]              havoc wallet_s740;
[L10344]              havoc token_s740;
[L10345]              havoc __ret_0_token;
[L10346]              havoc __ret_0_wallet;
[L10347]              havoc __ret_0_rate;
[L10348]              havoc __ret_0_weiRaised;
[L10349]              havoc beneficiary_s838;
[L10350]              havoc openingTime_s1000;
[L10351]              havoc closingTime_s1000;
[L10352]              havoc __ret_0_openingTime;
[L10353]              havoc __ret_0_closingTime;
[L10354]              havoc __ret_0_isOpen;
[L10355]              havoc __ret_0_hasClosed;
[L10356]              havoc __ret_0_finalized;
[L10357]              havoc goal_s1187;
[L10358]              havoc __ret_0_goal;
[L10359]              havoc refundee_s1220;
[L10360]              havoc __ret_0_goalReached;
[L10361]              havoc tmpNow;
[L10362]              havoc gas;
[L10363]              assume gas > 4000000 && gas <= 8000000;
[L10364]              tmpNow := now;
[L10365]              havoc now;
[L10366]              assume now > tmpNow;
[L10367]              assume msgsender_MSG != null;
[L10368]              assume DType[msgsender_MSG] != Context;
[L10369]              assume DType[msgsender_MSG] != SafeMath;
[L10370]              assume DType[msgsender_MSG] != Secondary;
[L10371]              assume DType[msgsender_MSG] != Escrow;
[L10372]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10373]              assume DType[msgsender_MSG] != RefundEscrow;
[L10374]              assume DType[msgsender_MSG] != IERC20;
[L10375]              assume DType[msgsender_MSG] != SafeERC20;
[L10376]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10377]              assume DType[msgsender_MSG] != Crowdsale;
[L10378]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10379]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10380]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10381]              Alloc[msgsender_MSG] := true;
[L10382]  COND FALSE  !(choice == 14)
[L10388]  COND FALSE  !(choice == 13)
[L10394]  COND FALSE  !(choice == 12)
[L10400]  COND FALSE  !(choice == 11)
[L10406]  COND FALSE  !(choice == 10)
[L10412]  COND FALSE  !(choice == 9)
[L10418]  COND FALSE  !(choice == 8)
[L10424]  COND FALSE  !(choice == 7)
[L10430]  COND FALSE  !(choice == 6)
[L10436]  COND FALSE  !(choice == 5)
[L10442]  COND FALSE  !(choice == 4)
[L10448]  COND FALSE  !(choice == 3)
[L10454]  COND FALSE  !(choice == 2)
[L10460]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10484]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 02:56:49,385 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:56:49,385 INFO  L82        PathProgramCache]: Analyzing trace with hash -1469696968, now seen corresponding path program 1 times
[2020-05-31 02:56:49,385 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:56:49,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:56:51,031 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 38 proven. 27 refuted. 0 times theorem prover too weak. 1141 trivial. 0 not checked.
[2020-05-31 02:56:51,031 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:56:51,032 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 02:56:51,032 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:56:51,032 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 02:56:51,032 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=142, Invalid=2408, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 02:56:51,033 INFO  L87              Difference]: Start difference. First operand 61757 states and 71482 transitions. cyclomatic complexity: 9789 Second operand 51 states.
[2020-05-31 02:57:12,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:57:12,028 INFO  L93              Difference]: Finished difference Result 11961 states and 13752 transitions.
[2020-05-31 02:57:12,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-31 02:57:12,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11961 states and 13752 transitions.
[2020-05-31 02:57:12,053 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:57:12,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11961 states to 0 states and 0 transitions.
[2020-05-31 02:57:12,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:57:12,053 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:57:12,053 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:57:12,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:57:12,053 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:57:12,053 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:57:12,053 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:57:12,054 INFO  L445         BuchiCegarLoop]: ======== Iteration 62============
[2020-05-31 02:57:12,054 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:57:12,054 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:57:12,054 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:57:12,058 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:57:12 BasicIcfg
[2020-05-31 02:57:12,058 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:57:12,058 INFO  L168              Benchmark]: Toolchain (without parser) took 1113113.25 ms. Allocated memory was 514.9 MB in the beginning and 8.5 GB in the end (delta: 7.9 GB). Free memory was 441.3 MB in the beginning and 2.2 GB in the end (delta: -1.7 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,059 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,059 INFO  L168              Benchmark]: Boogie Preprocessor took 117.20 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 422.3 MB in the end (delta: 19.0 MB). Peak memory consumption was 19.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,060 INFO  L168              Benchmark]: UtopiaSpecLang took 76.17 ms. Allocated memory is still 514.9 MB. Free memory was 422.3 MB in the beginning and 408.8 MB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,060 INFO  L168              Benchmark]: Boogie Printer took 21.92 ms. Allocated memory is still 514.9 MB. Free memory was 408.8 MB in the beginning and 402.1 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,061 INFO  L168              Benchmark]: RCFGBuilder took 916.26 ms. Allocated memory was 514.9 MB in the beginning and 632.3 MB in the end (delta: 117.4 MB). Free memory was 402.1 MB in the beginning and 550.8 MB in the end (delta: -148.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,061 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.05 ms. Allocated memory is still 632.3 MB. Free memory was 550.8 MB in the beginning and 543.2 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,061 INFO  L168              Benchmark]: BÃ¼chi Program Product took 15992.38 ms. Allocated memory was 632.3 MB in the beginning and 3.8 GB in the end (delta: 3.2 GB). Free memory was 543.2 MB in the beginning and 3.0 GB in the end (delta: -2.4 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,062 INFO  L168              Benchmark]: BlockEncodingV2 took 1494.98 ms. Allocated memory is still 3.8 GB. Free memory was 3.0 GB in the beginning and 1.9 GB in the end (delta: 1.1 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,062 INFO  L168              Benchmark]: BuchiAutomizer took 1094446.45 ms. Allocated memory was 3.8 GB in the beginning and 8.5 GB in the end (delta: 4.6 GB). Free memory was 1.9 GB in the beginning and 2.2 GB in the end (delta: -300.5 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
[2020-05-31 02:57:12,064 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    46375 locations, 196946 edges
  - StatisticsResult: Encoded RCFG
    45615 locations, 192214 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 117.20 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 422.3 MB in the end (delta: 19.0 MB). Peak memory consumption was 19.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 76.17 ms. Allocated memory is still 514.9 MB. Free memory was 422.3 MB in the beginning and 408.8 MB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.92 ms. Allocated memory is still 514.9 MB. Free memory was 408.8 MB in the beginning and 402.1 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 916.26 ms. Allocated memory was 514.9 MB in the beginning and 632.3 MB in the end (delta: 117.4 MB). Free memory was 402.1 MB in the beginning and 550.8 MB in the end (delta: -148.7 MB). Peak memory consumption was 125.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.05 ms. Allocated memory is still 632.3 MB. Free memory was 550.8 MB in the beginning and 543.2 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 15992.38 ms. Allocated memory was 632.3 MB in the beginning and 3.8 GB in the end (delta: 3.2 GB). Free memory was 543.2 MB in the beginning and 3.0 GB in the end (delta: -2.4 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 1494.98 ms. Allocated memory is still 3.8 GB. Free memory was 3.0 GB in the beginning and 1.9 GB in the end (delta: 1.1 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 1094446.45 ms. Allocated memory was 3.8 GB in the beginning and 8.5 GB in the end (delta: 4.6 GB). Free memory was 1.9 GB in the beginning and 2.2 GB in the end (delta: -300.5 MB). Peak memory consumption was 4.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    4653 locations, 6687 edges
  - StatisticsResult: BuchiProgram size
    46375 locations, 196946 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 61 terminating modules (61 trivial, 0 deterministic, 0 nondeterministic). 61 modules have a trivial ranking function, the largest among these consists of 58 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 1094.4s and 62 iterations.  TraceHistogramMax:10. Analysis of lassos took 25.8s. Construction of modules took 898.7s. BÃ¼chi inclusion checks took 75.4s. Highest rank in rank-based complementation 0. Minimization of det autom 61. Minimization of nondet autom 0. Automata minimization 52.3s AutomataMinimizationTime, 60 MinimizatonAttempts, 50329 StatesRemovedByMinimization, 42 NontrivialMinimizations. Non-live state removal took 30.8s Buchi closure took 0.0s. Biggest automaton had 275374 states and ocurred in iteration 57.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 1557346 SDtfs, 677155 SDslu, 4909837 SDs, 0 SdLazy, 2284564 SolverSat, 125804 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 898.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU61 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_buyTokens_(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) && ( <>(success_finalize_Finalizable(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) )&& ! ( ( []( (inv_CorralChoice_RefundableCrowdsale0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
