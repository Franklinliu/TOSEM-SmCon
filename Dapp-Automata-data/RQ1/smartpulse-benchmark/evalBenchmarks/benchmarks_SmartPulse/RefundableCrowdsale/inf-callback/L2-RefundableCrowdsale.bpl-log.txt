This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 04:28:03,891 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 04:28:03,892 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 04:28:03,904 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 04:28:03,904 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 04:28:03,905 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 04:28:03,906 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 04:28:03,908 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 04:28:03,910 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 04:28:03,911 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 04:28:03,912 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 04:28:03,912 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 04:28:03,913 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 04:28:03,914 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 04:28:03,916 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 04:28:03,917 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 04:28:03,918 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 04:28:03,920 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 04:28:03,921 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 04:28:03,922 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 04:28:03,923 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 04:28:03,924 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 04:28:03,926 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 04:28:03,926 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 04:28:03,926 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 04:28:03,927 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 04:28:03,927 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 04:28:03,928 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 04:28:03,929 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 04:28:03,929 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 04:28:03,929 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 04:28:03,930 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 04:28:03,931 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 04:28:03,932 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 04:28:03,933 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 04:28:03,934 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 04:28:03,934 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 04:28:03,935 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 04:28:03,935 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 04:28:03,935 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 04:28:03,936 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 04:28:03,937 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 04:28:03,938 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 04:28:03,949 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 04:28:03,949 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 04:28:03,950 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 04:28:03,950 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 04:28:03,950 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 04:28:03,951 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 04:28:03,951 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 04:28:03,951 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 04:28:03,951 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 04:28:03,952 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 04:28:03,952 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 04:28:03,953 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 04:28:03,971 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 04:28:03,982 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 04:28:03,984 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 04:28:03,985 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 04:28:03,985 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 04:28:03,986 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl
[2020-05-31 04:28:03,987 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl'
[2020-05-31 04:28:04,085 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 04:28:04,086 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 04:28:04,087 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 04:28:04,087 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 04:28:04,087 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 04:28:04,099 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,100 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,136 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,136 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,161 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,178 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,189 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,203 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 04:28:04,203 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 04:28:04,203 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 04:28:04,206 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 04:28:04,209 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/1) ...
[2020-05-31 04:28:04,226 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 04:28:04,232 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 04:28:04,240 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 04:28:04,246 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_buyTokens_Crowdsale_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_buyTokens_Crowdsale_2_0,GLOBAL]]]
[2020-05-31 04:28:04,247 INFO  L677   opiaSpecLangObserver]: Parsed call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msg.sender, msg.value); call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msg.sender, msg.value); call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],finalized_FinalizableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],goalReached_RefundableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],hasClosed_TimedCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]
[2020-05-31 04:28:04,248 INFO  L658   opiaSpecLangObserver]: Parsed var __finalized_FinalizableCrowdsale0: bool; var __goalReached_RefundableCrowdsale0: bool; var __hasClosed_TimedCrowdsale0: bool;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__finalized_FinalizableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__goalReached_RefundableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__hasClosed_TimedCrowdsale0],PrimitiveType[bool],null]]]
[2020-05-31 04:28:04,249 INFO  L599   opiaSpecLangObserver]: Parsed ( ( __hasClosed_TimedCrowdsale==true && __goalReached_RefundableCrowdsale==true ) && __finalized_FinalizableCrowdsale==false ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]]],BinaryExpression[COMPEQ,IdentifierExpression[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[false]]]
[2020-05-31 04:28:04,249 INFO  L968   opiaSpecLangObserver]: Compiling: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 04:28:04,250 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(inv_CorralChoice_RefundableCrowdsale0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 04:28:04,250 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 04:28:04,250 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 04:28:04,250 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 04:28:04,251 INFO  L677   opiaSpecLangObserver]: Parsed call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]],wallet_Crowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>]]]
[2020-05-31 04:28:04,251 INFO  L658   opiaSpecLangObserver]: Parsed var __wallet_Crowdsale1: int;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/inf-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__wallet_Crowdsale1],PrimitiveType[int],null]]]
[2020-05-31 04:28:04,252 INFO  L599   opiaSpecLangObserver]: Parsed ben==__wallet_Crowdsale to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],IdentifierExpression[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]]
[2020-05-31 04:28:04,253 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 04:28:04,253 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_buyTokens_Crowdsale0) ) && ( <>AP(success_finalize_FinalizableCrowdsale0) ) )
Executed UtopiaSpecLang
[2020-05-31 04:28:04,271 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 04:28:04 PropertyContainer
[2020-05-31 04:28:04,271 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 04:28:04,271 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 04:28:04,272 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 04:28:04,272 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 04:28:04,272 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/2) ...
[2020-05-31 04:28:04,273 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 04:28:04,273 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 04:28:04,295 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 04:28:04" (2/2) ...
[2020-05-31 04:28:04,295 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 04:28:04,295 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 04:28:04,295 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 04:28:04,296 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 04:28:04,296 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/2) ...
[2020-05-31 04:28:04,347 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 04:28:04,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-05-31 04:28:04,348 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-05-31 04:28:04,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-05-31 04:28:04,348 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-31 04:28:04,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 04:28:04,349 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary
[2020-05-31 04:28:04,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary
[2020-05-31 04:28:04,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary
[2020-05-31 04:28:04,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow
[2020-05-31 04:28:04,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow
[2020-05-31 04:28:04,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow
[2020-05-31 04:28:04,350 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow
[2020-05-31 04:28:04,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow
[2020-05-31 04:28:04,351 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__success
[2020-05-31 04:28:04,351 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow
[2020-05-31 04:28:04,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow
[2020-05-31 04:28:04,351 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__success
[2020-05-31 04:28:04,351 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 04:28:04,351 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 04:28:04,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_ConditionalEscrow
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow
[2020-05-31 04:28:04,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow
[2020-05-31 04:28:04,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow
[2020-05-31 04:28:04,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow
[2020-05-31 04:28:04,352 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow
[2020-05-31 04:28:04,353 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 04:28:04,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 04:28:04,354 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 04:28:04,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 04:28:04,354 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 04:28:04,354 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-05-31 04:28:04,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure approve_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom_IERC20
[2020-05-31 04:28:04,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 04:28:04,356 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20
[2020-05-31 04:28:04,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20
[2020-05-31 04:28:04,356 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__success
[2020-05-31 04:28:04,356 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 04:28:04,356 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__success
[2020-05-31 04:28:04,356 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 04:28:04,357 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 04:28:04,357 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 04:28:04,357 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 04:28:04,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 04:28:04,357 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,357 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale
[2020-05-31 04:28:04,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale
[2020-05-31 04:28:04,358 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__success
[2020-05-31 04:28:04,358 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale
[2020-05-31 04:28:04,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale
[2020-05-31 04:28:04,358 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale
[2020-05-31 04:28:04,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale
[2020-05-31 04:28:04,358 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale
[2020-05-31 04:28:04,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale
[2020-05-31 04:28:04,359 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale
[2020-05-31 04:28:04,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale
[2020-05-31 04:28:04,359 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale
[2020-05-31 04:28:04,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale
[2020-05-31 04:28:04,359 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 04:28:04,359 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 04:28:04,360 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__success
[2020-05-31 04:28:04,361 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,361 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 04:28:04,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 04:28:04,361 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale
[2020-05-31 04:28:04,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale
[2020-05-31 04:28:04,361 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale
[2020-05-31 04:28:04,362 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 04:28:04,362 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 04:28:04,363 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,363 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale
[2020-05-31 04:28:04,363 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 04:28:04,364 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 04:28:04,364 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,364 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 04:28:04,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 04:28:04,364 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale
[2020-05-31 04:28:04,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale
[2020-05-31 04:28:04,364 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale
[2020-05-31 04:28:04,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale
[2020-05-31 04:28:04,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 04:28:04,365 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__success
[2020-05-31 04:28:04,366 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__success
[2020-05-31 04:28:04,366 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__success
[2020-05-31 04:28:04,366 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__success
[2020-05-31 04:28:04,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-05-31 04:28:04,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Secondary
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Secondary
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Escrow
[2020-05-31 04:28:04,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Escrow
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ConditionalEscrow
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ConditionalEscrow
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundEscrow
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_RefundEscrow
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-05-31 04:28:04,368 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeERC20
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeERC20
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ReentrancyGuard
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ReentrancyGuard
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Crowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Crowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TimedCrowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TimedCrowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 04:28:04,369 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 04:28:04,370 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__fail
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__success
[2020-05-31 04:28:04,371 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__success
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__success
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 04:28:04,372 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__success
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__fail
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__success
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__fail
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__success
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__fail
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__success
[2020-05-31 04:28:04,373 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__success
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__success
[2020-05-31 04:28:04,374 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__success
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__fail
[2020-05-31 04:28:04,375 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__success
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__success
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__success
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__success
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__success
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__fail
[2020-05-31 04:28:04,376 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__success
[2020-05-31 04:28:04,377 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__success
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__success
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 04:28:04,378 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,379 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__success
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__fail
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 04:28:04,380 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__fail
[2020-05-31 04:28:04,381 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__fail
[2020-05-31 04:28:04,382 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__fail
[2020-05-31 04:28:04,382 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__fail
[2020-05-31 04:28:04,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 04:28:04,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 04:28:04,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 04:28:04,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-05-31 04:28:04,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-31 04:28:04,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__fail
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__success
[2020-05-31 04:28:04,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__fail
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__success
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__fail
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__success
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__fail
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__success
[2020-05-31 04:28:04,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__fail
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__success
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__fail
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__success
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__fail
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__success
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__fail
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__success
[2020-05-31 04:28:04,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__success
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__success
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 04:28:04,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__fail
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__success
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__fail
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__success
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__fail
[2020-05-31 04:28:04,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__success
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__fail
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__success
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__success
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 04:28:04,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__fail
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__fail
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__success
[2020-05-31 04:28:04,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__success
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 04:28:04,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__fail
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__fail
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__fail
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__success
[2020-05-31 04:28:04,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 04:28:04,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 04:28:04,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 04:28:04,395 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 04:28:04,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 04:28:04,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__fail
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__success
[2020-05-31 04:28:04,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Secondary
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Secondary
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Escrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Escrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ConditionalEscrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ConditionalEscrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundEscrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_RefundEscrow
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-05-31 04:28:04,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeERC20
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeERC20
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ReentrancyGuard
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ReentrancyGuard
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Crowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Crowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TimedCrowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TimedCrowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 04:28:04,400 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 04:28:04,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 04:28:04,522 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 04:28:04,712 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 04:28:04,948 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 04:28:05,062 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 04:28:05,221 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 04:28:05,221 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-05-31 04:28:05,223 INFO  L202        PluginConnector]: Adding new model L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 04:28:05 BoogieIcfgContainer
[2020-05-31 04:28:05,223 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 04:28:04" (2/2) ...
[2020-05-31 04:28:05,223 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 04:28:05,223 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7c2daff9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 04:28:05, skipping insertion in model container
[2020-05-31 04:28:05,223 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 04:28:05,224 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 04:28:05,224 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 04:28:05,225 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 04:28:05,225 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/3) ...
[2020-05-31 04:28:05,225 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2907ff8a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 04:28:05, skipping insertion in model container
[2020-05-31 04:28:05,225 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 04:28:04" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 04:28:05,280 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 04:28:05 NWAContainer
[2020-05-31 04:28:05,281 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 04:28:05,281 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 04:28:05,281 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 04:28:05,281 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 04:28:05,282 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 04:28:05" (3/4) ...
[2020-05-31 04:28:05,283 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@251d5b0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 04:28:05, skipping insertion in model container
[2020-05-31 04:28:05,283 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 04:28:05" (4/4) ...
[2020-05-31 04:28:05,285 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-31 04:28:05,291 INFO  L110   BuchiProductObserver]: Initial RCFG 4729 locations, 6765 edges
[2020-05-31 04:28:05,291 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 04:28:05,305 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 04:28:11,840 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 4
[2020-05-31 04:28:19,918 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 04:28:19,975 INFO  L110   BuchiProductObserver]: BuchiProgram size 46983 locations, 199052 edges
[2020-05-31 04:28:19,975 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 04:28:19 BoogieIcfgContainer
[2020-05-31 04:28:19,975 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 04:28:19,975 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 04:28:19,975 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 04:28:19,977 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 04:28:19,977 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 04:28:19" (1/1) ...
[2020-05-31 04:28:22,706 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,706 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,707 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,707 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,707 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,707 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,709 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,709 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,709 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,710 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,711 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,712 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,712 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,714 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,715 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,716 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,717 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,718 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,719 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,721 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,722 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,722 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,723 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 04:28:22,725 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,725 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,726 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,726 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,726 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,726 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,729 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,736 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,737 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,738 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,740 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,740 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,740 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,741 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,741 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,741 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,744 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,745 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,745 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,745 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,745 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,745 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,746 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,747 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,748 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,748 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,748 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,748 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,749 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,749 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,749 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,750 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,750 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,750 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,751 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,765 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,766 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,766 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,766 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,766 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,766 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,767 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,775 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,776 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,776 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,776 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,776 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,776 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,790 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,794 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,794 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,794 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,795 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,795 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,795 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,796 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,797 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,797 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,797 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,797 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,797 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,824 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,843 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 04:28:22,960 INFO  L313           BlockEncoder]: Initial Icfg 46983 locations, 199052 edges
[2020-05-31 04:28:22,961 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 04:28:22,961 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 04:28:22,961 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 04:28:22,962 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 04:28:23,054 INFO  L70    emoveInfeasibleEdges]: Removed 2573 edges and 116 locations because of local infeasibility
[2020-05-31 04:28:23,123 INFO  L70        RemoveSinkStates]: Removed 1584 edges and 468 locations by removing sink states
[2020-05-31 04:28:23,273 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 04:28:23,327 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 04:28:23,392 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 04:28:23,393 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 04:28:23,440 INFO  L313           BlockEncoder]: Encoded RCFG 46223 locations, 194320 edges
[2020-05-31 04:28:23,441 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 04:28:23 BasicIcfg
[2020-05-31 04:28:23,441 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 04:28:23,441 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 04:28:23,441 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 04:28:23,444 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 04:28:23,444 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,444 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 04:28:04" (1/6) ...
[2020-05-31 04:28:23,446 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5c809d74 and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 04:28:23, skipping insertion in model container
[2020-05-31 04:28:23,446 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,446 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 04:28:04" (2/6) ...
[2020-05-31 04:28:23,446 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5c809d74 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 04:28:23, skipping insertion in model container
[2020-05-31 04:28:23,446 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,446 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 04:28:05" (3/6) ...
[2020-05-31 04:28:23,446 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5c809d74 and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 04:28:23, skipping insertion in model container
[2020-05-31 04:28:23,446 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,446 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 04:28:05" (4/6) ...
[2020-05-31 04:28:23,447 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5c809d74 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 04:28:23, skipping insertion in model container
[2020-05-31 04:28:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 04:28:19" (5/6) ...
[2020-05-31 04:28:23,447 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5c809d74 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 04:28:23, skipping insertion in model container
[2020-05-31 04:28:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 04:28:23,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 04:28:23" (6/6) ...
[2020-05-31 04:28:23,448 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-RefundableCrowdsale.bpl_BEv2
[2020-05-31 04:28:23,484 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 04:28:23,485 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 04:28:23,485 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 04:28:23,485 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 04:28:23,485 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 04:28:23,485 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 04:28:23,485 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 04:28:23,485 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 04:28:23,485 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 04:28:23,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 46223 states.
[2020-05-31 04:28:24,233 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:24,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:24,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:24,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:24,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:24,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 04:28:24,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 46223 states.
[2020-05-31 04:28:24,472 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:24,472 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:24,472 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:24,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:24,476 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND TRUE   revert
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:24,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:24,491 INFO  L82        PathProgramCache]: Analyzing trace with hash 209676271, now seen corresponding path program 1 times
[2020-05-31 04:28:24,494 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:24,512 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:24,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 04:28:24,555 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:24,555 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:24,559 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:24,569 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:24,570 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:24,571 INFO  L87              Difference]: Start difference. First operand 46223 states. Second operand 3 states.
[2020-05-31 04:28:26,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:26,667 INFO  L93              Difference]: Finished difference Result 30011 states and 79408 transitions.
[2020-05-31 04:28:26,667 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:26,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30011 states and 79408 transitions.
[2020-05-31 04:28:26,890 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:27,209 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30011 states to 30011 states and 79408 transitions.
[2020-05-31 04:28:27,210 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-31 04:28:27,211 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 62
[2020-05-31 04:28:27,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30011 states and 79408 transitions.
[2020-05-31 04:28:27,523 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:27,523 INFO  L728         BuchiCegarLoop]: Abstraction has 30011 states and 79408 transitions.
[2020-05-31 04:28:27,568 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30011 states and 79408 transitions.
[2020-05-31 04:28:27,987 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30011 to 30011.
[2020-05-31 04:28:27,988 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30011 states.
[2020-05-31 04:28:28,077 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30011 states to 30011 states and 79408 transitions.
[2020-05-31 04:28:28,078 INFO  L751         BuchiCegarLoop]: Abstraction has 30011 states and 79408 transitions.
[2020-05-31 04:28:28,078 INFO  L631         BuchiCegarLoop]: Abstraction has 30011 states and 79408 transitions.
[2020-05-31 04:28:28,078 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 04:28:28,078 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30011 states and 79408 transitions.
[2020-05-31 04:28:28,134 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:28,134 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:28,134 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:28,137 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:28,137 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND TRUE   revert
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:28,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:28,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 952335720, now seen corresponding path program 1 times
[2020-05-31 04:28:28,145 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:28,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:28,181 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 04:28:28,181 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:28,181 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:28,183 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:28,183 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:28,183 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:28,183 INFO  L87              Difference]: Start difference. First operand 30011 states and 79408 transitions. cyclomatic complexity: 49421 Second operand 3 states.
[2020-05-31 04:28:29,189 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:29,190 INFO  L93              Difference]: Finished difference Result 29081 states and 53531 transitions.
[2020-05-31 04:28:29,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:29,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29081 states and 53531 transitions.
[2020-05-31 04:28:29,276 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:29,410 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29081 states to 29081 states and 53531 transitions.
[2020-05-31 04:28:29,410 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 62
[2020-05-31 04:28:29,410 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 62
[2020-05-31 04:28:29,410 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29081 states and 53531 transitions.
[2020-05-31 04:28:29,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:29,444 INFO  L728         BuchiCegarLoop]: Abstraction has 29081 states and 53531 transitions.
[2020-05-31 04:28:29,476 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29081 states and 53531 transitions.
[2020-05-31 04:28:29,716 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29081 to 29081.
[2020-05-31 04:28:29,717 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29081 states.
[2020-05-31 04:28:29,782 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29081 states to 29081 states and 53531 transitions.
[2020-05-31 04:28:29,782 INFO  L751         BuchiCegarLoop]: Abstraction has 29081 states and 53531 transitions.
[2020-05-31 04:28:29,782 INFO  L631         BuchiCegarLoop]: Abstraction has 29081 states and 53531 transitions.
[2020-05-31 04:28:29,782 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 04:28:29,782 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29081 states and 53531 transitions.
[2020-05-31 04:28:29,822 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:29,822 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:29,823 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:29,825 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:29,826 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:29,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:29,830 INFO  L82        PathProgramCache]: Analyzing trace with hash -1615977025, now seen corresponding path program 1 times
[2020-05-31 04:28:29,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:29,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:29,880 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 04:28:29,880 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:29,880 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:29,881 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:29,881 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:29,881 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:29,881 INFO  L87              Difference]: Start difference. First operand 29081 states and 53531 transitions. cyclomatic complexity: 24474 Second operand 3 states.
[2020-05-31 04:28:30,517 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:30,517 INFO  L93              Difference]: Finished difference Result 28616 states and 37192 transitions.
[2020-05-31 04:28:30,517 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:30,517 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 28616 states and 37192 transitions.
[2020-05-31 04:28:30,583 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:30,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 28616 states to 28616 states and 37192 transitions.
[2020-05-31 04:28:30,681 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 62
[2020-05-31 04:28:30,681 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 62
[2020-05-31 04:28:30,681 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 28616 states and 37192 transitions.
[2020-05-31 04:28:30,704 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:30,704 INFO  L728         BuchiCegarLoop]: Abstraction has 28616 states and 37192 transitions.
[2020-05-31 04:28:30,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 28616 states and 37192 transitions.
[2020-05-31 04:28:30,921 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 28616 to 28616.
[2020-05-31 04:28:30,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28616 states.
[2020-05-31 04:28:30,968 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28616 states to 28616 states and 37192 transitions.
[2020-05-31 04:28:30,968 INFO  L751         BuchiCegarLoop]: Abstraction has 28616 states and 37192 transitions.
[2020-05-31 04:28:30,968 INFO  L631         BuchiCegarLoop]: Abstraction has 28616 states and 37192 transitions.
[2020-05-31 04:28:30,968 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 04:28:30,968 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28616 states and 37192 transitions.
[2020-05-31 04:28:31,000 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:31,001 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:31,001 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:31,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:31,003 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND TRUE   revert
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND TRUE   revert
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7178]               revert := true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND TRUE   !_notEntered_ReentrancyGuard[this]
[L9288]               revert := true;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND TRUE   revert
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:31,007 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:31,007 INFO  L82        PathProgramCache]: Analyzing trace with hash 1898975532, now seen corresponding path program 1 times
[2020-05-31 04:28:31,008 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:31,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:31,052 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 04:28:31,052 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:31,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:31,053 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:31,053 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:31,053 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:31,053 INFO  L87              Difference]: Start difference. First operand 28616 states and 37192 transitions. cyclomatic complexity: 8600 Second operand 3 states.
[2020-05-31 04:28:32,386 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:32,386 INFO  L93              Difference]: Finished difference Result 33000 states and 42476 transitions.
[2020-05-31 04:28:32,386 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:32,386 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 33000 states and 42476 transitions.
[2020-05-31 04:28:32,457 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:32,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 33000 states to 30788 states and 38358 transitions.
[2020-05-31 04:28:32,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 70
[2020-05-31 04:28:32,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 80
[2020-05-31 04:28:32,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30788 states and 38358 transitions.
[2020-05-31 04:28:32,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:32,589 INFO  L728         BuchiCegarLoop]: Abstraction has 30788 states and 38358 transitions.
[2020-05-31 04:28:32,622 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30788 states and 38358 transitions.
[2020-05-31 04:28:32,853 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30788 to 30364.
[2020-05-31 04:28:32,854 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30364 states.
[2020-05-31 04:28:32,897 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30364 states to 30364 states and 37922 transitions.
[2020-05-31 04:28:32,897 INFO  L751         BuchiCegarLoop]: Abstraction has 30364 states and 37922 transitions.
[2020-05-31 04:28:32,897 INFO  L631         BuchiCegarLoop]: Abstraction has 30364 states and 37922 transitions.
[2020-05-31 04:28:32,897 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 04:28:32,897 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30364 states and 37922 transitions.
[2020-05-31 04:28:32,930 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 765
[2020-05-31 04:28:32,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:32,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:32,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:32,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:32,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:32,943 INFO  L82        PathProgramCache]: Analyzing trace with hash 1906582385, now seen corresponding path program 1 times
[2020-05-31 04:28:32,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:32,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:33,185 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 04:28:33,185 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:33,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:33,186 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:33,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:33,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:33,187 INFO  L87              Difference]: Start difference. First operand 30364 states and 37922 transitions. cyclomatic complexity: 7582 Second operand 3 states.
[2020-05-31 04:28:33,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:33,607 INFO  L93              Difference]: Finished difference Result 30612 states and 38250 transitions.
[2020-05-31 04:28:33,607 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:33,607 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30612 states and 38250 transitions.
[2020-05-31 04:28:33,676 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 788
[2020-05-31 04:28:33,788 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30612 states to 30612 states and 38250 transitions.
[2020-05-31 04:28:33,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 71
[2020-05-31 04:28:33,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 71
[2020-05-31 04:28:33,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30612 states and 38250 transitions.
[2020-05-31 04:28:33,814 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:33,814 INFO  L728         BuchiCegarLoop]: Abstraction has 30612 states and 38250 transitions.
[2020-05-31 04:28:33,845 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30612 states and 38250 transitions.
[2020-05-31 04:28:34,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30612 to 30572.
[2020-05-31 04:28:34,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30572 states.
[2020-05-31 04:28:34,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30572 states to 30572 states and 38138 transitions.
[2020-05-31 04:28:34,118 INFO  L751         BuchiCegarLoop]: Abstraction has 30572 states and 38138 transitions.
[2020-05-31 04:28:34,118 INFO  L631         BuchiCegarLoop]: Abstraction has 30572 states and 38138 transitions.
[2020-05-31 04:28:34,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 04:28:34,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30572 states and 38138 transitions.
[2020-05-31 04:28:34,152 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 788
[2020-05-31 04:28:34,152 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:34,152 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:34,156 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:34,156 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND TRUE   DType[this] == TimedCrowdsale
[L6420]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6420]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6421]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND TRUE   DType[this] == TimedCrowdsale
[L6482]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6482]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6483]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND TRUE   DType[this] == TimedCrowdsale
[L6482]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6482]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6483]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:34,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:34,164 INFO  L82        PathProgramCache]: Analyzing trace with hash -1643109554, now seen corresponding path program 1 times
[2020-05-31 04:28:34,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:34,190 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:34,485 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 04:28:34,485 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:34,485 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:34,486 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:34,486 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:34,486 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:34,486 INFO  L87              Difference]: Start difference. First operand 30572 states and 38138 transitions. cyclomatic complexity: 7590 Second operand 3 states.
[2020-05-31 04:28:34,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:34,781 INFO  L93              Difference]: Finished difference Result 31020 states and 38746 transitions.
[2020-05-31 04:28:34,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:34,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31020 states and 38746 transitions.
[2020-05-31 04:28:34,842 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 829
[2020-05-31 04:28:34,945 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31020 states to 31020 states and 38746 transitions.
[2020-05-31 04:28:34,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 71
[2020-05-31 04:28:34,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 71
[2020-05-31 04:28:34,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31020 states and 38746 transitions.
[2020-05-31 04:28:34,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:34,972 INFO  L728         BuchiCegarLoop]: Abstraction has 31020 states and 38746 transitions.
[2020-05-31 04:28:35,004 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31020 states and 38746 transitions.
[2020-05-31 04:28:35,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31020 to 30956.
[2020-05-31 04:28:35,204 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30956 states.
[2020-05-31 04:28:35,249 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30956 states to 30956 states and 38602 transitions.
[2020-05-31 04:28:35,249 INFO  L751         BuchiCegarLoop]: Abstraction has 30956 states and 38602 transitions.
[2020-05-31 04:28:35,249 INFO  L631         BuchiCegarLoop]: Abstraction has 30956 states and 38602 transitions.
[2020-05-31 04:28:35,249 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 04:28:35,249 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30956 states and 38602 transitions.
[2020-05-31 04:28:35,283 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 829
[2020-05-31 04:28:35,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:35,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:35,287 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:35,287 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6415]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6415]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6416]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6451]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6451]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6452]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6477]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6477]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6478]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6501]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6501]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6502]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6526]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6526]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6527]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:35,295 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:35,295 INFO  L82        PathProgramCache]: Analyzing trace with hash 1562714313, now seen corresponding path program 1 times
[2020-05-31 04:28:35,295 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:35,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:35,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 04:28:35,512 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:35,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:28:35,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:35,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:28:35,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:28:35,514 INFO  L87              Difference]: Start difference. First operand 30956 states and 38602 transitions. cyclomatic complexity: 7670 Second operand 3 states.
[2020-05-31 04:28:35,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:35,849 INFO  L93              Difference]: Finished difference Result 31148 states and 38802 transitions.
[2020-05-31 04:28:35,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:28:35,850 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31148 states and 38802 transitions.
[2020-05-31 04:28:35,914 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:28:36,017 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31148 states to 31148 states and 38802 transitions.
[2020-05-31 04:28:36,017 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 71
[2020-05-31 04:28:36,017 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 71
[2020-05-31 04:28:36,017 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31148 states and 38802 transitions.
[2020-05-31 04:28:36,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:36,043 INFO  L728         BuchiCegarLoop]: Abstraction has 31148 states and 38802 transitions.
[2020-05-31 04:28:36,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31148 states and 38802 transitions.
[2020-05-31 04:28:36,268 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31148 to 31108.
[2020-05-31 04:28:36,268 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31108 states.
[2020-05-31 04:28:36,317 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31108 states to 31108 states and 38690 transitions.
[2020-05-31 04:28:36,317 INFO  L751         BuchiCegarLoop]: Abstraction has 31108 states and 38690 transitions.
[2020-05-31 04:28:36,317 INFO  L631         BuchiCegarLoop]: Abstraction has 31108 states and 38690 transitions.
[2020-05-31 04:28:36,317 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 04:28:36,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31108 states and 38690 transitions.
[2020-05-31 04:28:36,352 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:28:36,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:36,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:36,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:36,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:36,365 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:36,365 INFO  L82        PathProgramCache]: Analyzing trace with hash 1987441625, now seen corresponding path program 1 times
[2020-05-31 04:28:36,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:36,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:36,634 INFO  L134       CoverageAnalysis]: Checked inductivity of 678 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 642 trivial. 0 not checked.
[2020-05-31 04:28:36,634 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:28:36,634 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 04:28:36,635 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:36,635 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 04:28:36,635 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 04:28:36,635 INFO  L87              Difference]: Start difference. First operand 31108 states and 38690 transitions. cyclomatic complexity: 7606 Second operand 6 states.
[2020-05-31 04:28:37,075 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:28:37,075 INFO  L93              Difference]: Finished difference Result 31129 states and 38715 transitions.
[2020-05-31 04:28:37,075 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 04:28:37,076 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31129 states and 38715 transitions.
[2020-05-31 04:28:37,143 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:28:37,247 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31129 states to 31116 states and 38699 transitions.
[2020-05-31 04:28:37,247 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 71
[2020-05-31 04:28:37,247 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 71
[2020-05-31 04:28:37,247 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31116 states and 38699 transitions.
[2020-05-31 04:28:37,272 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:28:37,272 INFO  L728         BuchiCegarLoop]: Abstraction has 31116 states and 38699 transitions.
[2020-05-31 04:28:37,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31116 states and 38699 transitions.
[2020-05-31 04:28:37,492 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31116 to 31116.
[2020-05-31 04:28:37,492 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31116 states.
[2020-05-31 04:28:37,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31116 states to 31116 states and 38699 transitions.
[2020-05-31 04:28:37,540 INFO  L751         BuchiCegarLoop]: Abstraction has 31116 states and 38699 transitions.
[2020-05-31 04:28:37,540 INFO  L631         BuchiCegarLoop]: Abstraction has 31116 states and 38699 transitions.
[2020-05-31 04:28:37,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 04:28:37,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31116 states and 38699 transitions.
[2020-05-31 04:28:37,575 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:28:37,576 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:28:37,576 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:28:37,579 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:28:37,579 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND TRUE   revert
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:28:37,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:28:37,587 INFO  L82        PathProgramCache]: Analyzing trace with hash -1300367486, now seen corresponding path program 1 times
[2020-05-31 04:28:37,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:28:37,613 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:28:37,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 04:28:37,798 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:28:37,798 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:28:37,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:28:37,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:28:37,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:28:37,798 INFO  L87              Difference]: Start difference. First operand 31116 states and 38699 transitions. cyclomatic complexity: 7607 Second operand 4 states.
[2020-05-31 04:29:13,166 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:13,166 INFO  L93              Difference]: Finished difference Result 31511 states and 37868 transitions.
[2020-05-31 04:29:13,166 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:29:13,166 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31511 states and 37868 transitions.
[2020-05-31 04:29:13,251 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:13,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31511 states to 31511 states and 37868 transitions.
[2020-05-31 04:29:13,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 65
[2020-05-31 04:29:13,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 65
[2020-05-31 04:29:13,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31511 states and 37868 transitions.
[2020-05-31 04:29:13,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:13,407 INFO  L728         BuchiCegarLoop]: Abstraction has 31511 states and 37868 transitions.
[2020-05-31 04:29:13,450 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31511 states and 37868 transitions.
[2020-05-31 04:29:13,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31511 to 30930.
[2020-05-31 04:29:13,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30930 states.
[2020-05-31 04:29:13,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30930 states to 30930 states and 37232 transitions.
[2020-05-31 04:29:13,815 INFO  L751         BuchiCegarLoop]: Abstraction has 30930 states and 37232 transitions.
[2020-05-31 04:29:13,815 INFO  L631         BuchiCegarLoop]: Abstraction has 30930 states and 37232 transitions.
[2020-05-31 04:29:13,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 04:29:13,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30930 states and 37232 transitions.
[2020-05-31 04:29:13,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:13,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:13,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:13,869 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:13,869 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:13,877 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:13,877 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050966461, now seen corresponding path program 1 times
[2020-05-31 04:29:13,877 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:13,909 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:14,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 04:29:14,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:14,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:29:14,191 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:14,191 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:29:14,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:29:14,191 INFO  L87              Difference]: Start difference. First operand 30930 states and 37232 transitions. cyclomatic complexity: 6326 Second operand 4 states.
[2020-05-31 04:29:14,442 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:14,442 INFO  L93              Difference]: Finished difference Result 31010 states and 37324 transitions.
[2020-05-31 04:29:14,442 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:29:14,442 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31010 states and 37324 transitions.
[2020-05-31 04:29:14,502 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:14,600 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31010 states to 30994 states and 37308 transitions.
[2020-05-31 04:29:14,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:14,600 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:14,600 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30994 states and 37308 transitions.
[2020-05-31 04:29:14,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:14,626 INFO  L728         BuchiCegarLoop]: Abstraction has 30994 states and 37308 transitions.
[2020-05-31 04:29:14,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30994 states and 37308 transitions.
[2020-05-31 04:29:14,853 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30994 to 30994.
[2020-05-31 04:29:14,854 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 30994 states.
[2020-05-31 04:29:14,901 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 30994 states to 30994 states and 37308 transitions.
[2020-05-31 04:29:14,902 INFO  L751         BuchiCegarLoop]: Abstraction has 30994 states and 37308 transitions.
[2020-05-31 04:29:14,902 INFO  L631         BuchiCegarLoop]: Abstraction has 30994 states and 37308 transitions.
[2020-05-31 04:29:14,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 04:29:14,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 30994 states and 37308 transitions.
[2020-05-31 04:29:14,936 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:14,936 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:14,936 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:14,939 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:14,939 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:14,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:14,947 INFO  L82        PathProgramCache]: Analyzing trace with hash 2071057158, now seen corresponding path program 1 times
[2020-05-31 04:29:14,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:14,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:15,142 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 04:29:15,142 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:15,142 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:29:15,143 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:15,143 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:29:15,143 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:29:15,143 INFO  L87              Difference]: Start difference. First operand 30994 states and 37308 transitions. cyclomatic complexity: 6338 Second operand 3 states.
[2020-05-31 04:29:15,388 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:15,388 INFO  L93              Difference]: Finished difference Result 31042 states and 37372 transitions.
[2020-05-31 04:29:15,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:29:15,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31042 states and 37372 transitions.
[2020-05-31 04:29:15,453 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:15,550 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31042 states to 31042 states and 37372 transitions.
[2020-05-31 04:29:15,550 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:15,550 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:15,550 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31042 states and 37372 transitions.
[2020-05-31 04:29:15,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:15,576 INFO  L728         BuchiCegarLoop]: Abstraction has 31042 states and 37372 transitions.
[2020-05-31 04:29:15,606 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31042 states and 37372 transitions.
[2020-05-31 04:29:15,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31042 to 31018.
[2020-05-31 04:29:15,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31018 states.
[2020-05-31 04:29:15,848 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31018 states to 31018 states and 37332 transitions.
[2020-05-31 04:29:15,848 INFO  L751         BuchiCegarLoop]: Abstraction has 31018 states and 37332 transitions.
[2020-05-31 04:29:15,848 INFO  L631         BuchiCegarLoop]: Abstraction has 31018 states and 37332 transitions.
[2020-05-31 04:29:15,848 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 04:29:15,848 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31018 states and 37332 transitions.
[2020-05-31 04:29:15,882 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:15,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:15,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:15,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:15,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:15,892 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:15,893 INFO  L82        PathProgramCache]: Analyzing trace with hash -1587870241, now seen corresponding path program 1 times
[2020-05-31 04:29:15,893 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:15,917 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:16,197 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 04:29:16,198 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:16,198 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 04:29:16,198 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:16,198 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 04:29:16,199 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 04:29:16,199 INFO  L87              Difference]: Start difference. First operand 31018 states and 37332 transitions. cyclomatic complexity: 6338 Second operand 6 states.
[2020-05-31 04:29:16,956 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:16,957 INFO  L93              Difference]: Finished difference Result 31258 states and 37680 transitions.
[2020-05-31 04:29:16,957 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 04:29:16,957 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31258 states and 37680 transitions.
[2020-05-31 04:29:17,022 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:17,124 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31258 states to 31058 states and 37436 transitions.
[2020-05-31 04:29:17,124 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:17,124 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:17,124 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31058 states and 37436 transitions.
[2020-05-31 04:29:17,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:17,152 INFO  L728         BuchiCegarLoop]: Abstraction has 31058 states and 37436 transitions.
[2020-05-31 04:29:17,185 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31058 states and 37436 transitions.
[2020-05-31 04:29:17,394 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31058 to 31058.
[2020-05-31 04:29:17,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31058 states.
[2020-05-31 04:29:17,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31058 states to 31058 states and 37436 transitions.
[2020-05-31 04:29:17,444 INFO  L751         BuchiCegarLoop]: Abstraction has 31058 states and 37436 transitions.
[2020-05-31 04:29:17,444 INFO  L631         BuchiCegarLoop]: Abstraction has 31058 states and 37436 transitions.
[2020-05-31 04:29:17,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 04:29:17,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31058 states and 37436 transitions.
[2020-05-31 04:29:17,478 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:17,479 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:17,479 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:17,481 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:17,481 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9330]   COND TRUE   DType[this] == FinalizableCrowdsale
[L9331]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9331]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6983]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6983]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6984]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:17,487 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:17,487 INFO  L82        PathProgramCache]: Analyzing trace with hash 1794603189, now seen corresponding path program 1 times
[2020-05-31 04:29:17,488 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:17,502 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:17,694 INFO  L134       CoverageAnalysis]: Checked inductivity of 723 backedges. 0 proven. 39 refuted. 0 times theorem prover too weak. 684 trivial. 0 not checked.
[2020-05-31 04:29:17,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:29:17,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 04:29:17,695 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:17,695 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 04:29:17,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 04:29:17,695 INFO  L87              Difference]: Start difference. First operand 31058 states and 37436 transitions. cyclomatic complexity: 6402 Second operand 6 states.
[2020-05-31 04:29:18,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:18,091 INFO  L93              Difference]: Finished difference Result 31080 states and 37462 transitions.
[2020-05-31 04:29:18,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 04:29:18,092 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31080 states and 37462 transitions.
[2020-05-31 04:29:18,155 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:18,252 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31080 states to 31067 states and 37446 transitions.
[2020-05-31 04:29:18,253 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:18,253 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:18,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31067 states and 37446 transitions.
[2020-05-31 04:29:18,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:18,279 INFO  L728         BuchiCegarLoop]: Abstraction has 31067 states and 37446 transitions.
[2020-05-31 04:29:18,311 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31067 states and 37446 transitions.
[2020-05-31 04:29:18,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31067 to 31067.
[2020-05-31 04:29:18,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31067 states.
[2020-05-31 04:29:18,555 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31067 states to 31067 states and 37446 transitions.
[2020-05-31 04:29:18,555 INFO  L751         BuchiCegarLoop]: Abstraction has 31067 states and 37446 transitions.
[2020-05-31 04:29:18,555 INFO  L631         BuchiCegarLoop]: Abstraction has 31067 states and 37446 transitions.
[2020-05-31 04:29:18,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 04:29:18,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31067 states and 37446 transitions.
[2020-05-31 04:29:18,589 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:18,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:18,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:18,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:18,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9330]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L9335]   COND TRUE   DType[this] == TimedCrowdsale
[L9336]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9336]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9337]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6983]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6983]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6984]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:18,598 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:18,598 INFO  L82        PathProgramCache]: Analyzing trace with hash 703047448, now seen corresponding path program 1 times
[2020-05-31 04:29:18,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:18,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:18,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 708 backedges. 9 proven. 33 refuted. 0 times theorem prover too weak. 666 trivial. 0 not checked.
[2020-05-31 04:29:18,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:29:18,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 04:29:18,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:18,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 04:29:18,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 04:29:18,958 INFO  L87              Difference]: Start difference. First operand 31067 states and 37446 transitions. cyclomatic complexity: 6403 Second operand 7 states.
[2020-05-31 04:29:19,406 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:19,407 INFO  L93              Difference]: Finished difference Result 31084 states and 37466 transitions.
[2020-05-31 04:29:19,407 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 04:29:19,407 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31084 states and 37466 transitions.
[2020-05-31 04:29:19,470 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:19,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31084 states to 31074 states and 37454 transitions.
[2020-05-31 04:29:19,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:19,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:19,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31074 states and 37454 transitions.
[2020-05-31 04:29:19,599 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:19,599 INFO  L728         BuchiCegarLoop]: Abstraction has 31074 states and 37454 transitions.
[2020-05-31 04:29:19,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31074 states and 37454 transitions.
[2020-05-31 04:29:19,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31074 to 31074.
[2020-05-31 04:29:19,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31074 states.
[2020-05-31 04:29:19,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31074 states to 31074 states and 37454 transitions.
[2020-05-31 04:29:19,880 INFO  L751         BuchiCegarLoop]: Abstraction has 31074 states and 37454 transitions.
[2020-05-31 04:29:19,880 INFO  L631         BuchiCegarLoop]: Abstraction has 31074 states and 37454 transitions.
[2020-05-31 04:29:19,880 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 04:29:19,880 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31074 states and 37454 transitions.
[2020-05-31 04:29:19,915 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:19,915 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:19,915 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:19,918 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:19,918 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND FALSE  !(DType[this] == RefundEscrow)
[L4760]   COND TRUE   DType[this] == ConditionalEscrow
[L4761]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4761]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4762]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6983]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6983]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6984]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:19,924 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:19,924 INFO  L82        PathProgramCache]: Analyzing trace with hash -1280510421, now seen corresponding path program 1 times
[2020-05-31 04:29:19,925 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:19,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:20,139 INFO  L134       CoverageAnalysis]: Checked inductivity of 705 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 671 trivial. 0 not checked.
[2020-05-31 04:29:20,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:20,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 04:29:20,140 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:20,140 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 04:29:20,140 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 04:29:20,140 INFO  L87              Difference]: Start difference. First operand 31074 states and 37454 transitions. cyclomatic complexity: 6404 Second operand 8 states.
[2020-05-31 04:29:20,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:20,654 INFO  L93              Difference]: Finished difference Result 31106 states and 37492 transitions.
[2020-05-31 04:29:20,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 04:29:20,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31106 states and 37492 transitions.
[2020-05-31 04:29:20,718 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:20,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31106 states to 31043 states and 37415 transitions.
[2020-05-31 04:29:20,816 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:20,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:20,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31043 states and 37415 transitions.
[2020-05-31 04:29:20,842 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:20,843 INFO  L728         BuchiCegarLoop]: Abstraction has 31043 states and 37415 transitions.
[2020-05-31 04:29:20,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31043 states and 37415 transitions.
[2020-05-31 04:29:21,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31043 to 31043.
[2020-05-31 04:29:21,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31043 states.
[2020-05-31 04:29:21,122 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31043 states to 31043 states and 37415 transitions.
[2020-05-31 04:29:21,122 INFO  L751         BuchiCegarLoop]: Abstraction has 31043 states and 37415 transitions.
[2020-05-31 04:29:21,122 INFO  L631         BuchiCegarLoop]: Abstraction has 31043 states and 37415 transitions.
[2020-05-31 04:29:21,122 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 04:29:21,122 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31043 states and 37415 transitions.
[2020-05-31 04:29:21,155 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 849
[2020-05-31 04:29:21,156 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:21,156 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:21,158 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:21,158 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7239]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7240]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7241]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9330]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L9335]   COND TRUE   DType[this] == TimedCrowdsale
[L9336]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9336]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9337]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6987]   COND TRUE   DType[this] == TimedCrowdsale
[L6988]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6988]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6989]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:21,163 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:21,163 INFO  L82        PathProgramCache]: Analyzing trace with hash 146399611, now seen corresponding path program 1 times
[2020-05-31 04:29:21,163 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:21,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:21,452 INFO  L134       CoverageAnalysis]: Checked inductivity of 717 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 717 trivial. 0 not checked.
[2020-05-31 04:29:21,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:21,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 04:29:21,453 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:21,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 04:29:21,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 04:29:21,453 INFO  L87              Difference]: Start difference. First operand 31043 states and 37415 transitions. cyclomatic complexity: 6396 Second operand 6 states.
[2020-05-31 04:29:21,976 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:21,976 INFO  L93              Difference]: Finished difference Result 31283 states and 37715 transitions.
[2020-05-31 04:29:21,976 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 04:29:21,976 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31283 states and 37715 transitions.
[2020-05-31 04:29:22,041 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 842
[2020-05-31 04:29:22,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31283 states to 31067 states and 37439 transitions.
[2020-05-31 04:29:22,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:22,143 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:22,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31067 states and 37439 transitions.
[2020-05-31 04:29:22,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:22,170 INFO  L728         BuchiCegarLoop]: Abstraction has 31067 states and 37439 transitions.
[2020-05-31 04:29:22,203 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31067 states and 37439 transitions.
[2020-05-31 04:29:22,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31067 to 31067.
[2020-05-31 04:29:22,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31067 states.
[2020-05-31 04:29:22,460 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31067 states to 31067 states and 37439 transitions.
[2020-05-31 04:29:22,460 INFO  L751         BuchiCegarLoop]: Abstraction has 31067 states and 37439 transitions.
[2020-05-31 04:29:22,460 INFO  L631         BuchiCegarLoop]: Abstraction has 31067 states and 37439 transitions.
[2020-05-31 04:29:22,460 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 04:29:22,460 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31067 states and 37439 transitions.
[2020-05-31 04:29:22,497 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 842
[2020-05-31 04:29:22,497 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:22,497 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:22,499 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:22,499 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6982]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6983]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6983]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6984]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:22,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:22,506 INFO  L82        PathProgramCache]: Analyzing trace with hash 2057529741, now seen corresponding path program 1 times
[2020-05-31 04:29:22,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:22,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:22,776 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:22,776 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:22,776 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 04:29:22,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:22,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 04:29:22,777 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 04:29:22,777 INFO  L87              Difference]: Start difference. First operand 31067 states and 37439 transitions. cyclomatic complexity: 6396 Second operand 7 states.
[2020-05-31 04:29:23,692 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:23,693 INFO  L93              Difference]: Finished difference Result 31171 states and 37551 transitions.
[2020-05-31 04:29:23,693 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:29:23,693 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31171 states and 37551 transitions.
[2020-05-31 04:29:23,759 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 848
[2020-05-31 04:29:23,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31171 states to 31171 states and 37551 transitions.
[2020-05-31 04:29:23,858 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:23,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:23,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31171 states and 37551 transitions.
[2020-05-31 04:29:23,884 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:23,884 INFO  L728         BuchiCegarLoop]: Abstraction has 31171 states and 37551 transitions.
[2020-05-31 04:29:23,916 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31171 states and 37551 transitions.
[2020-05-31 04:29:24,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31171 to 31139.
[2020-05-31 04:29:24,115 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31139 states.
[2020-05-31 04:29:24,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31139 states to 31139 states and 37519 transitions.
[2020-05-31 04:29:24,162 INFO  L751         BuchiCegarLoop]: Abstraction has 31139 states and 37519 transitions.
[2020-05-31 04:29:24,162 INFO  L631         BuchiCegarLoop]: Abstraction has 31139 states and 37519 transitions.
[2020-05-31 04:29:24,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 04:29:24,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31139 states and 37519 transitions.
[2020-05-31 04:29:24,197 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 844
[2020-05-31 04:29:24,197 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:24,197 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:24,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:24,200 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L9330]   COND TRUE   DType[this] == FinalizableCrowdsale
[L9331]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9331]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:24,206 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:24,206 INFO  L82        PathProgramCache]: Analyzing trace with hash 2123562847, now seen corresponding path program 1 times
[2020-05-31 04:29:24,206 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:24,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:24,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:24,610 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:24,610 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-31 04:29:24,611 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:24,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 04:29:24,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 04:29:24,611 INFO  L87              Difference]: Start difference. First operand 31139 states and 37519 transitions. cyclomatic complexity: 6404 Second operand 8 states.
[2020-05-31 04:29:25,506 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:25,506 INFO  L93              Difference]: Finished difference Result 31211 states and 37591 transitions.
[2020-05-31 04:29:25,507 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 04:29:25,507 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31211 states and 37591 transitions.
[2020-05-31 04:29:25,570 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 844
[2020-05-31 04:29:25,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31211 states to 31211 states and 37591 transitions.
[2020-05-31 04:29:25,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:25,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:25,669 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31211 states and 37591 transitions.
[2020-05-31 04:29:25,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:25,696 INFO  L728         BuchiCegarLoop]: Abstraction has 31211 states and 37591 transitions.
[2020-05-31 04:29:25,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31211 states and 37591 transitions.
[2020-05-31 04:29:25,928 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31211 to 31179.
[2020-05-31 04:29:25,929 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31179 states.
[2020-05-31 04:29:25,976 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31179 states to 31179 states and 37559 transitions.
[2020-05-31 04:29:25,976 INFO  L751         BuchiCegarLoop]: Abstraction has 31179 states and 37559 transitions.
[2020-05-31 04:29:25,976 INFO  L631         BuchiCegarLoop]: Abstraction has 31179 states and 37559 transitions.
[2020-05-31 04:29:25,976 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 04:29:25,977 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31179 states and 37559 transitions.
[2020-05-31 04:29:26,011 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 844
[2020-05-31 04:29:26,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:26,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:26,014 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:26,014 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:26,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:26,020 INFO  L82        PathProgramCache]: Analyzing trace with hash -1155504877, now seen corresponding path program 1 times
[2020-05-31 04:29:26,020 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:26,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:26,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:26,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:26,276 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 04:29:26,276 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:26,276 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 04:29:26,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 04:29:26,277 INFO  L87              Difference]: Start difference. First operand 31179 states and 37559 transitions. cyclomatic complexity: 6404 Second operand 7 states.
[2020-05-31 04:29:27,647 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:27,647 INFO  L93              Difference]: Finished difference Result 31299 states and 37679 transitions.
[2020-05-31 04:29:27,648 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:29:27,648 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31299 states and 37679 transitions.
[2020-05-31 04:29:27,721 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 854
[2020-05-31 04:29:27,822 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31299 states to 31299 states and 37679 transitions.
[2020-05-31 04:29:27,823 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 66
[2020-05-31 04:29:27,823 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 66
[2020-05-31 04:29:27,823 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31299 states and 37679 transitions.
[2020-05-31 04:29:27,850 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:27,850 INFO  L728         BuchiCegarLoop]: Abstraction has 31299 states and 37679 transitions.
[2020-05-31 04:29:27,883 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31299 states and 37679 transitions.
[2020-05-31 04:29:28,088 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31299 to 31235.
[2020-05-31 04:29:28,089 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31235 states.
[2020-05-31 04:29:28,136 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31235 states to 31235 states and 37615 transitions.
[2020-05-31 04:29:28,136 INFO  L751         BuchiCegarLoop]: Abstraction has 31235 states and 37615 transitions.
[2020-05-31 04:29:28,137 INFO  L631         BuchiCegarLoop]: Abstraction has 31235 states and 37615 transitions.
[2020-05-31 04:29:28,137 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 04:29:28,137 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31235 states and 37615 transitions.
[2020-05-31 04:29:28,171 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:28,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:28,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:28,174 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:28,174 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:28,180 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:28,180 INFO  L82        PathProgramCache]: Analyzing trace with hash 817805691, now seen corresponding path program 1 times
[2020-05-31 04:29:28,181 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:28,202 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:28,521 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:28,521 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:28,522 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-05-31 04:29:28,522 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:28,522 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 04:29:28,522 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 04:29:28,523 INFO  L87              Difference]: Start difference. First operand 31235 states and 37615 transitions. cyclomatic complexity: 6404 Second operand 14 states.
[2020-05-31 04:29:29,878 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:29,879 INFO  L93              Difference]: Finished difference Result 31671 states and 38209 transitions.
[2020-05-31 04:29:29,879 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 04:29:29,879 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31671 states and 38209 transitions.
[2020-05-31 04:29:29,945 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:30,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31671 states to 31671 states and 38209 transitions.
[2020-05-31 04:29:30,049 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 80
[2020-05-31 04:29:30,049 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 80
[2020-05-31 04:29:30,049 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31671 states and 38209 transitions.
[2020-05-31 04:29:30,077 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:30,077 INFO  L728         BuchiCegarLoop]: Abstraction has 31671 states and 38209 transitions.
[2020-05-31 04:29:30,110 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31671 states and 38209 transitions.
[2020-05-31 04:29:30,319 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31671 to 31671.
[2020-05-31 04:29:30,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31671 states.
[2020-05-31 04:29:30,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31671 states to 31671 states and 38209 transitions.
[2020-05-31 04:29:30,369 INFO  L751         BuchiCegarLoop]: Abstraction has 31671 states and 38209 transitions.
[2020-05-31 04:29:30,369 INFO  L631         BuchiCegarLoop]: Abstraction has 31671 states and 38209 transitions.
[2020-05-31 04:29:30,369 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 04:29:30,369 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31671 states and 38209 transitions.
[2020-05-31 04:29:30,403 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:30,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:30,404 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:30,406 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:30,406 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:30,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:30,412 INFO  L82        PathProgramCache]: Analyzing trace with hash -301587769, now seen corresponding path program 1 times
[2020-05-31 04:29:30,413 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:30,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:30,664 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:30,664 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:30,664 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 04:29:30,665 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:30,665 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 04:29:30,665 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 04:29:30,665 INFO  L87              Difference]: Start difference. First operand 31671 states and 38209 transitions. cyclomatic complexity: 6570 Second operand 5 states.
[2020-05-31 04:29:31,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:31,148 INFO  L93              Difference]: Finished difference Result 31871 states and 38489 transitions.
[2020-05-31 04:29:31,148 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:29:31,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31871 states and 38489 transitions.
[2020-05-31 04:29:31,214 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:31,317 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31871 states to 31871 states and 38489 transitions.
[2020-05-31 04:29:31,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 80
[2020-05-31 04:29:31,317 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 80
[2020-05-31 04:29:31,317 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31871 states and 38489 transitions.
[2020-05-31 04:29:31,346 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:31,346 INFO  L728         BuchiCegarLoop]: Abstraction has 31871 states and 38489 transitions.
[2020-05-31 04:29:31,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31871 states and 38489 transitions.
[2020-05-31 04:29:31,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31871 to 31855.
[2020-05-31 04:29:31,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31855 states.
[2020-05-31 04:29:31,637 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31855 states to 31855 states and 38449 transitions.
[2020-05-31 04:29:31,637 INFO  L751         BuchiCegarLoop]: Abstraction has 31855 states and 38449 transitions.
[2020-05-31 04:29:31,637 INFO  L631         BuchiCegarLoop]: Abstraction has 31855 states and 38449 transitions.
[2020-05-31 04:29:31,637 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 04:29:31,637 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31855 states and 38449 transitions.
[2020-05-31 04:29:31,672 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:31,672 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:31,672 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:31,674 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:31,674 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND FALSE  !(__tmp__DType[this] == RefundEscrow)
[L4725]   COND TRUE   __tmp__DType[this] == ConditionalEscrow
[L4726]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4726]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:31,681 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:31,681 INFO  L82        PathProgramCache]: Analyzing trace with hash -1124789301, now seen corresponding path program 1 times
[2020-05-31 04:29:31,681 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:31,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:31,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 701 backedges. 8 proven. 31 refuted. 0 times theorem prover too weak. 662 trivial. 0 not checked.
[2020-05-31 04:29:31,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:29:31,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 04:29:31,969 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:31,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 04:29:31,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 04:29:31,969 INFO  L87              Difference]: Start difference. First operand 31855 states and 38449 transitions. cyclomatic complexity: 6626 Second operand 7 states.
[2020-05-31 04:29:32,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:32,508 INFO  L93              Difference]: Finished difference Result 31872 states and 38469 transitions.
[2020-05-31 04:29:32,508 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 04:29:32,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31872 states and 38469 transitions.
[2020-05-31 04:29:32,573 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:32,675 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31872 states to 31862 states and 38457 transitions.
[2020-05-31 04:29:32,675 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 80
[2020-05-31 04:29:32,675 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 80
[2020-05-31 04:29:32,675 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 31862 states and 38457 transitions.
[2020-05-31 04:29:32,703 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:32,703 INFO  L728         BuchiCegarLoop]: Abstraction has 31862 states and 38457 transitions.
[2020-05-31 04:29:32,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 31862 states and 38457 transitions.
[2020-05-31 04:29:32,947 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 31862 to 31862.
[2020-05-31 04:29:32,947 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 31862 states.
[2020-05-31 04:29:32,997 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 31862 states to 31862 states and 38457 transitions.
[2020-05-31 04:29:32,997 INFO  L751         BuchiCegarLoop]: Abstraction has 31862 states and 38457 transitions.
[2020-05-31 04:29:32,997 INFO  L631         BuchiCegarLoop]: Abstraction has 31862 states and 38457 transitions.
[2020-05-31 04:29:32,997 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 04:29:32,997 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 31862 states and 38457 transitions.
[2020-05-31 04:29:33,032 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 848
[2020-05-31 04:29:33,033 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:33,033 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:33,035 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:33,035 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND TRUE   __exception
[L2591]               __tmp__Balance := Balance;
[L2592]               __tmp__DType := DType;
[L2593]               __tmp__Alloc := Alloc;
[L2594]               __tmp__balance_ADDR := balance_ADDR;
[L2595]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2596]               __tmp__sum__deposits0 := sum__deposits0;
[L2597]               __tmp__Length := Length;
[L2598]               __tmp__now := now;
[L2599]               __tmp___primary_Secondary := _primary_Secondary;
[L2600]               __tmp___deposits_Escrow := _deposits_Escrow;
[L2601]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2602]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2603]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2604]               __tmp___token_Crowdsale := _token_Crowdsale;
[L2605]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2606]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2607]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2608]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2609]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2610]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2611]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2612]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2613]   CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7340]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7340]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7341]   COND FALSE  !(revert)
[L7344]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7344]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L7092]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5876]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5857]               assume msgsender_MSG != null;
[L5858]               __tmp__Balance[this] := 0;
[L5859]               __tmp___notEntered_ReentrancyGuard[this] := false;
[L5861]               __tmp___notEntered_ReentrancyGuard[this] := true;
[L5876]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5877]   COND FALSE  !(revert)
[L7096]   RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7073]               assume msgsender_MSG != null;
[L7074]               __tmp__Balance[this] := 0;
[L7075]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7077]               __tmp___finalized_FinalizableCrowdsale[this] := false;
[L7100]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7348]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7263]               assume msgsender_MSG != null;
[L7264]               __tmp__Balance[this] := 0;
[L7265]               __tmp___goal_RefundableCrowdsale[this] := 0;
[L7267]               assume goal_s1187 >= 0;
[L7268]   COND FALSE  !(!(goal_s1187 > 0))
[L7272]   CALL        call __var_43 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L7272]   RET         call __var_43 := FreshRefGenerator__fail();
[L7273]   COND FALSE  !(revert)
[L7276]   COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7277]   CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6128]               gas := gas - 3;
[L6129]               gas := gas - 244;
[L6130]               __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7277]   RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7278]   COND FALSE  !(revert)
[L7284]               assume __tmp__DType[__var_43] == RefundEscrow;
[L7285]   CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5329]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5329]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5330]   COND FALSE  !(revert)
[L5333]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5333]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5334]   COND FALSE  !(revert)
[L5337]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5337]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5338]   COND FALSE  !(revert)
[L5341]   CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5186]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L5186]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5187]   COND FALSE  !(revert)
[L5190]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L5190]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5191]   COND FALSE  !(revert)
[L5194]   CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4898]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4898]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4899]   COND FALSE  !(revert)
[L4902]   CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4786]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4566]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]               assume msgsender_MSG != null;
[L4552]               __tmp__Balance[this] := 0;
[L4566]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]   COND FALSE  !(revert)
[L4786]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4787]   COND FALSE  !(revert)
[L4790]   CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4716]               assume msgsender_MSG != null;
[L4717]               __tmp__Balance[this] := 0;
[L4718]               __tmp___primary_Secondary[this] := null;
[L4720]   COND TRUE   __tmp__DType[this] == RefundEscrow
[L4721]   CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4582]               gas := gas - 9;
[L4583]               gas := gas - 21;
[L4584]               __ret_0_ := msgsender_MSG;
[L4721]   RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4722]   COND FALSE  !(revert)
[L4743]               msgSender_s90 := msgSender_s90;
[L4744]               __tmp___primary_Secondary[this] := msgSender_s90;
[L4790]   RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4791]   COND FALSE  !(revert)
[L4902]   RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4903]   COND FALSE  !(revert)
[L4906]   CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4864]               assume msgsender_MSG != null;
[L4865]               __tmp__Balance[this] := 0;
[L4867]   CALL        call __var_3 := FreshRefGenerator__fail();
[L4534]               havoc newRef;
[L4535]               assume __tmp__Alloc[newRef] == false;
[L4536]               __tmp__Alloc[newRef] := true;
[L4537]               assume newRef != null;
[L4867]   RET         call __var_3 := FreshRefGenerator__fail();
[L4868]   COND FALSE  !(revert)
[L4871]               __tmp___deposits_Escrow[this] := __var_3;
[L4873]               __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4874]               __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4906]   RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4907]   COND FALSE  !(revert)
[L5194]   RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5195]   COND FALSE  !(revert)
[L5198]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5171]               assume msgsender_MSG != null;
[L5172]               __tmp__Balance[this] := 0;
[L5198]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5199]   COND FALSE  !(revert)
[L5341]   RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5342]   COND FALSE  !(revert)
[L5345]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5296]               assume msgsender_MSG != null;
[L5297]               __tmp__Balance[this] := 0;
[L5298]               __tmp___beneficiary_RefundEscrow[this] := null;
[L5300]               __var_8 := null;
[L5301]   COND FALSE  !(!(beneficiary_s316 != null))
[L5305]               __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5306]               __tmp___state_RefundEscrow[this] := 0;
[L5345]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5346]   COND FALSE  !(revert)
[L7285]   RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7286]   COND FALSE  !(revert)
[L7289]               __var_42 := __var_43;
[L7290]               __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7291]               assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7292]               assume goal_s1187 >= 0;
[L7293]               __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7352]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7353]   COND FALSE  !(revert)
[L2613]   RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2614]               assume revert || gas < 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:33,042 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:33,042 INFO  L82        PathProgramCache]: Analyzing trace with hash -1447107953, now seen corresponding path program 1 times
[2020-05-31 04:29:33,043 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:33,065 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:33,281 INFO  L134       CoverageAnalysis]: Checked inductivity of 710 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 710 trivial. 0 not checked.
[2020-05-31 04:29:33,282 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:33,282 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:29:33,282 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:33,282 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:29:33,283 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:29:33,283 INFO  L87              Difference]: Start difference. First operand 31862 states and 38457 transitions. cyclomatic complexity: 6627 Second operand 4 states.
[2020-05-31 04:29:34,166 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:34,166 INFO  L93              Difference]: Finished difference Result 34691 states and 41603 transitions.
[2020-05-31 04:29:34,166 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:29:34,166 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34691 states and 41603 transitions.
[2020-05-31 04:29:34,239 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 848
[2020-05-31 04:29:34,352 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34691 states to 34119 states and 40453 transitions.
[2020-05-31 04:29:34,352 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 90
[2020-05-31 04:29:34,352 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 212
[2020-05-31 04:29:34,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34119 states and 40453 transitions.
[2020-05-31 04:29:34,382 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:34,382 INFO  L728         BuchiCegarLoop]: Abstraction has 34119 states and 40453 transitions.
[2020-05-31 04:29:34,417 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34119 states and 40453 transitions.
[2020-05-31 04:29:34,635 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34119 to 33068.
[2020-05-31 04:29:34,635 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33068 states.
[2020-05-31 04:29:34,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33068 states to 33068 states and 39264 transitions.
[2020-05-31 04:29:34,685 INFO  L751         BuchiCegarLoop]: Abstraction has 33068 states and 39264 transitions.
[2020-05-31 04:29:34,685 INFO  L631         BuchiCegarLoop]: Abstraction has 33068 states and 39264 transitions.
[2020-05-31 04:29:34,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 04:29:34,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33068 states and 39264 transitions.
[2020-05-31 04:29:34,722 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:34,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:34,722 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:34,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:34,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND TRUE   DType[this] == RefundEscrow
[L4983]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4983]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4984]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:34,730 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:34,731 INFO  L82        PathProgramCache]: Analyzing trace with hash -1324648560, now seen corresponding path program 1 times
[2020-05-31 04:29:34,731 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:34,755 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:34,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:34,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:34,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:29:34,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:34,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:29:34,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:29:34,969 INFO  L87              Difference]: Start difference. First operand 33068 states and 39264 transitions. cyclomatic complexity: 6220 Second operand 4 states.
[2020-05-31 04:29:35,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:29:35,303 INFO  L93              Difference]: Finished difference Result 33100 states and 39304 transitions.
[2020-05-31 04:29:35,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:29:35,303 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 33100 states and 39304 transitions.
[2020-05-31 04:29:35,374 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:35,488 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 33100 states to 33100 states and 39304 transitions.
[2020-05-31 04:29:35,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 178
[2020-05-31 04:29:35,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 178
[2020-05-31 04:29:35,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 33100 states and 39304 transitions.
[2020-05-31 04:29:35,517 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:29:35,517 INFO  L728         BuchiCegarLoop]: Abstraction has 33100 states and 39304 transitions.
[2020-05-31 04:29:35,551 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 33100 states and 39304 transitions.
[2020-05-31 04:29:35,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 33100 to 33084.
[2020-05-31 04:29:35,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33084 states.
[2020-05-31 04:29:35,926 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33084 states to 33084 states and 39288 transitions.
[2020-05-31 04:29:35,926 INFO  L751         BuchiCegarLoop]: Abstraction has 33084 states and 39288 transitions.
[2020-05-31 04:29:35,926 INFO  L631         BuchiCegarLoop]: Abstraction has 33084 states and 39288 transitions.
[2020-05-31 04:29:35,926 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 04:29:35,926 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33084 states and 39288 transitions.
[2020-05-31 04:29:35,963 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 846
[2020-05-31 04:29:35,964 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:29:35,964 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:29:35,966 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:29:35,966 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:29:35,974 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:29:35,974 INFO  L82        PathProgramCache]: Analyzing trace with hash 1186791106, now seen corresponding path program 1 times
[2020-05-31 04:29:35,974 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:29:35,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:29:36,223 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:29:36,223 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:29:36,223 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 04:29:36,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:29:36,224 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 04:29:36,224 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 04:29:36,224 INFO  L87              Difference]: Start difference. First operand 33084 states and 39288 transitions. cyclomatic complexity: 6228 Second operand 8 states.
[2020-05-31 04:30:37,352 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:30:37,352 INFO  L93              Difference]: Finished difference Result 38212 states and 45984 transitions.
[2020-05-31 04:30:37,352 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 04:30:37,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 38212 states and 45984 transitions.
[2020-05-31 04:30:37,440 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1327
[2020-05-31 04:30:37,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 38212 states to 38212 states and 45984 transitions.
[2020-05-31 04:30:37,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 220
[2020-05-31 04:30:37,561 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 220
[2020-05-31 04:30:37,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 38212 states and 45984 transitions.
[2020-05-31 04:30:37,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:30:37,594 INFO  L728         BuchiCegarLoop]: Abstraction has 38212 states and 45984 transitions.
[2020-05-31 04:30:37,628 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 38212 states and 45984 transitions.
[2020-05-31 04:30:37,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 38212 to 38064.
[2020-05-31 04:30:37,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 38064 states.
[2020-05-31 04:30:37,930 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 38064 states to 38064 states and 45768 transitions.
[2020-05-31 04:30:37,931 INFO  L751         BuchiCegarLoop]: Abstraction has 38064 states and 45768 transitions.
[2020-05-31 04:30:37,931 INFO  L631         BuchiCegarLoop]: Abstraction has 38064 states and 45768 transitions.
[2020-05-31 04:30:37,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 04:30:37,931 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 38064 states and 45768 transitions.
[2020-05-31 04:30:37,972 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1319
[2020-05-31 04:30:37,972 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:30:37,972 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:30:37,974 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:30:37,974 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:30:37,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:30:37,981 INFO  L82        PathProgramCache]: Analyzing trace with hash 20848526, now seen corresponding path program 1 times
[2020-05-31 04:30:37,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:30:38,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:30:38,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:30:38,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:30:38,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:30:38,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:30:38,222 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:30:38,222 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:30:38,222 INFO  L87              Difference]: Start difference. First operand 38064 states and 45768 transitions. cyclomatic complexity: 7728 Second operand 4 states.
[2020-05-31 04:30:38,679 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:30:38,679 INFO  L93              Difference]: Finished difference Result 38096 states and 45832 transitions.
[2020-05-31 04:30:38,679 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:30:38,679 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 38096 states and 45832 transitions.
[2020-05-31 04:30:38,764 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1319
[2020-05-31 04:30:38,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 38096 states to 38096 states and 45832 transitions.
[2020-05-31 04:30:38,890 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 220
[2020-05-31 04:30:38,890 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 220
[2020-05-31 04:30:38,890 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 38096 states and 45832 transitions.
[2020-05-31 04:30:38,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:30:38,923 INFO  L728         BuchiCegarLoop]: Abstraction has 38096 states and 45832 transitions.
[2020-05-31 04:30:38,959 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 38096 states and 45832 transitions.
[2020-05-31 04:30:39,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 38096 to 38080.
[2020-05-31 04:30:39,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 38080 states.
[2020-05-31 04:30:39,265 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 38080 states to 38080 states and 45816 transitions.
[2020-05-31 04:30:39,266 INFO  L751         BuchiCegarLoop]: Abstraction has 38080 states and 45816 transitions.
[2020-05-31 04:30:39,266 INFO  L631         BuchiCegarLoop]: Abstraction has 38080 states and 45816 transitions.
[2020-05-31 04:30:39,266 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 04:30:39,266 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 38080 states and 45816 transitions.
[2020-05-31 04:30:39,307 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1319
[2020-05-31 04:30:39,307 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:30:39,307 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:30:39,309 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:30:39,309 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:30:39,315 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:30:39,315 INFO  L82        PathProgramCache]: Analyzing trace with hash 646754291, now seen corresponding path program 1 times
[2020-05-31 04:30:39,315 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:30:39,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:30:39,556 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:30:39,556 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:30:39,556 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:30:39,556 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:30:39,557 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:30:39,557 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:30:39,557 INFO  L87              Difference]: Start difference. First operand 38080 states and 45816 transitions. cyclomatic complexity: 7760 Second operand 4 states.
[2020-05-31 04:30:40,077 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:30:40,077 INFO  L93              Difference]: Finished difference Result 38096 states and 45824 transitions.
[2020-05-31 04:30:40,077 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:30:40,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 38096 states and 45824 transitions.
[2020-05-31 04:30:40,164 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1319
[2020-05-31 04:30:40,410 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 38096 states to 38096 states and 45824 transitions.
[2020-05-31 04:30:40,411 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 220
[2020-05-31 04:30:40,411 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 220
[2020-05-31 04:30:40,411 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 38096 states and 45824 transitions.
[2020-05-31 04:30:40,439 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:30:40,439 INFO  L728         BuchiCegarLoop]: Abstraction has 38096 states and 45824 transitions.
[2020-05-31 04:30:40,469 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 38096 states and 45824 transitions.
[2020-05-31 04:30:40,697 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 38096 to 38080.
[2020-05-31 04:30:40,697 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 38080 states.
[2020-05-31 04:30:40,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 38080 states to 38080 states and 45808 transitions.
[2020-05-31 04:30:40,755 INFO  L751         BuchiCegarLoop]: Abstraction has 38080 states and 45808 transitions.
[2020-05-31 04:30:40,755 INFO  L631         BuchiCegarLoop]: Abstraction has 38080 states and 45808 transitions.
[2020-05-31 04:30:40,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-31 04:30:40,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 38080 states and 45808 transitions.
[2020-05-31 04:30:40,796 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 1319
[2020-05-31 04:30:40,796 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:30:40,796 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:30:40,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:30:40,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND FALSE  !(gas < 21000)
[L8452]   COND TRUE   iterate && gas >= 21000
[L8454]               havoc msgsender_MSG;
[L8455]               havoc msgvalue_MSG;
[L8456]               havoc choice;
[L8457]               havoc __ret_0_primary;
[L8458]               havoc recipient_s136;
[L8459]               havoc payee_s170;
[L8460]               havoc __ret_0_depositsOf;
[L8461]               havoc payee_s180;
[L8462]               havoc payee_s219;
[L8463]               havoc payee_s277;
[L8464]               havoc payee_s260;
[L8465]               havoc __ret_0_withdrawalAllowed;
[L8466]               havoc refundee_s350;
[L8467]               havoc __arg_0_withdrawalAllowed;
[L8468]               havoc beneficiary_s316;
[L8469]               havoc __ret_0_state;
[L8470]               havoc __ret_0_beneficiary;
[L8471]               havoc rate_s740;
[L8472]               havoc wallet_s740;
[L8473]               havoc token_s740;
[L8474]               havoc __ret_0_token;
[L8475]               havoc __ret_0_wallet;
[L8476]               havoc __ret_0_rate;
[L8477]               havoc __ret_0_weiRaised;
[L8478]               havoc beneficiary_s838;
[L8479]               havoc openingTime_s1000;
[L8480]               havoc closingTime_s1000;
[L8481]               havoc __ret_0_openingTime;
[L8482]               havoc __ret_0_closingTime;
[L8483]               havoc __ret_0_isOpen;
[L8484]               havoc __ret_0_hasClosed;
[L8485]               havoc __ret_0_finalized;
[L8486]               havoc goal_s1187;
[L8487]               havoc __ret_0_goal;
[L8488]               havoc refundee_s1220;
[L8489]               havoc __ret_0_goalReached;
[L8490]               havoc iterate;
[L8491]   COND TRUE   DType[from] == RefundableCrowdsale
[L8492]   COND FALSE  !(choice == 14)
[L8501]   COND FALSE  !(choice == 13)
[L8510]   COND FALSE  !(choice == 12)
[L8519]   COND FALSE  !(choice == 11)
[L8528]   COND FALSE  !(choice == 10)
[L8537]   COND FALSE  !(choice == 9)
[L8546]   COND FALSE  !(choice == 8)
[L8555]   COND FALSE  !(choice == 7)
[L8564]   COND FALSE  !(choice == 6)
[L8573]   COND FALSE  !(choice == 5)
[L8582]   COND TRUE   choice == 4
[L8583]               gas := gas - 21000;
[L8584]   COND TRUE   gas >= 0
[L8585]               assume msgvalue_MSG == 0;
[L8586]   CALL        call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L8586]   RET         call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L8587]   COND FALSE  !(revert)
[L8452]   COND FALSE  !(iterate && gas >= 21000)
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND FALSE  !(gas < 21000)
[L8452]   COND TRUE   iterate && gas >= 21000
[L8454]               havoc msgsender_MSG;
[L8455]               havoc msgvalue_MSG;
[L8456]               havoc choice;
[L8457]               havoc __ret_0_primary;
[L8458]               havoc recipient_s136;
[L8459]               havoc payee_s170;
[L8460]               havoc __ret_0_depositsOf;
[L8461]               havoc payee_s180;
[L8462]               havoc payee_s219;
[L8463]               havoc payee_s277;
[L8464]               havoc payee_s260;
[L8465]               havoc __ret_0_withdrawalAllowed;
[L8466]               havoc refundee_s350;
[L8467]               havoc __arg_0_withdrawalAllowed;
[L8468]               havoc beneficiary_s316;
[L8469]               havoc __ret_0_state;
[L8470]               havoc __ret_0_beneficiary;
[L8471]               havoc rate_s740;
[L8472]               havoc wallet_s740;
[L8473]               havoc token_s740;
[L8474]               havoc __ret_0_token;
[L8475]               havoc __ret_0_wallet;
[L8476]               havoc __ret_0_rate;
[L8477]               havoc __ret_0_weiRaised;
[L8478]               havoc beneficiary_s838;
[L8479]               havoc openingTime_s1000;
[L8480]               havoc closingTime_s1000;
[L8481]               havoc __ret_0_openingTime;
[L8482]               havoc __ret_0_closingTime;
[L8483]               havoc __ret_0_isOpen;
[L8484]               havoc __ret_0_hasClosed;
[L8485]               havoc __ret_0_finalized;
[L8486]               havoc goal_s1187;
[L8487]               havoc __ret_0_goal;
[L8488]               havoc refundee_s1220;
[L8489]               havoc __ret_0_goalReached;
[L8490]               havoc iterate;
[L8491]   COND TRUE   DType[from] == RefundableCrowdsale
[L8492]   COND FALSE  !(choice == 14)
[L8501]   COND FALSE  !(choice == 13)
[L8510]   COND FALSE  !(choice == 12)
[L8519]   COND FALSE  !(choice == 11)
[L8528]   COND FALSE  !(choice == 10)
[L8537]   COND FALSE  !(choice == 9)
[L8546]   COND FALSE  !(choice == 8)
[L8555]   COND FALSE  !(choice == 7)
[L8564]   COND FALSE  !(choice == 6)
[L8573]   COND FALSE  !(choice == 5)
[L8582]   COND TRUE   choice == 4
[L8583]               gas := gas - 21000;
[L8584]   COND TRUE   gas >= 0
[L8585]               assume msgvalue_MSG == 0;
[L8586]   CALL        call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7186]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7187]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7187]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7204]   COND TRUE   DType[this] == FinalizableCrowdsale
[L7205]   CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7234]   COND TRUE   DType[this] == RefundableCrowdsale
[L7235]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7235]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]   COND FALSE  !(revert)
[L7205]   RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7206]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L8586]   RET         call finalize_FinalizableCrowdsale__success(from, to, msgvalue_MSG);
[L8587]   COND FALSE  !(revert)
[L8452]   COND FALSE  !(iterate && gas >= 21000)
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:30:40,815 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:30:40,815 INFO  L82        PathProgramCache]: Analyzing trace with hash 265189081, now seen corresponding path program 1 times
[2020-05-31 04:30:40,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:30:40,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:30:41,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 753 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 749 trivial. 0 not checked.
[2020-05-31 04:30:41,166 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:30:41,166 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 04:30:41,167 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:30:41,167 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 04:30:41,167 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 04:30:41,167 INFO  L87              Difference]: Start difference. First operand 38080 states and 45808 transitions. cyclomatic complexity: 7752 Second operand 6 states.
[2020-05-31 04:31:00,221 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:31:00,222 INFO  L93              Difference]: Finished difference Result 35948 states and 41278 transitions.
[2020-05-31 04:31:00,222 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:31:00,222 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35948 states and 41278 transitions.
[2020-05-31 04:31:00,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 04:31:00,417 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35948 states to 33580 states and 38390 transitions.
[2020-05-31 04:31:00,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 299
[2020-05-31 04:31:00,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 909
[2020-05-31 04:31:00,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 33580 states and 38390 transitions.
[2020-05-31 04:31:00,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:31:00,444 INFO  L728         BuchiCegarLoop]: Abstraction has 33580 states and 38390 transitions.
[2020-05-31 04:31:00,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 33580 states and 38390 transitions.
[2020-05-31 04:31:00,669 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 33580 to 29592.
[2020-05-31 04:31:00,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29592 states.
[2020-05-31 04:31:00,712 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29592 states to 29592 states and 33798 transitions.
[2020-05-31 04:31:00,713 INFO  L751         BuchiCegarLoop]: Abstraction has 29592 states and 33798 transitions.
[2020-05-31 04:31:00,713 INFO  L631         BuchiCegarLoop]: Abstraction has 29592 states and 33798 transitions.
[2020-05-31 04:31:00,713 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-31 04:31:00,713 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29592 states and 33798 transitions.
[2020-05-31 04:31:00,746 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:00,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:31:00,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:31:00,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:31:00,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:31:00,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:31:00,754 INFO  L82        PathProgramCache]: Analyzing trace with hash 818052777, now seen corresponding path program 1 times
[2020-05-31 04:31:00,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:31:00,778 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:31:01,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:31:01,107 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:31:01,107 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 04:31:01,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:31:01,108 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 04:31:01,108 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 04:31:01,108 INFO  L87              Difference]: Start difference. First operand 29592 states and 33798 transitions. cyclomatic complexity: 4230 Second operand 5 states.
[2020-05-31 04:31:01,494 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:31:01,494 INFO  L93              Difference]: Finished difference Result 29936 states and 34158 transitions.
[2020-05-31 04:31:01,495 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:31:01,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29936 states and 34158 transitions.
[2020-05-31 04:31:01,550 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:01,634 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29936 states to 29936 states and 34158 transitions.
[2020-05-31 04:31:01,635 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 661
[2020-05-31 04:31:01,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 661
[2020-05-31 04:31:01,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29936 states and 34158 transitions.
[2020-05-31 04:31:01,657 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:31:01,657 INFO  L728         BuchiCegarLoop]: Abstraction has 29936 states and 34158 transitions.
[2020-05-31 04:31:01,681 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29936 states and 34158 transitions.
[2020-05-31 04:31:01,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29936 to 29936.
[2020-05-31 04:31:01,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 29936 states.
[2020-05-31 04:31:01,900 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 29936 states to 29936 states and 34158 transitions.
[2020-05-31 04:31:01,900 INFO  L751         BuchiCegarLoop]: Abstraction has 29936 states and 34158 transitions.
[2020-05-31 04:31:01,900 INFO  L631         BuchiCegarLoop]: Abstraction has 29936 states and 34158 transitions.
[2020-05-31 04:31:01,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-31 04:31:01,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 29936 states and 34158 transitions.
[2020-05-31 04:31:01,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:01,934 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:31:01,934 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:31:01,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:31:01,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:31:01,942 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:31:01,942 INFO  L82        PathProgramCache]: Analyzing trace with hash 214446244, now seen corresponding path program 1 times
[2020-05-31 04:31:01,943 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:31:01,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:31:02,217 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 04:31:02,217 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:31:02,217 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-31 04:31:02,218 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:31:02,218 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 04:31:02,218 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 04:31:02,218 INFO  L87              Difference]: Start difference. First operand 29936 states and 34158 transitions. cyclomatic complexity: 4246 Second operand 10 states.
[2020-05-31 04:31:26,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:31:26,776 INFO  L93              Difference]: Finished difference Result 30410 states and 34815 transitions.
[2020-05-31 04:31:26,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 04:31:26,777 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 30410 states and 34815 transitions.
[2020-05-31 04:31:26,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:26,903 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 30410 states to 22089 states and 25177 transitions.
[2020-05-31 04:31:26,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 654
[2020-05-31 04:31:26,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 657
[2020-05-31 04:31:26,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22089 states and 25177 transitions.
[2020-05-31 04:31:26,918 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:31:26,918 INFO  L728         BuchiCegarLoop]: Abstraction has 22089 states and 25177 transitions.
[2020-05-31 04:31:26,932 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22089 states and 25177 transitions.
[2020-05-31 04:31:27,047 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22089 to 22080.
[2020-05-31 04:31:27,047 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22080 states.
[2020-05-31 04:31:27,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22080 states to 22080 states and 25167 transitions.
[2020-05-31 04:31:27,076 INFO  L751         BuchiCegarLoop]: Abstraction has 22080 states and 25167 transitions.
[2020-05-31 04:31:27,076 INFO  L631         BuchiCegarLoop]: Abstraction has 22080 states and 25167 transitions.
[2020-05-31 04:31:27,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-31 04:31:27,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22080 states and 25167 transitions.
[2020-05-31 04:31:27,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:27,100 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:31:27,100 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:31:27,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:31:27,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND FALSE  !(gas >= 0)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:31:27,110 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:31:27,110 INFO  L82        PathProgramCache]: Analyzing trace with hash -699383358, now seen corresponding path program 1 times
[2020-05-31 04:31:27,110 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:31:27,133 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:31:27,387 INFO  L134       CoverageAnalysis]: Checked inductivity of 712 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 712 trivial. 0 not checked.
[2020-05-31 04:31:27,387 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:31:27,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:31:27,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:31:27,388 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:31:27,388 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:31:27,388 INFO  L87              Difference]: Start difference. First operand 22080 states and 25167 transitions. cyclomatic complexity: 3105 Second operand 4 states.
[2020-05-31 04:31:28,082 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:31:28,082 INFO  L93              Difference]: Finished difference Result 22611 states and 25626 transitions.
[2020-05-31 04:31:28,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:31:28,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22611 states and 25626 transitions.
[2020-05-31 04:31:28,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:28,191 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22611 states to 22611 states and 25626 transitions.
[2020-05-31 04:31:28,192 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-05-31 04:31:28,192 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 722
[2020-05-31 04:31:28,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22611 states and 25626 transitions.
[2020-05-31 04:31:28,208 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:31:28,208 INFO  L728         BuchiCegarLoop]: Abstraction has 22611 states and 25626 transitions.
[2020-05-31 04:31:28,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22611 states and 25626 transitions.
[2020-05-31 04:31:28,351 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22611 to 22330.
[2020-05-31 04:31:28,352 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22330 states.
[2020-05-31 04:31:28,383 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22330 states to 22330 states and 25309 transitions.
[2020-05-31 04:31:28,384 INFO  L751         BuchiCegarLoop]: Abstraction has 22330 states and 25309 transitions.
[2020-05-31 04:31:28,384 INFO  L631         BuchiCegarLoop]: Abstraction has 22330 states and 25309 transitions.
[2020-05-31 04:31:28,384 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-31 04:31:28,384 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22330 states and 25309 transitions.
[2020-05-31 04:31:28,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 04:31:28,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:31:28,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:31:28,411 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:31:28,411 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7641]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND TRUE   DType[this] == ConditionalEscrow
[L4988]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4988]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4989]   COND FALSE  !(revert)
[L7641]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7642]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7640]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7645]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7646]   CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4977]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4978]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4979]               Balance[this] := Balance[this] + msgvalue_MSG;
[L4981]               gas := gas - 7;
[L4982]   COND FALSE  !(DType[this] == RefundEscrow)
[L4987]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L4992]   COND TRUE   DType[this] == Escrow
[L4993]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L4993]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4994]   COND FALSE  !(revert)
[L7646]   RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7647]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:31:28,418 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:31:28,418 INFO  L82        PathProgramCache]: Analyzing trace with hash 612615170, now seen corresponding path program 1 times
[2020-05-31 04:31:28,418 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:31:28,439 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:31:28,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 752 trivial. 0 not checked.
[2020-05-31 04:31:28,688 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:31:28,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-05-31 04:31:28,689 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:31:28,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 04:31:28,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 04:31:28,689 INFO  L87              Difference]: Start difference. First operand 22330 states and 25309 transitions. cyclomatic complexity: 2997 Second operand 14 states.
[2020-05-31 04:31:58,755 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:31:58,755 INFO  L93              Difference]: Finished difference Result 45350 states and 51767 transitions.
[2020-05-31 04:31:58,755 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 04:31:58,756 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 45350 states and 51767 transitions.
[2020-05-31 04:31:58,859 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:31:58,992 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 45350 states to 43870 states and 49988 transitions.
[2020-05-31 04:31:58,992 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1388
[2020-05-31 04:31:58,993 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1388
[2020-05-31 04:31:58,993 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 43870 states and 49988 transitions.
[2020-05-31 04:31:59,025 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:31:59,025 INFO  L728         BuchiCegarLoop]: Abstraction has 43870 states and 49988 transitions.
[2020-05-31 04:31:59,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 43870 states and 49988 transitions.
[2020-05-31 04:31:59,309 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 43870 to 43384.
[2020-05-31 04:31:59,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43384 states.
[2020-05-31 04:31:59,373 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43384 states to 43384 states and 49336 transitions.
[2020-05-31 04:31:59,373 INFO  L751         BuchiCegarLoop]: Abstraction has 43384 states and 49336 transitions.
[2020-05-31 04:31:59,373 INFO  L631         BuchiCegarLoop]: Abstraction has 43384 states and 49336 transitions.
[2020-05-31 04:31:59,373 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-31 04:31:59,373 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43384 states and 49336 transitions.
[2020-05-31 04:31:59,421 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:31:59,421 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:31:59,421 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:31:59,423 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:31:59,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND TRUE   gas >= 0
[L10467]              assume msgvalue_MSG == 0;
[L10468]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10468]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:31:59,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:31:59,429 INFO  L82        PathProgramCache]: Analyzing trace with hash 1861793268, now seen corresponding path program 1 times
[2020-05-31 04:31:59,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:31:59,454 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:31:59,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 752 trivial. 0 not checked.
[2020-05-31 04:31:59,714 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:31:59,714 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 04:31:59,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:31:59,715 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 04:31:59,715 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-31 04:31:59,715 INFO  L87              Difference]: Start difference. First operand 43384 states and 49336 transitions. cyclomatic complexity: 5988 Second operand 11 states.
[2020-05-31 04:32:04,152 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:04,152 INFO  L93              Difference]: Finished difference Result 44212 states and 50346 transitions.
[2020-05-31 04:32:04,152 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 04:32:04,153 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44212 states and 50346 transitions.
[2020-05-31 04:32:04,255 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:04,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44212 states to 44212 states and 50346 transitions.
[2020-05-31 04:32:04,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1373
[2020-05-31 04:32:04,387 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1373
[2020-05-31 04:32:04,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 44212 states and 50346 transitions.
[2020-05-31 04:32:04,420 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:04,420 INFO  L728         BuchiCegarLoop]: Abstraction has 44212 states and 50346 transitions.
[2020-05-31 04:32:04,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 44212 states and 50346 transitions.
[2020-05-31 04:32:04,698 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 44212 to 43509.
[2020-05-31 04:32:04,698 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43509 states.
[2020-05-31 04:32:04,759 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43509 states to 43509 states and 49486 transitions.
[2020-05-31 04:32:04,759 INFO  L751         BuchiCegarLoop]: Abstraction has 43509 states and 49486 transitions.
[2020-05-31 04:32:04,759 INFO  L631         BuchiCegarLoop]: Abstraction has 43509 states and 49486 transitions.
[2020-05-31 04:32:04,759 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-31 04:32:04,759 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43509 states and 49486 transitions.
[2020-05-31 04:32:04,807 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:04,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:04,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:04,809 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:04,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND TRUE   gas >= 0
[L10467]              assume msgvalue_MSG == 0;
[L10468]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10468]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:04,815 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:04,815 INFO  L82        PathProgramCache]: Analyzing trace with hash -1028936196, now seen corresponding path program 1 times
[2020-05-31 04:32:04,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:04,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:05,272 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 734 trivial. 0 not checked.
[2020-05-31 04:32:05,272 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:05,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 04:32:05,273 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:05,273 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-31 04:32:05,273 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-05-31 04:32:05,273 INFO  L87              Difference]: Start difference. First operand 43509 states and 49486 transitions. cyclomatic complexity: 6013 Second operand 16 states.
[2020-05-31 04:32:27,645 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:27,645 INFO  L93              Difference]: Finished difference Result 44326 states and 50475 transitions.
[2020-05-31 04:32:27,645 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 04:32:27,645 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 44326 states and 50475 transitions.
[2020-05-31 04:32:27,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:27,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 44326 states to 28614 states and 32665 transitions.
[2020-05-31 04:32:27,825 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1278
[2020-05-31 04:32:27,826 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1278
[2020-05-31 04:32:27,826 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 28614 states and 32665 transitions.
[2020-05-31 04:32:27,847 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:27,847 INFO  L728         BuchiCegarLoop]: Abstraction has 28614 states and 32665 transitions.
[2020-05-31 04:32:27,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 28614 states and 32665 transitions.
[2020-05-31 04:32:28,018 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 28614 to 28040.
[2020-05-31 04:32:28,018 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28040 states.
[2020-05-31 04:32:28,058 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28040 states to 28040 states and 31984 transitions.
[2020-05-31 04:32:28,058 INFO  L751         BuchiCegarLoop]: Abstraction has 28040 states and 31984 transitions.
[2020-05-31 04:32:28,058 INFO  L631         BuchiCegarLoop]: Abstraction has 28040 states and 31984 transitions.
[2020-05-31 04:32:28,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-31 04:32:28,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28040 states and 31984 transitions.
[2020-05-31 04:32:28,090 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:28,090 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:28,090 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:28,093 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:28,093 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND TRUE   gas >= 0
[L10467]              assume msgvalue_MSG == 0;
[L10468]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10468]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND TRUE   choice == 14
[L10465]              gas := gas - 21000;
[L10466]  COND TRUE   gas >= 0
[L10467]              assume msgvalue_MSG == 0;
[L10468]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1684]               havoc __exception;
[L1685]               revert := false;
[L1686]   COND TRUE   __exception
[L1687]               __tmp__Balance := Balance;
[L1688]               __tmp__DType := DType;
[L1689]               __tmp__Alloc := Alloc;
[L1690]               __tmp__balance_ADDR := balance_ADDR;
[L1691]               __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1692]               __tmp__sum__deposits0 := sum__deposits0;
[L1693]               __tmp__Length := Length;
[L1694]               __tmp__now := now;
[L1695]               __tmp___primary_Secondary := _primary_Secondary;
[L1696]               __tmp___deposits_Escrow := _deposits_Escrow;
[L1697]               __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1698]               __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1699]               __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1700]               __tmp___token_Crowdsale := _token_Crowdsale;
[L1701]               __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1702]               __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1703]               __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1704]               __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1705]               __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1706]               __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1707]               __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1708]               __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1709]   CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6112]               gas := gas - 3;
[L6113]               gas := gas - 294;
[L6114]               __ret_0_ := __tmp___token_Crowdsale[this];
[L1709]   RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1710]               assume revert || gas < 0;
[L10468]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:28,099 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:28,099 INFO  L82        PathProgramCache]: Analyzing trace with hash -1528070346, now seen corresponding path program 1 times
[2020-05-31 04:32:28,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:28,126 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:28,409 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 780 trivial. 0 not checked.
[2020-05-31 04:32:28,409 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:28,409 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 04:32:28,410 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:28,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 04:32:28,410 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=64, Unknown=0, NotChecked=0, Total=90
[2020-05-31 04:32:28,410 INFO  L87              Difference]: Start difference. First operand 28040 states and 31984 transitions. cyclomatic complexity: 3970 Second operand 10 states.
[2020-05-31 04:32:34,347 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:34,348 INFO  L93              Difference]: Finished difference Result 29621 states and 33723 transitions.
[2020-05-31 04:32:34,348 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-31 04:32:34,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29621 states and 33723 transitions.
[2020-05-31 04:32:34,424 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 04:32:34,600 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29621 states to 26789 states and 30843 transitions.
[2020-05-31 04:32:34,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 758
[2020-05-31 04:32:34,601 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-05-31 04:32:34,601 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26789 states and 30843 transitions.
[2020-05-31 04:32:34,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:34,621 INFO  L728         BuchiCegarLoop]: Abstraction has 26789 states and 30843 transitions.
[2020-05-31 04:32:34,633 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26789 states and 30843 transitions.
[2020-05-31 04:32:34,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26789 to 25339.
[2020-05-31 04:32:34,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25339 states.
[2020-05-31 04:32:34,822 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25339 states to 25339 states and 29143 transitions.
[2020-05-31 04:32:34,822 INFO  L751         BuchiCegarLoop]: Abstraction has 25339 states and 29143 transitions.
[2020-05-31 04:32:34,822 INFO  L631         BuchiCegarLoop]: Abstraction has 25339 states and 29143 transitions.
[2020-05-31 04:32:34,822 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-31 04:32:34,822 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25339 states and 29143 transitions.
[2020-05-31 04:32:34,851 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:34,851 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:34,852 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:34,854 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:34,854 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND FALSE  !(__var_49)
[L7576]   CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5502]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5502]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5503]   COND FALSE  !(revert)
[L5506]               gas := gas - 956;
[L5507]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5511]               gas := gas - 20287;
[L5512]               _state_RefundEscrow[this] := 1;
[L5513]               assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7576]   RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7577]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:34,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:34,889 INFO  L82        PathProgramCache]: Analyzing trace with hash -1613544590, now seen corresponding path program 1 times
[2020-05-31 04:32:34,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:34,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:35,288 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 18 proven. 0 refuted. 0 times theorem prover too weak. 771 trivial. 0 not checked.
[2020-05-31 04:32:35,288 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:35,288 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-05-31 04:32:35,289 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:35,289 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 04:32:35,289 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-05-31 04:32:35,289 INFO  L87              Difference]: Start difference. First operand 25339 states and 29143 transitions. cyclomatic complexity: 3830 Second operand 18 states.
[2020-05-31 04:32:49,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:49,362 INFO  L93              Difference]: Finished difference Result 27156 states and 31411 transitions.
[2020-05-31 04:32:49,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 04:32:49,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 27156 states and 31411 transitions.
[2020-05-31 04:32:49,414 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:32:49,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 27156 states to 27156 states and 31409 transitions.
[2020-05-31 04:32:49,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1021
[2020-05-31 04:32:49,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1021
[2020-05-31 04:32:49,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 27156 states and 31409 transitions.
[2020-05-31 04:32:49,516 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:49,516 INFO  L728         BuchiCegarLoop]: Abstraction has 27156 states and 31409 transitions.
[2020-05-31 04:32:49,529 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 27156 states and 31409 transitions.
[2020-05-31 04:32:49,701 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 27156 to 26403.
[2020-05-31 04:32:49,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 26403 states.
[2020-05-31 04:32:49,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 26403 states to 26403 states and 30491 transitions.
[2020-05-31 04:32:49,738 INFO  L751         BuchiCegarLoop]: Abstraction has 26403 states and 30491 transitions.
[2020-05-31 04:32:49,738 INFO  L631         BuchiCegarLoop]: Abstraction has 26403 states and 30491 transitions.
[2020-05-31 04:32:49,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-31 04:32:49,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 26403 states and 30491 transitions.
[2020-05-31 04:32:49,766 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:49,766 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:49,767 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:49,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:49,769 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND FALSE  !(Balance[from] >= amount)
[L9201]               success := false;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:49,773 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:49,774 INFO  L82        PathProgramCache]: Analyzing trace with hash -1765753028, now seen corresponding path program 1 times
[2020-05-31 04:32:49,774 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:49,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:50,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 04:32:50,096 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:50,096 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:32:50,096 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:50,097 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:32:50,097 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:32:50,097 INFO  L87              Difference]: Start difference. First operand 26403 states and 30491 transitions. cyclomatic complexity: 4114 Second operand 4 states.
[2020-05-31 04:32:50,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:50,169 INFO  L93              Difference]: Finished difference Result 26407 states and 30493 transitions.
[2020-05-31 04:32:50,169 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:32:50,169 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26407 states and 30493 transitions.
[2020-05-31 04:32:50,227 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:50,305 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26407 states to 26403 states and 30489 transitions.
[2020-05-31 04:32:50,305 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 910
[2020-05-31 04:32:50,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 910
[2020-05-31 04:32:50,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26403 states and 30489 transitions.
[2020-05-31 04:32:50,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:50,325 INFO  L728         BuchiCegarLoop]: Abstraction has 26403 states and 30489 transitions.
[2020-05-31 04:32:50,338 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26403 states and 30489 transitions.
[2020-05-31 04:32:50,502 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26403 to 26403.
[2020-05-31 04:32:50,502 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 26403 states.
[2020-05-31 04:32:50,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 26403 states to 26403 states and 30489 transitions.
[2020-05-31 04:32:50,540 INFO  L751         BuchiCegarLoop]: Abstraction has 26403 states and 30489 transitions.
[2020-05-31 04:32:50,541 INFO  L631         BuchiCegarLoop]: Abstraction has 26403 states and 30489 transitions.
[2020-05-31 04:32:50,541 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-31 04:32:50,541 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 26403 states and 30489 transitions.
[2020-05-31 04:32:50,571 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:50,571 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:50,571 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:50,574 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:50,574 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:50,579 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:50,579 INFO  L82        PathProgramCache]: Analyzing trace with hash -1116400172, now seen corresponding path program 1 times
[2020-05-31 04:32:50,580 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:50,609 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:50,932 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 04:32:50,932 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:50,932 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 04:32:50,933 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:50,933 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 04:32:50,933 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 04:32:50,934 INFO  L87              Difference]: Start difference. First operand 26403 states and 30489 transitions. cyclomatic complexity: 4112 Second operand 14 states.
[2020-05-31 04:32:51,473 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:51,473 INFO  L93              Difference]: Finished difference Result 26611 states and 30730 transitions.
[2020-05-31 04:32:51,473 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 04:32:51,473 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26611 states and 30730 transitions.
[2020-05-31 04:32:51,520 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:51,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26611 states to 26409 states and 30493 transitions.
[2020-05-31 04:32:51,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 910
[2020-05-31 04:32:51,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 910
[2020-05-31 04:32:51,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26409 states and 30493 transitions.
[2020-05-31 04:32:51,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:51,608 INFO  L728         BuchiCegarLoop]: Abstraction has 26409 states and 30493 transitions.
[2020-05-31 04:32:51,619 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26409 states and 30493 transitions.
[2020-05-31 04:32:51,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26409 to 26403.
[2020-05-31 04:32:51,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 26403 states.
[2020-05-31 04:32:51,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 26403 states to 26403 states and 30487 transitions.
[2020-05-31 04:32:51,804 INFO  L751         BuchiCegarLoop]: Abstraction has 26403 states and 30487 transitions.
[2020-05-31 04:32:51,804 INFO  L631         BuchiCegarLoop]: Abstraction has 26403 states and 30487 transitions.
[2020-05-31 04:32:51,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-31 04:32:51,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 26403 states and 30487 transitions.
[2020-05-31 04:32:51,833 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:51,834 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:51,834 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:51,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:51,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND TRUE   DType[this] == RefundableCrowdsale
[L6063]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6063]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6064]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:51,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:51,843 INFO  L82        PathProgramCache]: Analyzing trace with hash 1471222503, now seen corresponding path program 1 times
[2020-05-31 04:32:51,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:51,880 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:52,299 INFO  L134       CoverageAnalysis]: Checked inductivity of 811 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 04:32:52,299 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:52,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 04:32:52,300 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:52,300 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 04:32:52,300 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 04:32:52,300 INFO  L87              Difference]: Start difference. First operand 26403 states and 30487 transitions. cyclomatic complexity: 4110 Second operand 10 states.
[2020-05-31 04:32:52,597 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:52,597 INFO  L93              Difference]: Finished difference Result 26979 states and 31197 transitions.
[2020-05-31 04:32:52,597 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 04:32:52,597 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26979 states and 31197 transitions.
[2020-05-31 04:32:52,649 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:52,729 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26979 states to 26979 states and 31197 transitions.
[2020-05-31 04:32:52,729 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 970
[2020-05-31 04:32:52,730 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 970
[2020-05-31 04:32:52,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 26979 states and 31197 transitions.
[2020-05-31 04:32:52,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:52,751 INFO  L728         BuchiCegarLoop]: Abstraction has 26979 states and 31197 transitions.
[2020-05-31 04:32:52,764 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 26979 states and 31197 transitions.
[2020-05-31 04:32:52,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 26979 to 26851.
[2020-05-31 04:32:52,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 26851 states.
[2020-05-31 04:32:52,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 26851 states to 26851 states and 31013 transitions.
[2020-05-31 04:32:52,984 INFO  L751         BuchiCegarLoop]: Abstraction has 26851 states and 31013 transitions.
[2020-05-31 04:32:52,985 INFO  L631         BuchiCegarLoop]: Abstraction has 26851 states and 31013 transitions.
[2020-05-31 04:32:52,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-31 04:32:52,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 26851 states and 31013 transitions.
[2020-05-31 04:32:53,015 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:53,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:53,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:53,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:53,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND FALSE  !(gas > 2300)
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:53,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:53,024 INFO  L82        PathProgramCache]: Analyzing trace with hash 540768764, now seen corresponding path program 1 times
[2020-05-31 04:32:53,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:32:53,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:32:53,365 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 04:32:53,365 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:32:53,365 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-05-31 04:32:53,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:32:53,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 04:32:53,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=205, Unknown=0, NotChecked=0, Total=306
[2020-05-31 04:32:53,366 INFO  L87              Difference]: Start difference. First operand 26851 states and 31013 transitions. cyclomatic complexity: 4188 Second operand 18 states.
[2020-05-31 04:32:59,436 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:32:59,437 INFO  L93              Difference]: Finished difference Result 31341 states and 36497 transitions.
[2020-05-31 04:32:59,437 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-05-31 04:32:59,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 31341 states and 36497 transitions.
[2020-05-31 04:32:59,522 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 04:32:59,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 31341 states to 30969 states and 36059 transitions.
[2020-05-31 04:32:59,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1056
[2020-05-31 04:32:59,633 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1056
[2020-05-31 04:32:59,633 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 30969 states and 36059 transitions.
[2020-05-31 04:32:59,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:32:59,660 INFO  L728         BuchiCegarLoop]: Abstraction has 30969 states and 36059 transitions.
[2020-05-31 04:32:59,676 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 30969 states and 36059 transitions.
[2020-05-31 04:32:59,895 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 30969 to 27201.
[2020-05-31 04:32:59,895 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 27201 states.
[2020-05-31 04:32:59,936 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 27201 states to 27201 states and 31496 transitions.
[2020-05-31 04:32:59,936 INFO  L751         BuchiCegarLoop]: Abstraction has 27201 states and 31496 transitions.
[2020-05-31 04:32:59,937 INFO  L631         BuchiCegarLoop]: Abstraction has 27201 states and 31496 transitions.
[2020-05-31 04:32:59,937 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-31 04:32:59,937 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 27201 states and 31496 transitions.
[2020-05-31 04:32:59,968 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:32:59,968 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:32:59,968 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:32:59,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:32:59,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:32:59,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:32:59,976 INFO  L82        PathProgramCache]: Analyzing trace with hash -1129935144, now seen corresponding path program 1 times
[2020-05-31 04:32:59,977 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:33:00,009 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:33:00,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 3 proven. 30 refuted. 0 times theorem prover too weak. 756 trivial. 0 not checked.
[2020-05-31 04:33:00,729 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:33:00,729 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-05-31 04:33:00,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:33:00,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-05-31 04:33:00,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=94, Invalid=1546, Unknown=0, NotChecked=0, Total=1640
[2020-05-31 04:33:00,730 INFO  L87              Difference]: Start difference. First operand 27201 states and 31496 transitions. cyclomatic complexity: 4321 Second operand 41 states.
[2020-05-31 04:33:39,581 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:33:39,581 INFO  L93              Difference]: Finished difference Result 29433 states and 34351 transitions.
[2020-05-31 04:33:39,581 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 50 states. 
[2020-05-31 04:33:39,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 29433 states and 34351 transitions.
[2020-05-31 04:33:39,653 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:33:39,743 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 29433 states to 29368 states and 34255 transitions.
[2020-05-31 04:33:39,743 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1193
[2020-05-31 04:33:39,744 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1193
[2020-05-31 04:33:39,744 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 29368 states and 34255 transitions.
[2020-05-31 04:33:39,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:33:39,767 INFO  L728         BuchiCegarLoop]: Abstraction has 29368 states and 34255 transitions.
[2020-05-31 04:33:39,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 29368 states and 34255 transitions.
[2020-05-31 04:33:39,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 29368 to 28618.
[2020-05-31 04:33:39,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28618 states.
[2020-05-31 04:33:40,025 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28618 states to 28618 states and 33297 transitions.
[2020-05-31 04:33:40,025 INFO  L751         BuchiCegarLoop]: Abstraction has 28618 states and 33297 transitions.
[2020-05-31 04:33:40,025 INFO  L631         BuchiCegarLoop]: Abstraction has 28618 states and 33297 transitions.
[2020-05-31 04:33:40,025 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-31 04:33:40,025 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28618 states and 33297 transitions.
[2020-05-31 04:33:40,058 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:33:40,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:33:40,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:33:40,061 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:33:40,061 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6067]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6068]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6068]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6069]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6587]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6588]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6588]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6589]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND TRUE   DType[this] == FinalizableCrowdsale
[L6708]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6708]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6709]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:33:40,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:33:40,068 INFO  L82        PathProgramCache]: Analyzing trace with hash -2058457858, now seen corresponding path program 1 times
[2020-05-31 04:33:40,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:33:40,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:33:40,598 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 803 trivial. 0 not checked.
[2020-05-31 04:33:40,598 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:33:40,598 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:33:40,599 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:33:40,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:33:40,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:33:40,599 INFO  L87              Difference]: Start difference. First operand 28618 states and 33297 transitions. cyclomatic complexity: 4710 Second operand 3 states.
[2020-05-31 04:33:40,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:33:40,752 INFO  L93              Difference]: Finished difference Result 28642 states and 33325 transitions.
[2020-05-31 04:33:40,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:33:40,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 28642 states and 33325 transitions.
[2020-05-31 04:33:40,818 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:33:40,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 28642 states to 28642 states and 33325 transitions.
[2020-05-31 04:33:40,906 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1033
[2020-05-31 04:33:40,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1033
[2020-05-31 04:33:40,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 28642 states and 33325 transitions.
[2020-05-31 04:33:40,928 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:33:40,928 INFO  L728         BuchiCegarLoop]: Abstraction has 28642 states and 33325 transitions.
[2020-05-31 04:33:40,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 28642 states and 33325 transitions.
[2020-05-31 04:33:41,120 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 28642 to 28626.
[2020-05-31 04:33:41,120 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 28626 states.
[2020-05-31 04:33:41,163 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 28626 states to 28626 states and 33305 transitions.
[2020-05-31 04:33:41,163 INFO  L751         BuchiCegarLoop]: Abstraction has 28626 states and 33305 transitions.
[2020-05-31 04:33:41,163 INFO  L631         BuchiCegarLoop]: Abstraction has 28626 states and 33305 transitions.
[2020-05-31 04:33:41,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-31 04:33:41,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 28626 states and 33305 transitions.
[2020-05-31 04:33:41,196 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:33:41,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:33:41,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:33:41,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:33:41,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:33:41,204 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:33:41,205 INFO  L82        PathProgramCache]: Analyzing trace with hash 1126172537, now seen corresponding path program 1 times
[2020-05-31 04:33:41,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:33:41,246 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:33:43,097 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 172 proven. 21 refuted. 0 times theorem prover too weak. 596 trivial. 0 not checked.
[2020-05-31 04:33:43,097 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:33:43,097 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [55] total 55
[2020-05-31 04:33:43,098 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:33:43,098 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 56 interpolants.
[2020-05-31 04:33:43,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=191, Invalid=2889, Unknown=0, NotChecked=0, Total=3080
[2020-05-31 04:33:43,099 INFO  L87              Difference]: Start difference. First operand 28626 states and 33305 transitions. cyclomatic complexity: 4710 Second operand 56 states.
[2020-05-31 04:34:37,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:37,987 INFO  L93              Difference]: Finished difference Result 36302 states and 42271 transitions.
[2020-05-31 04:34:37,987 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 83 states. 
[2020-05-31 04:34:37,987 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 36302 states and 42271 transitions.
[2020-05-31 04:34:38,068 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:34:38,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 36302 states to 36276 states and 42238 transitions.
[2020-05-31 04:34:38,181 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1172
[2020-05-31 04:34:38,181 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1172
[2020-05-31 04:34:38,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 36276 states and 42238 transitions.
[2020-05-31 04:34:38,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:38,209 INFO  L728         BuchiCegarLoop]: Abstraction has 36276 states and 42238 transitions.
[2020-05-31 04:34:38,226 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 36276 states and 42238 transitions.
[2020-05-31 04:34:38,462 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 36276 to 35312.
[2020-05-31 04:34:38,462 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35312 states.
[2020-05-31 04:34:38,515 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35312 states to 35312 states and 41011 transitions.
[2020-05-31 04:34:38,515 INFO  L751         BuchiCegarLoop]: Abstraction has 35312 states and 41011 transitions.
[2020-05-31 04:34:38,515 INFO  L631         BuchiCegarLoop]: Abstraction has 35312 states and 41011 transitions.
[2020-05-31 04:34:38,515 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-31 04:34:38,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35312 states and 41011 transitions.
[2020-05-31 04:34:38,555 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:34:38,555 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:38,555 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:38,557 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:38,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7475]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7476]   CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5080]               gas := gas - 7;
[L5081]   COND FALSE  !(DType[this] == RefundEscrow)
[L5086]   COND TRUE   DType[this] == ConditionalEscrow
[L5087]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5087]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5088]   COND FALSE  !(revert)
[L7476]   RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7477]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:38,563 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:38,564 INFO  L82        PathProgramCache]: Analyzing trace with hash 1713135541, now seen corresponding path program 1 times
[2020-05-31 04:34:38,564 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:38,601 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:38,939 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 04:34:38,939 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:34:38,940 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:34:38,940 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:38,940 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:34:38,940 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:34:38,940 INFO  L87              Difference]: Start difference. First operand 35312 states and 41011 transitions. cyclomatic complexity: 5736 Second operand 4 states.
[2020-05-31 04:34:39,122 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:39,122 INFO  L93              Difference]: Finished difference Result 35396 states and 41079 transitions.
[2020-05-31 04:34:39,122 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:34:39,123 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35396 states and 41079 transitions.
[2020-05-31 04:34:39,279 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:34:39,371 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35396 states to 35292 states and 40960 transitions.
[2020-05-31 04:34:39,371 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 987
[2020-05-31 04:34:39,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 987
[2020-05-31 04:34:39,372 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35292 states and 40960 transitions.
[2020-05-31 04:34:39,398 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:39,398 INFO  L728         BuchiCegarLoop]: Abstraction has 35292 states and 40960 transitions.
[2020-05-31 04:34:39,415 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35292 states and 40960 transitions.
[2020-05-31 04:34:39,637 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35292 to 35250.
[2020-05-31 04:34:39,637 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 35250 states.
[2020-05-31 04:34:39,690 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 35250 states to 35250 states and 40913 transitions.
[2020-05-31 04:34:39,690 INFO  L751         BuchiCegarLoop]: Abstraction has 35250 states and 40913 transitions.
[2020-05-31 04:34:39,690 INFO  L631         BuchiCegarLoop]: Abstraction has 35250 states and 40913 transitions.
[2020-05-31 04:34:39,690 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-31 04:34:39,690 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 35250 states and 40913 transitions.
[2020-05-31 04:34:39,729 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 04:34:39,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:39,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:39,733 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:39,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7475]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7476]   CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5080]               gas := gas - 7;
[L5081]   COND FALSE  !(DType[this] == RefundEscrow)
[L5086]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L5091]   COND TRUE   DType[this] == Escrow
[L5092]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND TRUE   DType[this] == ConditionalEscrow
[L9250]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9250]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9251]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5092]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5093]   COND FALSE  !(revert)
[L7476]   RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7477]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND TRUE   DType[to] == Crowdsale
[L7699]   CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L6057]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6058]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6059]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6061]               gas := gas - 8;
[L6062]   COND TRUE   DType[this] == RefundableCrowdsale
[L6063]   CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L6063]   RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6064]   COND FALSE  !(revert)
[L6085]   COND TRUE   DType[this] == RefundableCrowdsale
[L6086]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6388]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6393]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6398]   COND TRUE   DType[this] == Crowdsale
[L6399]   CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6580]               gas := gas - 10;
[L6581]               assume weiAmount_s851 >= 0;
[L6582]   COND TRUE   DType[this] == RefundableCrowdsale
[L6583]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6583]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6584]   COND FALSE  !(revert)
[L6399]   RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6400]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6414]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6419]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6424]   COND TRUE   DType[this] == Crowdsale
[L6425]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6425]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6426]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6450]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6455]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6460]   COND TRUE   DType[this] == Crowdsale
[L6461]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6707]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6712]   COND TRUE   DType[this] == TimedCrowdsale
[L6713]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6713]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6714]   COND FALSE  !(revert)
[L6461]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6462]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6476]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6481]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6486]   COND TRUE   DType[this] == Crowdsale
[L6487]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6487]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6488]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6500]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6505]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6510]   COND TRUE   DType[this] == Crowdsale
[L6511]   CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6776]               gas := gas - 36028;
[L6777]               __var_37 := gas;
[L6778]   COND FALSE  !(gas > 2300)
[L6781]               __var_37 := __var_37 - gas;
[L6782]               assume msgvalue_MSG >= 0;
[L6783]   CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L6783]   RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6784]   COND FALSE  !(!__var_38)
[L6788]               gas := __var_37 + gas;
[L6511]   RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6512]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6525]   COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6530]   COND FALSE  !(DType[this] == TimedCrowdsale)
[L6535]   COND TRUE   DType[this] == Crowdsale
[L6536]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6536]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6537]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6086]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6087]   COND FALSE  !(revert)
[L7699]   RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7700]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:39,753 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:39,753 INFO  L82        PathProgramCache]: Analyzing trace with hash 1570034139, now seen corresponding path program 1 times
[2020-05-31 04:34:39,754 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:39,795 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:40,292 INFO  L134       CoverageAnalysis]: Checked inductivity of 854 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 845 trivial. 0 not checked.
[2020-05-31 04:34:40,292 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:34:40,292 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 04:34:40,293 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:40,293 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 04:34:40,293 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 04:34:40,293 INFO  L87              Difference]: Start difference. First operand 35250 states and 40913 transitions. cyclomatic complexity: 5700 Second operand 8 states.
[2020-05-31 04:34:43,795 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:43,796 INFO  L93              Difference]: Finished difference Result 70786 states and 82433 transitions.
[2020-05-31 04:34:43,796 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 04:34:43,796 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 70786 states and 82433 transitions.
[2020-05-31 04:34:43,982 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:44,244 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 70786 states to 70786 states and 82433 transitions.
[2020-05-31 04:34:44,244 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1974
[2020-05-31 04:34:44,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1974
[2020-05-31 04:34:44,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 70786 states and 82433 transitions.
[2020-05-31 04:34:44,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:44,306 INFO  L728         BuchiCegarLoop]: Abstraction has 70786 states and 82433 transitions.
[2020-05-31 04:34:44,344 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 70786 states and 82433 transitions.
[2020-05-31 04:34:44,855 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 70786 to 70368.
[2020-05-31 04:34:44,855 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 70368 states.
[2020-05-31 04:34:44,972 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 70368 states to 70368 states and 81927 transitions.
[2020-05-31 04:34:44,972 INFO  L751         BuchiCegarLoop]: Abstraction has 70368 states and 81927 transitions.
[2020-05-31 04:34:44,972 INFO  L631         BuchiCegarLoop]: Abstraction has 70368 states and 81927 transitions.
[2020-05-31 04:34:44,972 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-31 04:34:44,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 70368 states and 81927 transitions.
[2020-05-31 04:34:45,060 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:45,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:45,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:45,063 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:45,064 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7471]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND FALSE  !(DType[this] == RefundEscrow)
[L5267]   COND TRUE   DType[this] == ConditionalEscrow
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7471]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7472]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:45,070 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:45,070 INFO  L82        PathProgramCache]: Analyzing trace with hash -1535550624, now seen corresponding path program 1 times
[2020-05-31 04:34:45,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:45,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:45,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 04:34:45,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:34:45,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 04:34:45,572 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:45,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 04:34:45,572 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 04:34:45,572 INFO  L87              Difference]: Start difference. First operand 70368 states and 81927 transitions. cyclomatic complexity: 11633 Second operand 3 states.
[2020-05-31 04:34:45,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:45,798 INFO  L93              Difference]: Finished difference Result 70512 states and 82133 transitions.
[2020-05-31 04:34:45,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 04:34:45,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 70512 states and 82133 transitions.
[2020-05-31 04:34:45,970 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:46,211 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 70512 states to 70512 states and 82133 transitions.
[2020-05-31 04:34:46,211 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1974
[2020-05-31 04:34:46,212 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1974
[2020-05-31 04:34:46,212 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 70512 states and 82133 transitions.
[2020-05-31 04:34:46,267 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:46,267 INFO  L728         BuchiCegarLoop]: Abstraction has 70512 states and 82133 transitions.
[2020-05-31 04:34:46,304 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 70512 states and 82133 transitions.
[2020-05-31 04:34:46,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 70512 to 70428.
[2020-05-31 04:34:46,799 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 70428 states.
[2020-05-31 04:34:46,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 70428 states to 70428 states and 81987 transitions.
[2020-05-31 04:34:46,916 INFO  L751         BuchiCegarLoop]: Abstraction has 70428 states and 81987 transitions.
[2020-05-31 04:34:46,916 INFO  L631         BuchiCegarLoop]: Abstraction has 70428 states and 81987 transitions.
[2020-05-31 04:34:46,916 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-31 04:34:46,916 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 70428 states and 81987 transitions.
[2020-05-31 04:34:47,002 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:47,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:47,002 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:47,005 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:47,005 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7470]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7471]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND TRUE   DType[this] == Escrow
[L9255]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9255]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9256]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7471]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7472]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:47,011 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:47,012 INFO  L82        PathProgramCache]: Analyzing trace with hash -1249467841, now seen corresponding path program 1 times
[2020-05-31 04:34:47,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:47,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:47,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 04:34:47,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:34:47,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 04:34:47,396 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:47,396 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 04:34:47,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 04:34:47,397 INFO  L87              Difference]: Start difference. First operand 70428 states and 81987 transitions. cyclomatic complexity: 11633 Second operand 4 states.
[2020-05-31 04:34:47,665 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:47,665 INFO  L93              Difference]: Finished difference Result 70596 states and 82155 transitions.
[2020-05-31 04:34:47,665 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 04:34:47,665 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 70596 states and 82155 transitions.
[2020-05-31 04:34:47,904 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:48,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 70596 states to 70596 states and 82155 transitions.
[2020-05-31 04:34:48,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1974
[2020-05-31 04:34:48,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1974
[2020-05-31 04:34:48,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 70596 states and 82155 transitions.
[2020-05-31 04:34:48,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:48,180 INFO  L728         BuchiCegarLoop]: Abstraction has 70596 states and 82155 transitions.
[2020-05-31 04:34:48,211 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 70596 states and 82155 transitions.
[2020-05-31 04:34:48,674 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 70596 to 70512.
[2020-05-31 04:34:48,674 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 70512 states.
[2020-05-31 04:34:48,783 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 70512 states to 70512 states and 82061 transitions.
[2020-05-31 04:34:48,784 INFO  L751         BuchiCegarLoop]: Abstraction has 70512 states and 82061 transitions.
[2020-05-31 04:34:48,784 INFO  L631         BuchiCegarLoop]: Abstraction has 70512 states and 82061 transitions.
[2020-05-31 04:34:48,784 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-31 04:34:48,784 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 70512 states and 82061 transitions.
[2020-05-31 04:34:48,867 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:48,867 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:48,867 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:48,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:48,870 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND FALSE  !(DType[this] == RefundEscrow)
[L9249]   COND FALSE  !(DType[this] == ConditionalEscrow)
[L9254]   COND FALSE  !(DType[this] == Escrow)
[L9259]   COND TRUE   DType[this] == Secondary
[L9260]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9260]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9261]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:48,876 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:48,876 INFO  L82        PathProgramCache]: Analyzing trace with hash -1666807891, now seen corresponding path program 1 times
[2020-05-31 04:34:48,876 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:48,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:49,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 04:34:49,284 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 04:34:49,284 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 04:34:49,285 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:49,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 04:34:49,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 04:34:49,285 INFO  L87              Difference]: Start difference. First operand 70512 states and 82061 transitions. cyclomatic complexity: 11623 Second operand 5 states.
[2020-05-31 04:34:49,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:34:49,587 INFO  L93              Difference]: Finished difference Result 71136 states and 82825 transitions.
[2020-05-31 04:34:49,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 04:34:49,588 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 71136 states and 82825 transitions.
[2020-05-31 04:34:49,758 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:50,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 71136 states to 71136 states and 82825 transitions.
[2020-05-31 04:34:50,023 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1974
[2020-05-31 04:34:50,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1974
[2020-05-31 04:34:50,024 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 71136 states and 82825 transitions.
[2020-05-31 04:34:50,081 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:34:50,081 INFO  L728         BuchiCegarLoop]: Abstraction has 71136 states and 82825 transitions.
[2020-05-31 04:34:50,117 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 71136 states and 82825 transitions.
[2020-05-31 04:34:50,641 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 71136 to 71136.
[2020-05-31 04:34:50,641 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 71136 states.
[2020-05-31 04:34:50,752 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 71136 states to 71136 states and 82825 transitions.
[2020-05-31 04:34:50,752 INFO  L751         BuchiCegarLoop]: Abstraction has 71136 states and 82825 transitions.
[2020-05-31 04:34:50,752 INFO  L631         BuchiCegarLoop]: Abstraction has 71136 states and 82825 transitions.
[2020-05-31 04:34:50,752 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-31 04:34:50,752 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 71136 states and 82825 transitions.
[2020-05-31 04:34:50,836 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:34:50,836 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:34:50,836 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:34:50,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:34:50,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND TRUE   choice == 2
[L10537]              gas := gas - 21000;
[L10538]  COND TRUE   gas >= 0
[L10539]              assume msgvalue_MSG == 0;
[L10540]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2717]               havoc __exception;
[L2718]               revert := false;
[L2719]   COND FALSE  !(__exception)
[L2745]   CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7445]   COND TRUE   DType[this] == RefundableCrowdsale
[L7446]   CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7446]   RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7453]   COND FALSE  !(!__var_45)
[L7457]   CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7457]   RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   COND FALSE  !(!!__var_46)
[L7465]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7466]   CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5261]               gas := gas - 666;
[L5262]   COND TRUE   DType[this] == RefundEscrow
[L5263]   CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5578]               gas := gas - 3;
[L5579]               gas := gas - 302;
[L5580]               __ret_0_ := _state_RefundEscrow[this] == 1;
[L5263]   RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5264]   COND FALSE  !(revert)
[L5272]   COND FALSE  !(!__var_7)
[L5276]               gas := gas - 7;
[L5277]   COND TRUE   DType[this] == RefundEscrow
[L5278]   CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5139]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5139]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5140]   COND FALSE  !(revert)
[L5143]               gas := gas - 614;
[L5144]               assume payment_s249 >= 0;
[L5145]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5146]               payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5147]               gas := gas - 10208;
[L5148]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5149]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5150]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5151]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5152]               gas := gas - 71574;
[L5153]               __var_5 := gas;
[L5154]   COND FALSE  !(gas > 2300)
[L5157]               __var_5 := __var_5 - gas;
[L5158]               assume payment_s249 >= 0;
[L5159]   CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5159]   RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5160]   COND FALSE  !(!__var_6)
[L5164]               gas := __var_5 + gas;
[L5165]               assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5278]   RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5279]   COND FALSE  !(revert)
[L7466]   RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7467]   COND FALSE  !(revert)
[L2745]   RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2746]               assume !revert && gas >= 0;
[L10540]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:34:50,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:34:50,845 INFO  L82        PathProgramCache]: Analyzing trace with hash 315279607, now seen corresponding path program 1 times
[2020-05-31 04:34:50,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:34:50,881 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:34:51,402 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 2 proven. 11 refuted. 0 times theorem prover too weak. 816 trivial. 0 not checked.
[2020-05-31 04:34:51,402 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:34:51,402 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-31 04:34:51,403 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:34:51,403 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 04:34:51,403 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-05-31 04:34:51,403 INFO  L87              Difference]: Start difference. First operand 71136 states and 82825 transitions. cyclomatic complexity: 11763 Second operand 14 states.
[2020-05-31 04:35:02,161 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:35:02,161 INFO  L93              Difference]: Finished difference Result 37659 states and 43436 transitions.
[2020-05-31 04:35:02,161 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 04:35:02,161 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 37659 states and 43436 transitions.
[2020-05-31 04:35:02,255 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:35:02,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 37659 states to 23922 states and 27610 transitions.
[2020-05-31 04:35:02,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1653
[2020-05-31 04:35:02,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1653
[2020-05-31 04:35:02,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23922 states and 27610 transitions.
[2020-05-31 04:35:02,344 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:35:02,344 INFO  L728         BuchiCegarLoop]: Abstraction has 23922 states and 27610 transitions.
[2020-05-31 04:35:02,356 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23922 states and 27610 transitions.
[2020-05-31 04:35:02,504 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23922 to 23610.
[2020-05-31 04:35:02,504 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23610 states.
[2020-05-31 04:35:02,536 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23610 states to 23610 states and 27240 transitions.
[2020-05-31 04:35:02,536 INFO  L751         BuchiCegarLoop]: Abstraction has 23610 states and 27240 transitions.
[2020-05-31 04:35:02,536 INFO  L631         BuchiCegarLoop]: Abstraction has 23610 states and 27240 transitions.
[2020-05-31 04:35:02,536 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-31 04:35:02,536 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23610 states and 27240 transitions.
[2020-05-31 04:35:02,562 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:35:02,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:35:02,563 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:35:02,565 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:35:02,565 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND TRUE   DType[to] == RefundableCrowdsale
[L7693]               assume amount == 0;
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:35:02,571 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:35:02,572 INFO  L82        PathProgramCache]: Analyzing trace with hash 708709015, now seen corresponding path program 1 times
[2020-05-31 04:35:02,572 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:35:02,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:35:03,945 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 44 proven. 62 refuted. 0 times theorem prover too weak. 1100 trivial. 0 not checked.
[2020-05-31 04:35:03,945 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:35:03,945 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-05-31 04:35:03,946 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:35:03,946 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-05-31 04:35:03,946 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=2318, Unknown=0, NotChecked=0, Total=2450
[2020-05-31 04:35:03,947 INFO  L87              Difference]: Start difference. First operand 23610 states and 27240 transitions. cyclomatic complexity: 3653 Second operand 50 states.
[2020-05-31 04:35:38,910 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:35:38,910 INFO  L93              Difference]: Finished difference Result 24788 states and 28717 transitions.
[2020-05-31 04:35:38,910 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-05-31 04:35:38,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24788 states and 28717 transitions.
[2020-05-31 04:35:38,973 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:35:39,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24788 states to 24775 states and 28701 transitions.
[2020-05-31 04:35:39,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1827
[2020-05-31 04:35:39,047 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1827
[2020-05-31 04:35:39,047 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24775 states and 28701 transitions.
[2020-05-31 04:35:39,064 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:35:39,064 INFO  L728         BuchiCegarLoop]: Abstraction has 24775 states and 28701 transitions.
[2020-05-31 04:35:39,076 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24775 states and 28701 transitions.
[2020-05-31 04:35:39,240 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24775 to 24325.
[2020-05-31 04:35:39,240 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 24325 states.
[2020-05-31 04:35:39,274 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 24325 states to 24325 states and 28144 transitions.
[2020-05-31 04:35:39,274 INFO  L751         BuchiCegarLoop]: Abstraction has 24325 states and 28144 transitions.
[2020-05-31 04:35:39,274 INFO  L631         BuchiCegarLoop]: Abstraction has 24325 states and 28144 transitions.
[2020-05-31 04:35:39,274 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-31 04:35:39,274 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 24325 states and 28144 transitions.
[2020-05-31 04:35:39,302 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 04:35:39,302 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 04:35:39,302 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 04:35:39,305 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 04:35:39,305 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                  success_send__success0 := false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]      CALL        call main();
[L4]                  havoc ben;
[L10557]              assume null == 0;
[L10558]  CALL        call this := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L10558]  RET         call this := FreshRefGenerator__success();
[L10559]              assume now >= 0;
[L10560]              assume DType[this] == RefundableCrowdsale;
[L10561]              gas := gas - 53000;
[L10562]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2588]               havoc __exception;
[L2589]               revert := false;
[L2590]   COND FALSE  !(__exception)
[L2616]   CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7363]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7363]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7364]   COND FALSE  !(revert)
[L7367]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7367]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]   COND FALSE  !(revert)
[L7371]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L7108]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5884]   CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5867]               assume msgsender_MSG != null;
[L5868]               Balance[this] := 0;
[L5869]               _notEntered_ReentrancyGuard[this] := false;
[L5871]               _notEntered_ReentrancyGuard[this] := true;
[L5884]   RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5885]   COND FALSE  !(revert)
[L7112]   RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7116]   CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7083]               assume msgsender_MSG != null;
[L7084]               Balance[this] := 0;
[L7085]               _finalized_FinalizableCrowdsale[this] := false;
[L7087]               _finalized_FinalizableCrowdsale[this] := false;
[L7116]   RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7117]   COND FALSE  !(revert)
[L7371]   RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7372]   COND FALSE  !(revert)
[L7375]   CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7302]               assume msgsender_MSG != null;
[L7303]               Balance[this] := 0;
[L7304]               _goal_RefundableCrowdsale[this] := 0;
[L7306]               assume goal_s1187 >= 0;
[L7307]   COND FALSE  !(!(goal_s1187 > 0))
[L7311]   CALL        call __var_43 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L7311]   RET         call __var_43 := FreshRefGenerator__success();
[L7312]   COND FALSE  !(revert)
[L7315]   COND TRUE   DType[this] == RefundableCrowdsale
[L7316]   CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L7316]   RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7317]   COND FALSE  !(revert)
[L7323]               assume DType[__var_43] == RefundEscrow;
[L7324]   CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5354]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5354]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5355]   COND FALSE  !(revert)
[L5358]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5358]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5359]   COND FALSE  !(revert)
[L5362]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5362]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]   COND FALSE  !(revert)
[L5366]   CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5206]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L5206]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5207]   COND FALSE  !(revert)
[L5210]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L5210]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5211]   COND FALSE  !(revert)
[L5214]   CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4914]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]   COND FALSE  !(revert)
[L4918]   CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4799]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4559]               assume msgsender_MSG != null;
[L4560]               Balance[this] := 0;
[L4574]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]   COND FALSE  !(revert)
[L4799]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4800]   COND FALSE  !(revert)
[L4803]   CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4751]               assume msgsender_MSG != null;
[L4752]               Balance[this] := 0;
[L4753]               _primary_Secondary[this] := null;
[L4755]   COND TRUE   DType[this] == RefundEscrow
[L4756]   CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L4756]   RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4757]   COND FALSE  !(revert)
[L4778]               msgSender_s90 := msgSender_s90;
[L4779]               _primary_Secondary[this] := msgSender_s90;
[L4780]               assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4803]   RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4804]   COND FALSE  !(revert)
[L4918]   RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4919]   COND FALSE  !(revert)
[L4922]   CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4882]               assume msgsender_MSG != null;
[L4883]               Balance[this] := 0;
[L4885]   CALL        call __var_3 := FreshRefGenerator__success();
[L4542]               havoc newRef;
[L4543]               assume Alloc[newRef] == false;
[L4544]               Alloc[newRef] := true;
[L4545]               assume newRef != null;
[L4885]   RET         call __var_3 := FreshRefGenerator__success();
[L4886]   COND FALSE  !(revert)
[L4889]               _deposits_Escrow[this] := __var_3;
[L4891]               M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4892]               sum__deposits0[_deposits_Escrow[this]] := 0;
[L4922]   RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4923]   COND FALSE  !(revert)
[L5214]   RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5215]   COND FALSE  !(revert)
[L5218]   CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5179]               assume msgsender_MSG != null;
[L5180]               Balance[this] := 0;
[L5218]   RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5219]   COND FALSE  !(revert)
[L5366]   RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5367]   COND FALSE  !(revert)
[L5370]   CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5313]               assume msgsender_MSG != null;
[L5314]               Balance[this] := 0;
[L5315]               _beneficiary_RefundEscrow[this] := null;
[L5317]               __var_8 := null;
[L5318]   COND FALSE  !(!(beneficiary_s316 != null))
[L5322]               _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5323]               _state_RefundEscrow[this] := 0;
[L5370]   RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5371]   COND FALSE  !(revert)
[L7324]   RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7325]   COND FALSE  !(revert)
[L7328]               __var_42 := __var_43;
[L7329]               _escrow_RefundableCrowdsale[this] := __var_42;
[L7330]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7331]               assume goal_s1187 >= 0;
[L7332]               _goal_RefundableCrowdsale[this] := goal_s1187;
[L7375]   RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7376]   COND FALSE  !(revert)
[L2616]   RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2617]               assume !revert && gas >= 0;
[L10562]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L10563]              assume !revert && gas >= 0;
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND TRUE   choice == 10
[L10489]              gas := gas - 21000;
[L10490]  COND TRUE   gas >= 0
[L10491]              assume msgvalue_MSG >= 0;
[L10492]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1936]               havoc __exception;
[L1937]               revert := false;
[L1938]   COND FALSE  !(__exception)
[L1964]   CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6369]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6370]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6371]               Balance[this] := Balance[this] + msgvalue_MSG;
[L6373]   CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9286]               gas := gas - 891;
[L9287]   COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L9291]               gas := gas - 20267;
[L9292]               _notEntered_ReentrancyGuard[this] := false;
[L6373]   RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]   COND FALSE  !(revert)
[L6377]               gas := gas - 10;
[L6378]               assume weiAmount_s837 >= 0;
[L6379]               assume msgvalue_MSG >= 0;
[L6380]               weiAmount_s837 := msgvalue_MSG;
[L6381]               gas := gas - 10;
[L6382]               assume weiAmount_s837 >= 0;
[L6383]   COND TRUE   DType[this] == RefundableCrowdsale
[L6384]   CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6972]   CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9325]   COND TRUE   DType[this] == RefundableCrowdsale
[L9326]   CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6919]               assume now >= 0;
[L6920]               assume _openingTime_TimedCrowdsale[this] >= 0;
[L6921]               assume now >= 0;
[L6922]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6923]               __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L9326]   RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L9327]   COND FALSE  !(revert)
[L9343]   COND FALSE  !(!__var_39)
[L6972]   RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   COND FALSE  !(revert)
[L6976]               assume weiAmount_s1058 >= 0;
[L6977]   COND TRUE   DType[this] == RefundableCrowdsale
[L6978]   CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6627]               gas := gas - 683;
[L6628]               __var_36 := null;
[L6629]   COND FALSE  !(!(beneficiary_s877 != null))
[L6633]               gas := gas - 664;
[L6634]               assume weiAmount_s877 >= 0;
[L6635]   COND FALSE  !(!(weiAmount_s877 != 0))
[L6978]   RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6979]   COND FALSE  !(revert)
[L6384]   RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6385]   COND FALSE  !(revert)
[L6406]               gas := gas - 15;
[L6407]               assume tokens_s837 >= 0;
[L6408]               assume weiAmount_s837 >= 0;
[L6409]   COND TRUE   DType[this] == RefundableCrowdsale
[L6410]   CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6746]               gas := gas - 3;
[L6747]               gas := gas - 8;
[L6748]               assume weiAmount_s932 >= 0;
[L6749]               __ret_0_ := weiAmount_s932;
[L6410]   RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6411]   COND FALSE  !(revert)
[L6432]               tokens_s837 := tokens_s837;
[L6433]               gas := gas - 20247;
[L6434]               assume _weiRaised_Crowdsale[this] >= 0;
[L6435]               assume _weiRaised_Crowdsale[this] >= 0;
[L6436]               assume weiAmount_s837 >= 0;
[L6437]   CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L6437]   RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6438]   COND FALSE  !(revert)
[L6441]               _weiRaised_Crowdsale[this] := __var_35;
[L6442]               assume __var_35 >= 0;
[L6443]               gas := gas - 10;
[L6444]               assume tokens_s837 >= 0;
[L6445]   COND TRUE   DType[this] == RefundableCrowdsale
[L6446]   CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6700]               gas := gas - 10;
[L6701]               assume tokenAmount_s914 >= 0;
[L6702]   COND TRUE   DType[this] == RefundableCrowdsale
[L6703]   CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6661]               gas := gas - 299;
[L6662]               assume tokenAmount_s901 >= 0;
[L6663]   CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5665]               gas := gas - 37240;
[L5666]               assume value_s517 >= 0;
[L5668]   COND FALSE  !(!__var_12)
[L6663]   RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6664]   COND FALSE  !(revert)
[L6703]   RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6704]   COND FALSE  !(revert)
[L6446]   RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6447]   COND FALSE  !(revert)
[L6468]               assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6469]               gas := gas - 10;
[L6470]               assume weiAmount_s837 >= 0;
[L6471]   COND TRUE   DType[this] == RefundableCrowdsale
[L6472]   CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6472]   RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6473]   COND FALSE  !(revert)
[L6494]               gas := gas - 4;
[L6495]   COND TRUE   DType[this] == RefundableCrowdsale
[L6496]   CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7626]               assume msgvalue_MSG >= 0;
[L7627]   COND TRUE   DType[this] == RefundableCrowdsale
[L7628]   CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L7628]   RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7629]   COND FALSE  !(revert)
[L7635]   COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7636]   CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5434]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5435]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5436]               Balance[this] := Balance[this] + msgvalue_MSG;
[L5438]               gas := gas - 956;
[L5439]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5443]               gas := gas - 7;
[L5444]   COND TRUE   DType[this] == RefundEscrow
[L5445]   CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5032]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5032]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5033]   COND FALSE  !(revert)
[L5036]               gas := gas - 20;
[L5037]               assume amount_s208 >= 0;
[L5038]               assume msgvalue_MSG >= 0;
[L5039]               amount_s208 := msgvalue_MSG;
[L5040]               gas := gas - 40878;
[L5041]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5042]               assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L5043]               assume amount_s208 >= 0;
[L5044]   CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4654]               gas := gas - 9;
[L4655]               gas := gas - 51;
[L4656]               assume c_s39 >= 0;
[L4657]               assume a_s40 >= 0;
[L4658]               assume b_s40 >= 0;
[L4659]               assume a_s40 + b_s40 >= 0;
[L4660]               c_s39 := a_s40 + b_s40;
[L4661]               gas := gas - 1992;
[L4662]               assume c_s39 >= 0;
[L4663]               assume a_s40 >= 0;
[L4664]   COND FALSE  !(!(c_s39 >= a_s40))
[L4668]               gas := gas - 30;
[L4669]               assume c_s39 >= 0;
[L4670]               __ret_0_ := c_s39;
[L5044]   RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L5045]   COND FALSE  !(revert)
[L5048]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5049]               M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L5050]               sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L5051]               assume __var_4 >= 0;
[L5052]               assert { :EventEmitted "Deposited_Escrow" } true;
[L5445]   RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5446]   COND FALSE  !(revert)
[L7636]   RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7637]   COND FALSE  !(revert)
[L6496]   RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6497]   COND FALSE  !(revert)
[L6518]               gas := gas - 10;
[L6519]               assume weiAmount_s837 >= 0;
[L6520]   COND TRUE   DType[this] == RefundableCrowdsale
[L6521]   CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6521]   RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6522]   COND FALSE  !(revert)
[L6543]   CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L9357]               gas := gas - 20267;
[L9358]               _notEntered_ReentrancyGuard[this] := true;
[L6543]   RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L1964]   RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1965]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  success_buyTokens_Crowdsale0 := true;
[L4]                  success_buyTokens_Crowdsale0 := false;
[L4]                  revert := revert_hold;
[L4]                  fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L10492]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                  inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND TRUE   choice == 4
[L10525]              gas := gas - 21000;
[L10526]  COND TRUE   gas >= 0
[L10527]              assume msgvalue_MSG == 0;
[L10528]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2498]               havoc __exception;
[L2499]               revert := false;
[L2500]   COND FALSE  !(__exception)
[L2526]   CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7181]   COND TRUE   DType[this] == RefundableCrowdsale
[L7182]   CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7182]   RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7183]   COND FALSE  !(revert)
[L7194]   COND FALSE  !(!__var_41)
[L7198]               _finalized_FinalizableCrowdsale[this] := true;
[L7199]   COND TRUE   DType[this] == RefundableCrowdsale
[L7200]   CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7562]   CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7562]   RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7563]   COND FALSE  !(revert)
[L7566]   COND TRUE   __var_49
[L7567]   CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5471]   CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9243]               gas := gas - 7402;
[L9244]   COND TRUE   DType[this] == RefundEscrow
[L9245]   CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4590]               gas := gas - 9;
[L4591]               gas := gas - 21;
[L4592]               __ret_0_ := msgsender_MSG;
[L9245]   RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9267]   COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5471]   RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5472]   COND FALSE  !(revert)
[L5475]               gas := gas - 956;
[L5476]   COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5480]               gas := gas - 20287;
[L5481]               _state_RefundEscrow[this] := 2;
[L5482]               assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7567]   RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7568]   COND FALSE  !(revert)
[L7571]   CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5547]               gas := gas - 956;
[L5548]   COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5552]               gas := gas - 36484;
[L5553]               __var_9 := gas;
[L5554]   COND TRUE   gas > 2300
[L5555]               gas := 2300;
[L5557]               __var_9 := __var_9 - gas;
[L5558]               __var_10 := this;
[L5559]               assume Balance[this] >= 0;
[L5560]   CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L9166]               havoc __exception;
[L9167]   COND FALSE  !(__exception)
[L9197]   COND TRUE   Balance[from] >= amount
[L9198]   CALL        call FallbackDispatch__success(from, to, amount);
[L7692]   COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7694]   COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7696]   COND FALSE  !(DType[to] == TimedCrowdsale)
[L7698]   COND FALSE  !(DType[to] == Crowdsale)
[L7703]   COND FALSE  !(DType[to] == ReentrancyGuard)
[L7705]   COND FALSE  !(DType[to] == IERC20)
[L7707]   COND FALSE  !(DType[to] == RefundEscrow)
[L7709]   COND FALSE  !(DType[to] == ConditionalEscrow)
[L7711]   COND FALSE  !(DType[to] == Escrow)
[L7713]   COND FALSE  !(DType[to] == Secondary)
[L7715]   COND FALSE  !(DType[to] == Context)
[L7718]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L8441]               assume Balance[from] >= amount;
[L8442]               Balance[from] := Balance[from] - amount;
[L8443]               Balance[to] := Balance[to] + amount;
[L8445]   COND FALSE  !(choice == 0)
[L8449]   COND TRUE   gas < 21000
[L7718]   RET         call Fallback_UnknownType__success(from, to, amount);
[L7719]   COND FALSE  !(revert)
[L9198]   RET         call FallbackDispatch__success(from, to, amount);
[L9199]               success := true;
[L9203]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L4]                  assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                  revert := revert_hold;
[L5560]   RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5561]   COND FALSE  !(!__var_11)
[L5565]               gas := __var_9 + gas;
[L7571]   RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7572]   COND FALSE  !(revert)
[L7581]   COND TRUE   DType[this] == RefundableCrowdsale
[L7582]   CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7582]   RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7583]   COND FALSE  !(revert)
[L7200]   RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7212]               assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2526]   RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2527]               assume !revert && gas >= 0;
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6136]               gas := gas - 3;
[L6137]               gas := gas - 244;
[L6138]               __ret_0_ := _wallet_Crowdsale[this];
[L1]      RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume ben == __wallet_Crowdsale1;
[L4]                  success_finalize_FinalizableCrowdsale0 := true;
[L4]                  success_finalize_FinalizableCrowdsale0 := false;
[L4]                  revert := revert_hold;
[L10528]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L10566]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L10421]              havoc msgsender_MSG;
[L10422]              havoc msgvalue_MSG;
[L10423]              havoc choice;
[L10424]              havoc rate_s740;
[L10425]              havoc wallet_s740;
[L10426]              havoc token_s740;
[L10427]              havoc __ret_0_token;
[L10428]              havoc __ret_0_wallet;
[L10429]              havoc __ret_0_rate;
[L10430]              havoc __ret_0_weiRaised;
[L10431]              havoc beneficiary_s838;
[L10432]              havoc openingTime_s1000;
[L10433]              havoc closingTime_s1000;
[L10434]              havoc __ret_0_openingTime;
[L10435]              havoc __ret_0_closingTime;
[L10436]              havoc __ret_0_isOpen;
[L10437]              havoc __ret_0_hasClosed;
[L10438]              havoc __ret_0_finalized;
[L10439]              havoc goal_s1187;
[L10440]              havoc __ret_0_goal;
[L10441]              havoc refundee_s1220;
[L10442]              havoc __ret_0_goalReached;
[L10443]              havoc tmpNow;
[L10444]              havoc gas;
[L10445]              assume gas > 4000000 && gas <= 8000000;
[L10446]              tmpNow := now;
[L10447]              havoc now;
[L10448]              assume now > tmpNow;
[L10449]              assume msgsender_MSG != null;
[L10450]              assume DType[msgsender_MSG] != Context;
[L10451]              assume DType[msgsender_MSG] != SafeMath;
[L10452]              assume DType[msgsender_MSG] != Secondary;
[L10453]              assume DType[msgsender_MSG] != Escrow;
[L10454]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L10455]              assume DType[msgsender_MSG] != RefundEscrow;
[L10456]              assume DType[msgsender_MSG] != IERC20;
[L10457]              assume DType[msgsender_MSG] != SafeERC20;
[L10458]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L10459]              assume DType[msgsender_MSG] != Crowdsale;
[L10460]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L10461]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L10462]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L10463]              Alloc[msgsender_MSG] := true;
[L10464]  COND FALSE  !(choice == 14)
[L10470]  COND FALSE  !(choice == 13)
[L10476]  COND FALSE  !(choice == 12)
[L10482]  COND FALSE  !(choice == 11)
[L10488]  COND FALSE  !(choice == 10)
[L10494]  COND FALSE  !(choice == 9)
[L10500]  COND FALSE  !(choice == 8)
[L10506]  COND FALSE  !(choice == 7)
[L10512]  COND FALSE  !(choice == 6)
[L10518]  COND FALSE  !(choice == 5)
[L10524]  COND FALSE  !(choice == 4)
[L10530]  COND FALSE  !(choice == 3)
[L10536]  COND FALSE  !(choice == 2)
[L10542]  COND FALSE  !(choice == 1)
[L4]                  revert_hold := revert;
[L4]                  revert := false;
[L1]      CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7130]               __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]      RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]               assume __var_48 >= 0;
[L7507]   COND TRUE   DType[this] == RefundableCrowdsale
[L7508]   CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6171]               gas := gas - 3;
[L6172]               gas := gas - 208;
[L6173]               assume _weiRaised_Crowdsale[this] >= 0;
[L6174]               __ret_0_ := _weiRaised_Crowdsale[this];
[L7508]   RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7509]   COND FALSE  !(revert)
[L7515]               assume __var_48 >= 0;
[L7516]               assume _goal_RefundableCrowdsale[this] >= 0;
[L7517]               __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]      RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]      CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6937]               assume now >= 0;
[L6938]               assume _closingTime_TimedCrowdsale[this] >= 0;
[L6939]               __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]      RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                  assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                  revert := revert_hold;
[L10566]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 04:35:39,311 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 04:35:39,311 INFO  L82        PathProgramCache]: Analyzing trace with hash -481612360, now seen corresponding path program 1 times
[2020-05-31 04:35:39,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 04:35:39,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 04:35:41,004 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 43 proven. 22 refuted. 0 times theorem prover too weak. 1141 trivial. 0 not checked.
[2020-05-31 04:35:41,004 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 04:35:41,004 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 04:35:41,005 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 04:35:41,005 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 04:35:41,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=142, Invalid=2408, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 04:35:41,006 INFO  L87              Difference]: Start difference. First operand 24325 states and 28144 transitions. cyclomatic complexity: 3847 Second operand 51 states.
[2020-05-31 04:36:12,955 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 04:36:12,956 INFO  L93              Difference]: Finished difference Result 11783 states and 13584 transitions.
[2020-05-31 04:36:12,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-31 04:36:12,956 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11783 states and 13584 transitions.
[2020-05-31 04:36:12,981 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 04:36:12,982 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11783 states to 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 04:36:12,982 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 04:36:12,982 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 04:36:12,982 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-31 04:36:12,982 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 04:36:12,982 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 04:36:12,983 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 04:36:12,987 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 04:36:12 BasicIcfg
[2020-05-31 04:36:12,987 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 04:36:12,987 INFO  L168              Benchmark]: Toolchain (without parser) took 488893.01 ms. Allocated memory was 514.9 MB in the beginning and 7.1 GB in the end (delta: 6.5 GB). Free memory was 441.3 MB in the beginning and 2.1 GB in the end (delta: -1.6 GB). Peak memory consumption was 4.9 GB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,988 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,988 INFO  L168              Benchmark]: Boogie Preprocessor took 116.58 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 421.0 MB in the end (delta: 20.3 MB). Peak memory consumption was 20.3 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,988 INFO  L168              Benchmark]: UtopiaSpecLang took 67.95 ms. Allocated memory is still 514.9 MB. Free memory was 421.0 MB in the beginning and 408.9 MB in the end (delta: 12.1 MB). Peak memory consumption was 12.1 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,988 INFO  L168              Benchmark]: Boogie Printer took 23.49 ms. Allocated memory is still 514.9 MB. Free memory was 407.5 MB in the beginning and 402.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,989 INFO  L168              Benchmark]: RCFGBuilder took 928.10 ms. Allocated memory was 514.9 MB in the beginning and 641.7 MB in the end (delta: 126.9 MB). Free memory was 402.2 MB in the beginning and 559.3 MB in the end (delta: -157.2 MB). Peak memory consumption was 128.6 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,989 INFO  L168              Benchmark]: UtopiaLTL2Aut took 57.14 ms. Allocated memory is still 641.7 MB. Free memory was 559.3 MB in the beginning and 550.3 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,990 INFO  L168              Benchmark]: BÃ¼chi Program Product took 14694.13 ms. Allocated memory was 641.7 MB in the beginning and 2.9 GB in the end (delta: 2.2 GB). Free memory was 550.3 MB in the beginning and 574.9 MB in the end (delta: -24.6 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,990 INFO  L168              Benchmark]: BlockEncodingV2 took 3465.65 ms. Allocated memory was 2.9 GB in the beginning and 4.1 GB in the end (delta: 1.2 GB). Free memory was 574.9 MB in the beginning and 2.7 GB in the end (delta: -2.1 GB). Peak memory consumption was 632.0 MB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,990 INFO  L168              Benchmark]: BuchiAutomizer took 469536.84 ms. Allocated memory was 4.1 GB in the beginning and 7.1 GB in the end (delta: 3.0 GB). Free memory was 2.7 GB in the beginning and 2.1 GB in the end (delta: 583.0 MB). Peak memory consumption was 3.6 GB. Max. memory is 15.3 GB.
[2020-05-31 04:36:12,994 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    46983 locations, 199052 edges
  - StatisticsResult: Encoded RCFG
    46223 locations, 194320 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 116.58 ms. Allocated memory is still 514.9 MB. Free memory was 441.3 MB in the beginning and 421.0 MB in the end (delta: 20.3 MB). Peak memory consumption was 20.3 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.95 ms. Allocated memory is still 514.9 MB. Free memory was 421.0 MB in the beginning and 408.9 MB in the end (delta: 12.1 MB). Peak memory consumption was 12.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.49 ms. Allocated memory is still 514.9 MB. Free memory was 407.5 MB in the beginning and 402.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 928.10 ms. Allocated memory was 514.9 MB in the beginning and 641.7 MB in the end (delta: 126.9 MB). Free memory was 402.2 MB in the beginning and 559.3 MB in the end (delta: -157.2 MB). Peak memory consumption was 128.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 57.14 ms. Allocated memory is still 641.7 MB. Free memory was 559.3 MB in the beginning and 550.3 MB in the end (delta: 9.0 MB). Peak memory consumption was 9.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 14694.13 ms. Allocated memory was 641.7 MB in the beginning and 2.9 GB in the end (delta: 2.2 GB). Free memory was 550.3 MB in the beginning and 574.9 MB in the end (delta: -24.6 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 3465.65 ms. Allocated memory was 2.9 GB in the beginning and 4.1 GB in the end (delta: 1.2 GB). Free memory was 574.9 MB in the beginning and 2.7 GB in the end (delta: -2.1 GB). Peak memory consumption was 632.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 469536.84 ms. Allocated memory was 4.1 GB in the beginning and 7.1 GB in the end (delta: 3.0 GB). Free memory was 2.7 GB in the beginning and 2.1 GB in the end (delta: 583.0 MB). Peak memory consumption was 3.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    4729 locations, 6765 edges
  - StatisticsResult: BuchiProgram size
    46983 locations, 199052 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 51 terminating modules (51 trivial, 0 deterministic, 0 nondeterministic). 51 modules have a trivial ranking function, the largest among these consists of 56 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 469.5s and 52 iterations.  TraceHistogramMax:10. Analysis of lassos took 20.2s. Construction of modules took 362.1s. BÃ¼chi inclusion checks took 56.4s. Highest rank in rank-based complementation 0. Minimization of det autom 51. Minimization of nondet autom 0. Automata minimization 15.5s AutomataMinimizationTime, 50 MinimizatonAttempts, 17830 StatesRemovedByMinimization, 35 NontrivialMinimizations. Non-live state removal took 10.2s Buchi closure took 0.0s. Biggest automaton had 71136 states and ocurred in iteration 48.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 1303564 SDtfs, 540134 SDslu, 3817963 SDs, 0 SdLazy, 2007798 SolverSat, 133337 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 362.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU51 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_buyTokens_(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) && ( <>(success_finalize_Finalizable(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) )&& ! ( ( []( (inv_CorralChoice_RefundableCrowdsale0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
